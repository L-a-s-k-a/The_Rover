
build/debug/f103_servo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005fb0  08005fb0  00006fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  20000000  08006030  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001438  2000017c  080061ac  0000817c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200015b4  080061ac  000085b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  000081a5  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018caa  00000000  00000000  000081de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c57  00000000  00000000  00020e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000ae3e  00000000  00000000  00024adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001210  00000000  00000000  0002f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000eae  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000109e9  00000000  00000000  000319de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00004eb7  00000000  00000000  000423c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002d54  00000000  00000000  00047280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000173  00000000  00000000  00049fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__aeabi_drsub>:
 8000110:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000114:	e002      	b.n	800011c <__adddf3>
 8000116:	bf00      	nop

08000118 <__aeabi_dsub>:
 8000118:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800011c <__adddf3>:
 800011c:	b530      	push	{r4, r5, lr}
 800011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000126:	ea94 0f05 	teq	r4, r5
 800012a:	bf08      	it	eq
 800012c:	ea90 0f02 	teqeq	r0, r2
 8000130:	bf1f      	itttt	ne
 8000132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000142:	f000 80e2 	beq.w	800030a <__adddf3+0x1ee>
 8000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800014e:	bfb8      	it	lt
 8000150:	426d      	neglt	r5, r5
 8000152:	dd0c      	ble.n	800016e <__adddf3+0x52>
 8000154:	442c      	add	r4, r5
 8000156:	ea80 0202 	eor.w	r2, r0, r2
 800015a:	ea81 0303 	eor.w	r3, r1, r3
 800015e:	ea82 0000 	eor.w	r0, r2, r0
 8000162:	ea83 0101 	eor.w	r1, r3, r1
 8000166:	ea80 0202 	eor.w	r2, r0, r2
 800016a:	ea81 0303 	eor.w	r3, r1, r3
 800016e:	2d36      	cmp	r5, #54	@ 0x36
 8000170:	bf88      	it	hi
 8000172:	bd30      	pophi	{r4, r5, pc}
 8000174:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800017c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000184:	d002      	beq.n	800018c <__adddf3+0x70>
 8000186:	4240      	negs	r0, r0
 8000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800018c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000198:	d002      	beq.n	80001a0 <__adddf3+0x84>
 800019a:	4252      	negs	r2, r2
 800019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001a0:	ea94 0f05 	teq	r4, r5
 80001a4:	f000 80a7 	beq.w	80002f6 <__adddf3+0x1da>
 80001a8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80001b0:	db0d      	blt.n	80001ce <__adddf3+0xb2>
 80001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001b6:	fa22 f205 	lsr.w	r2, r2, r5
 80001ba:	1880      	adds	r0, r0, r2
 80001bc:	f141 0100 	adc.w	r1, r1, #0
 80001c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80001c4:	1880      	adds	r0, r0, r2
 80001c6:	fa43 f305 	asr.w	r3, r3, r5
 80001ca:	4159      	adcs	r1, r3
 80001cc:	e00e      	b.n	80001ec <__adddf3+0xd0>
 80001ce:	f1a5 0520 	sub.w	r5, r5, #32
 80001d2:	f10e 0e20 	add.w	lr, lr, #32
 80001d6:	2a01      	cmp	r2, #1
 80001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001dc:	bf28      	it	cs
 80001de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001e2:	fa43 f305 	asr.w	r3, r3, r5
 80001e6:	18c0      	adds	r0, r0, r3
 80001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80001ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80001f0:	d507      	bpl.n	8000202 <__adddf3+0xe6>
 80001f2:	f04f 0e00 	mov.w	lr, #0
 80001f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80001fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000202:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000206:	d31b      	bcc.n	8000240 <__adddf3+0x124>
 8000208:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800020c:	d30c      	bcc.n	8000228 <__adddf3+0x10c>
 800020e:	0849      	lsrs	r1, r1, #1
 8000210:	ea5f 0030 	movs.w	r0, r0, rrx
 8000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000218:	f104 0401 	add.w	r4, r4, #1
 800021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000220:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000224:	f080 809a 	bcs.w	800035c <__adddf3+0x240>
 8000228:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	ea41 0105 	orr.w	r1, r1, r5
 800023e:	bd30      	pop	{r4, r5, pc}
 8000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000244:	4140      	adcs	r0, r0
 8000246:	eb41 0101 	adc.w	r1, r1, r1
 800024a:	3c01      	subs	r4, #1
 800024c:	bf28      	it	cs
 800024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000252:	d2e9      	bcs.n	8000228 <__adddf3+0x10c>
 8000254:	f091 0f00 	teq	r1, #0
 8000258:	bf04      	itt	eq
 800025a:	4601      	moveq	r1, r0
 800025c:	2000      	moveq	r0, #0
 800025e:	fab1 f381 	clz	r3, r1
 8000262:	bf08      	it	eq
 8000264:	3320      	addeq	r3, #32
 8000266:	f1a3 030b 	sub.w	r3, r3, #11
 800026a:	f1b3 0220 	subs.w	r2, r3, #32
 800026e:	da0c      	bge.n	800028a <__adddf3+0x16e>
 8000270:	320c      	adds	r2, #12
 8000272:	dd08      	ble.n	8000286 <__adddf3+0x16a>
 8000274:	f102 0c14 	add.w	ip, r2, #20
 8000278:	f1c2 020c 	rsb	r2, r2, #12
 800027c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000280:	fa21 f102 	lsr.w	r1, r1, r2
 8000284:	e00c      	b.n	80002a0 <__adddf3+0x184>
 8000286:	f102 0214 	add.w	r2, r2, #20
 800028a:	bfd8      	it	le
 800028c:	f1c2 0c20 	rsble	ip, r2, #32
 8000290:	fa01 f102 	lsl.w	r1, r1, r2
 8000294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000298:	bfdc      	itt	le
 800029a:	ea41 010c 	orrle.w	r1, r1, ip
 800029e:	4090      	lslle	r0, r2
 80002a0:	1ae4      	subs	r4, r4, r3
 80002a2:	bfa2      	ittt	ge
 80002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002a8:	4329      	orrge	r1, r5
 80002aa:	bd30      	popge	{r4, r5, pc}
 80002ac:	ea6f 0404 	mvn.w	r4, r4
 80002b0:	3c1f      	subs	r4, #31
 80002b2:	da1c      	bge.n	80002ee <__adddf3+0x1d2>
 80002b4:	340c      	adds	r4, #12
 80002b6:	dc0e      	bgt.n	80002d6 <__adddf3+0x1ba>
 80002b8:	f104 0414 	add.w	r4, r4, #20
 80002bc:	f1c4 0220 	rsb	r2, r4, #32
 80002c0:	fa20 f004 	lsr.w	r0, r0, r4
 80002c4:	fa01 f302 	lsl.w	r3, r1, r2
 80002c8:	ea40 0003 	orr.w	r0, r0, r3
 80002cc:	fa21 f304 	lsr.w	r3, r1, r4
 80002d0:	ea45 0103 	orr.w	r1, r5, r3
 80002d4:	bd30      	pop	{r4, r5, pc}
 80002d6:	f1c4 040c 	rsb	r4, r4, #12
 80002da:	f1c4 0220 	rsb	r2, r4, #32
 80002de:	fa20 f002 	lsr.w	r0, r0, r2
 80002e2:	fa01 f304 	lsl.w	r3, r1, r4
 80002e6:	ea40 0003 	orr.w	r0, r0, r3
 80002ea:	4629      	mov	r1, r5
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	fa21 f004 	lsr.w	r0, r1, r4
 80002f2:	4629      	mov	r1, r5
 80002f4:	bd30      	pop	{r4, r5, pc}
 80002f6:	f094 0f00 	teq	r4, #0
 80002fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80002fe:	bf06      	itte	eq
 8000300:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000304:	3401      	addeq	r4, #1
 8000306:	3d01      	subne	r5, #1
 8000308:	e74e      	b.n	80001a8 <__adddf3+0x8c>
 800030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800030e:	bf18      	it	ne
 8000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000314:	d029      	beq.n	800036a <__adddf3+0x24e>
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	d005      	beq.n	800032e <__adddf3+0x212>
 8000322:	ea54 0c00 	orrs.w	ip, r4, r0
 8000326:	bf04      	itt	eq
 8000328:	4619      	moveq	r1, r3
 800032a:	4610      	moveq	r0, r2
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	ea91 0f03 	teq	r1, r3
 8000332:	bf1e      	ittt	ne
 8000334:	2100      	movne	r1, #0
 8000336:	2000      	movne	r0, #0
 8000338:	bd30      	popne	{r4, r5, pc}
 800033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800033e:	d105      	bne.n	800034c <__adddf3+0x230>
 8000340:	0040      	lsls	r0, r0, #1
 8000342:	4149      	adcs	r1, r1
 8000344:	bf28      	it	cs
 8000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000350:	bf3c      	itt	cc
 8000352:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000356:	bd30      	popcc	{r4, r5, pc}
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800035c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000360:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf1a      	itte	ne
 8000370:	4619      	movne	r1, r3
 8000372:	4610      	movne	r0, r2
 8000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000378:	bf1c      	itt	ne
 800037a:	460b      	movne	r3, r1
 800037c:	4602      	movne	r2, r0
 800037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000382:	bf06      	itte	eq
 8000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000388:	ea91 0f03 	teqeq	r1, r3
 800038c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	bf00      	nop

08000394 <__aeabi_ui2d>:
 8000394:	f090 0f00 	teq	r0, #0
 8000398:	bf04      	itt	eq
 800039a:	2100      	moveq	r1, #0
 800039c:	4770      	bxeq	lr
 800039e:	b530      	push	{r4, r5, lr}
 80003a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003a8:	f04f 0500 	mov.w	r5, #0
 80003ac:	f04f 0100 	mov.w	r1, #0
 80003b0:	e750      	b.n	8000254 <__adddf3+0x138>
 80003b2:	bf00      	nop

080003b4 <__aeabi_i2d>:
 80003b4:	f090 0f00 	teq	r0, #0
 80003b8:	bf04      	itt	eq
 80003ba:	2100      	moveq	r1, #0
 80003bc:	4770      	bxeq	lr
 80003be:	b530      	push	{r4, r5, lr}
 80003c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	f04f 0100 	mov.w	r1, #0
 80003d4:	e73e      	b.n	8000254 <__adddf3+0x138>
 80003d6:	bf00      	nop

080003d8 <__aeabi_f2d>:
 80003d8:	0042      	lsls	r2, r0, #1
 80003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003de:	ea4f 0131 	mov.w	r1, r1, rrx
 80003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003e6:	bf1f      	itttt	ne
 80003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80003ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80003f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80003f4:	4770      	bxne	lr
 80003f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80003fa:	bf08      	it	eq
 80003fc:	4770      	bxeq	lr
 80003fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000402:	bf04      	itt	eq
 8000404:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	e71c      	b.n	8000254 <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_ul2d>:
 800041c:	ea50 0201 	orrs.w	r2, r0, r1
 8000420:	bf08      	it	eq
 8000422:	4770      	bxeq	lr
 8000424:	b530      	push	{r4, r5, lr}
 8000426:	f04f 0500 	mov.w	r5, #0
 800042a:	e00a      	b.n	8000442 <__aeabi_l2d+0x16>

0800042c <__aeabi_l2d>:
 800042c:	ea50 0201 	orrs.w	r2, r0, r1
 8000430:	bf08      	it	eq
 8000432:	4770      	bxeq	lr
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800043a:	d502      	bpl.n	8000442 <__aeabi_l2d+0x16>
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000446:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800044e:	f43f aed8 	beq.w	8000202 <__adddf3+0xe6>
 8000452:	f04f 0203 	mov.w	r2, #3
 8000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800045a:	bf18      	it	ne
 800045c:	3203      	addne	r2, #3
 800045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000462:	bf18      	it	ne
 8000464:	3203      	addne	r2, #3
 8000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 fe03 	lsl.w	lr, r1, r3
 800047a:	ea40 000e 	orr.w	r0, r0, lr
 800047e:	fa21 f102 	lsr.w	r1, r1, r2
 8000482:	4414      	add	r4, r2
 8000484:	e6bd      	b.n	8000202 <__adddf3+0xe6>
 8000486:	bf00      	nop

08000488 <__aeabi_dmul>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800048e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000496:	bf1d      	ittte	ne
 8000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800049c:	ea94 0f0c 	teqne	r4, ip
 80004a0:	ea95 0f0c 	teqne	r5, ip
 80004a4:	f000 f8de 	bleq	8000664 <__aeabi_dmul+0x1dc>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea81 0603 	eor.w	r6, r1, r3
 80004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ba:	bf18      	it	ne
 80004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80004c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004c8:	d038      	beq.n	800053c <__aeabi_dmul+0xb4>
 80004ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80004ce:	f04f 0500 	mov.w	r5, #0
 80004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80004da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004de:	f04f 0600 	mov.w	r6, #0
 80004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004e6:	f09c 0f00 	teq	ip, #0
 80004ea:	bf18      	it	ne
 80004ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80004f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80004f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80004f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80004fc:	d204      	bcs.n	8000508 <__aeabi_dmul+0x80>
 80004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000502:	416d      	adcs	r5, r5
 8000504:	eb46 0606 	adc.w	r6, r6, r6
 8000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800051c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000520:	bf88      	it	hi
 8000522:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000526:	d81e      	bhi.n	8000566 <__aeabi_dmul+0xde>
 8000528:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800052c:	bf08      	it	eq
 800052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000532:	f150 0000 	adcs.w	r0, r0, #0
 8000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000540:	ea46 0101 	orr.w	r1, r6, r1
 8000544:	ea40 0002 	orr.w	r0, r0, r2
 8000548:	ea81 0103 	eor.w	r1, r1, r3
 800054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000550:	bfc2      	ittt	gt
 8000552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800055a:	bd70      	popgt	{r4, r5, r6, pc}
 800055c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000560:	f04f 0e00 	mov.w	lr, #0
 8000564:	3c01      	subs	r4, #1
 8000566:	f300 80ab 	bgt.w	80006c0 <__aeabi_dmul+0x238>
 800056a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800056e:	bfde      	ittt	le
 8000570:	2000      	movle	r0, #0
 8000572:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000576:	bd70      	pople	{r4, r5, r6, pc}
 8000578:	f1c4 0400 	rsb	r4, r4, #0
 800057c:	3c20      	subs	r4, #32
 800057e:	da35      	bge.n	80005ec <__aeabi_dmul+0x164>
 8000580:	340c      	adds	r4, #12
 8000582:	dc1b      	bgt.n	80005bc <__aeabi_dmul+0x134>
 8000584:	f104 0414 	add.w	r4, r4, #20
 8000588:	f1c4 0520 	rsb	r5, r4, #32
 800058c:	fa00 f305 	lsl.w	r3, r0, r5
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f205 	lsl.w	r2, r1, r5
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005a8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ac:	eb42 0106 	adc.w	r1, r2, r6
 80005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005b4:	bf08      	it	eq
 80005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f1c4 040c 	rsb	r4, r4, #12
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f304 	lsl.w	r3, r0, r4
 80005c8:	fa20 f005 	lsr.w	r0, r0, r5
 80005cc:	fa01 f204 	lsl.w	r2, r1, r4
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	f141 0100 	adc.w	r1, r1, #0
 80005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e4:	bf08      	it	eq
 80005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f205 	lsl.w	r2, r0, r5
 80005f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005f8:	fa20 f304 	lsr.w	r3, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea43 0302 	orr.w	r3, r3, r2
 8000604:	fa21 f004 	lsr.w	r0, r1, r4
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800060c:	fa21 f204 	lsr.w	r2, r1, r4
 8000610:	ea20 0002 	bic.w	r0, r0, r2
 8000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f094 0f00 	teq	r4, #0
 8000628:	d10f      	bne.n	800064a <__aeabi_dmul+0x1c2>
 800062a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800062e:	0040      	lsls	r0, r0, #1
 8000630:	eb41 0101 	adc.w	r1, r1, r1
 8000634:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000638:	bf08      	it	eq
 800063a:	3c01      	subeq	r4, #1
 800063c:	d0f7      	beq.n	800062e <__aeabi_dmul+0x1a6>
 800063e:	ea41 0106 	orr.w	r1, r1, r6
 8000642:	f095 0f00 	teq	r5, #0
 8000646:	bf18      	it	ne
 8000648:	4770      	bxne	lr
 800064a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	eb43 0303 	adc.w	r3, r3, r3
 8000654:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000658:	bf08      	it	eq
 800065a:	3d01      	subeq	r5, #1
 800065c:	d0f7      	beq.n	800064e <__aeabi_dmul+0x1c6>
 800065e:	ea43 0306 	orr.w	r3, r3, r6
 8000662:	4770      	bx	lr
 8000664:	ea94 0f0c 	teq	r4, ip
 8000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800066c:	bf18      	it	ne
 800066e:	ea95 0f0c 	teqne	r5, ip
 8000672:	d00c      	beq.n	800068e <__aeabi_dmul+0x206>
 8000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000678:	bf18      	it	ne
 800067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800067e:	d1d1      	bne.n	8000624 <__aeabi_dmul+0x19c>
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000692:	bf06      	itte	eq
 8000694:	4610      	moveq	r0, r2
 8000696:	4619      	moveq	r1, r3
 8000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800069c:	d019      	beq.n	80006d2 <__aeabi_dmul+0x24a>
 800069e:	ea94 0f0c 	teq	r4, ip
 80006a2:	d102      	bne.n	80006aa <__aeabi_dmul+0x222>
 80006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006a8:	d113      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006aa:	ea95 0f0c 	teq	r5, ip
 80006ae:	d105      	bne.n	80006bc <__aeabi_dmul+0x234>
 80006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006b4:	bf1c      	itt	ne
 80006b6:	4610      	movne	r0, r2
 80006b8:	4619      	movne	r1, r3
 80006ba:	d10a      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80006d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80006da:	bd70      	pop	{r4, r5, r6, pc}

080006dc <__aeabi_ddiv>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006ea:	bf1d      	ittte	ne
 80006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006f0:	ea94 0f0c 	teqne	r4, ip
 80006f4:	ea95 0f0c 	teqne	r5, ip
 80006f8:	f000 f8a7 	bleq	800084a <__aeabi_ddiv+0x16e>
 80006fc:	eba4 0405 	sub.w	r4, r4, r5
 8000700:	ea81 0e03 	eor.w	lr, r1, r3
 8000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800070c:	f000 8088 	beq.w	8000820 <__aeabi_ddiv+0x144>
 8000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000714:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000730:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000734:	429d      	cmp	r5, r3
 8000736:	bf08      	it	eq
 8000738:	4296      	cmpeq	r6, r2
 800073a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800073e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000742:	d202      	bcs.n	800074a <__aeabi_ddiv+0x6e>
 8000744:	085b      	lsrs	r3, r3, #1
 8000746:	ea4f 0232 	mov.w	r2, r2, rrx
 800074a:	1ab6      	subs	r6, r6, r2
 800074c:	eb65 0503 	sbc.w	r5, r5, r3
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	ea4f 0232 	mov.w	r2, r2, rrx
 8000756:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800075a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800075e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000766:	bf22      	ittt	cs
 8000768:	1ab6      	subcs	r6, r6, r2
 800076a:	4675      	movcs	r5, lr
 800076c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	ea4f 0232 	mov.w	r2, r2, rrx
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007bc:	d018      	beq.n	80007f0 <__aeabi_ddiv+0x114>
 80007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007da:	d1c0      	bne.n	800075e <__aeabi_ddiv+0x82>
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	d10b      	bne.n	80007fa <__aeabi_ddiv+0x11e>
 80007e2:	ea41 0100 	orr.w	r1, r1, r0
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80007ee:	e7b6      	b.n	800075e <__aeabi_ddiv+0x82>
 80007f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f4:	bf04      	itt	eq
 80007f6:	4301      	orreq	r1, r0
 80007f8:	2000      	moveq	r0, #0
 80007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007fe:	bf88      	it	hi
 8000800:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000804:	f63f aeaf 	bhi.w	8000566 <__aeabi_dmul+0xde>
 8000808:	ebb5 0c03 	subs.w	ip, r5, r3
 800080c:	bf04      	itt	eq
 800080e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000816:	f150 0000 	adcs.w	r0, r0, #0
 800081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800082c:	bfc2      	ittt	gt
 800082e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000836:	bd70      	popgt	{r4, r5, r6, pc}
 8000838:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800083c:	f04f 0e00 	mov.w	lr, #0
 8000840:	3c01      	subs	r4, #1
 8000842:	e690      	b.n	8000566 <__aeabi_dmul+0xde>
 8000844:	ea45 0e06 	orr.w	lr, r5, r6
 8000848:	e68d      	b.n	8000566 <__aeabi_dmul+0xde>
 800084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	bf08      	it	eq
 8000854:	ea95 0f0c 	teqeq	r5, ip
 8000858:	f43f af3b 	beq.w	80006d2 <__aeabi_dmul+0x24a>
 800085c:	ea94 0f0c 	teq	r4, ip
 8000860:	d10a      	bne.n	8000878 <__aeabi_ddiv+0x19c>
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	f47f af34 	bne.w	80006d2 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	f47f af25 	bne.w	80006bc <__aeabi_dmul+0x234>
 8000872:	4610      	mov	r0, r2
 8000874:	4619      	mov	r1, r3
 8000876:	e72c      	b.n	80006d2 <__aeabi_dmul+0x24a>
 8000878:	ea95 0f0c 	teq	r5, ip
 800087c:	d106      	bne.n	800088c <__aeabi_ddiv+0x1b0>
 800087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000882:	f43f aefd 	beq.w	8000680 <__aeabi_dmul+0x1f8>
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	e722      	b.n	80006d2 <__aeabi_dmul+0x24a>
 800088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000896:	f47f aec5 	bne.w	8000624 <__aeabi_dmul+0x19c>
 800089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800089e:	f47f af0d 	bne.w	80006bc <__aeabi_dmul+0x234>
 80008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008a6:	f47f aeeb 	bne.w	8000680 <__aeabi_dmul+0x1f8>
 80008aa:	e712      	b.n	80006d2 <__aeabi_dmul+0x24a>

080008ac <__aeabi_d2f>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008b4:	bf24      	itt	cs
 80008b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008be:	d90d      	bls.n	80008dc <__aeabi_d2f+0x30>
 80008c0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008cc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008d4:	bf08      	it	eq
 80008d6:	f020 0001 	biceq.w	r0, r0, #1
 80008da:	4770      	bx	lr
 80008dc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008e0:	d121      	bne.n	8000926 <__aeabi_d2f+0x7a>
 80008e2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008e6:	bfbc      	itt	lt
 80008e8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008ec:	4770      	bxlt	lr
 80008ee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008f6:	f1c2 0218 	rsb	r2, r2, #24
 80008fa:	f1c2 0c20 	rsb	ip, r2, #32
 80008fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	bf18      	it	ne
 8000908:	f040 0001 	orrne.w	r0, r0, #1
 800090c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000914:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000918:	ea40 000c 	orr.w	r0, r0, ip
 800091c:	fa23 f302 	lsr.w	r3, r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x14>
 8000926:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800092a:	d107      	bne.n	800093c <__aeabi_d2f+0x90>
 800092c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000930:	bf1e      	ittt	ne
 8000932:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000936:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800093a:	4770      	bxne	lr
 800093c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000940:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000944:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	@ 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	3a01      	subs	r2, #1
 8000a06:	bf28      	it	cs
 8000a08:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a0c:	d2ed      	bcs.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bba:	2afd      	cmp	r2, #253	@ 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	@ 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	@ 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	@ 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__gesf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295
 8000e0c:	e006      	b.n	8000e1c <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__lesf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpsf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpsf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e32:	d011      	beq.n	8000e58 <__cmpsf2+0x40>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3a:	bf18      	it	ne
 8000e3c:	ea90 0f01 	teqne	r0, r1
 8000e40:	bf58      	it	pl
 8000e42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e46:	bf88      	it	hi
 8000e48:	17c8      	asrhi	r0, r1, #31
 8000e4a:	bf38      	it	cc
 8000e4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e50:	bf18      	it	ne
 8000e52:	f040 0001 	orrne.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	d102      	bne.n	8000e64 <__cmpsf2+0x4c>
 8000e5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e62:	d105      	bne.n	8000e70 <__cmpsf2+0x58>
 8000e64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e68:	d1e4      	bne.n	8000e34 <__cmpsf2+0x1c>
 8000e6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e6e:	d0e1      	beq.n	8000e34 <__cmpsf2+0x1c>
 8000e70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_cfrcmple>:
 8000e78:	4684      	mov	ip, r0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	4661      	mov	r1, ip
 8000e7e:	e7ff      	b.n	8000e80 <__aeabi_cfcmpeq>

08000e80 <__aeabi_cfcmpeq>:
 8000e80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e82:	f7ff ffc9 	bl	8000e18 <__cmpsf2>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	bf48      	it	mi
 8000e8a:	f110 0f00 	cmnmi.w	r0, #0
 8000e8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e90 <__aeabi_fcmpeq>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff fff4 	bl	8000e80 <__aeabi_cfcmpeq>
 8000e98:	bf0c      	ite	eq
 8000e9a:	2001      	moveq	r0, #1
 8000e9c:	2000      	movne	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffea 	bl	8000e80 <__aeabi_cfcmpeq>
 8000eac:	bf34      	ite	cc
 8000eae:	2001      	movcc	r0, #1
 8000eb0:	2000      	movcs	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmple>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffe0 	bl	8000e80 <__aeabi_cfcmpeq>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpge>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffd2 	bl	8000e78 <__aeabi_cfrcmple>
 8000ed4:	bf94      	ite	ls
 8000ed6:	2001      	movls	r0, #1
 8000ed8:	2000      	movhi	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmpgt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffc8 	bl	8000e78 <__aeabi_cfrcmple>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_f2iz>:
 8000ef4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000efc:	d30f      	bcc.n	8000f1e <__aeabi_f2iz+0x2a>
 8000efe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f06:	d90d      	bls.n	8000f24 <__aeabi_f2iz+0x30>
 8000f08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f10:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	bf18      	it	ne
 8000f1a:	4240      	negne	r0, r0
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr
 8000f24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f28:	d101      	bne.n	8000f2e <__aeabi_f2iz+0x3a>
 8000f2a:	0242      	lsls	r2, r0, #9
 8000f2c:	d105      	bne.n	8000f3a <__aeabi_f2iz+0x46>
 8000f2e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f32:	bf08      	it	eq
 8000f34:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4770      	bx	lr

08000f40 <__do_global_dtors_aux>:
 8000f40:	b510      	push	{r4, lr}
 8000f42:	4c05      	ldr	r4, [pc, #20]	@ (8000f58 <__do_global_dtors_aux+0x18>)
 8000f44:	7823      	ldrb	r3, [r4, #0]
 8000f46:	b933      	cbnz	r3, 8000f56 <__do_global_dtors_aux+0x16>
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__do_global_dtors_aux+0x1c>)
 8000f4a:	b113      	cbz	r3, 8000f52 <__do_global_dtors_aux+0x12>
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <__do_global_dtors_aux+0x20>)
 8000f4e:	f3af 8000 	nop.w
 8000f52:	2301      	movs	r3, #1
 8000f54:	7023      	strb	r3, [r4, #0]
 8000f56:	bd10      	pop	{r4, pc}
 8000f58:	2000017c 	.word	0x2000017c
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	08005f98 	.word	0x08005f98

08000f64 <frame_dummy>:
 8000f64:	b508      	push	{r3, lr}
 8000f66:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <frame_dummy+0x10>)
 8000f68:	b11b      	cbz	r3, 8000f72 <frame_dummy+0xe>
 8000f6a:	4903      	ldr	r1, [pc, #12]	@ (8000f78 <frame_dummy+0x14>)
 8000f6c:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <frame_dummy+0x18>)
 8000f6e:	f3af 8000 	nop.w
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	00000000 	.word	0x00000000
 8000f78:	20000180 	.word	0x20000180
 8000f7c:	08005f98 	.word	0x08005f98

08000f80 <encoder_updatePosition>:
		encoder->gearRatio = 1;
	}
}

// Calculates current relative position in rad. Should be called with a specified period (dt) or less
void encoder_updatePosition(encoder_t *encoder) {
 8000f80:	b5d0      	push	{r4, r6, r7, lr}
 8000f82:	4604      	mov	r4, r0
	encoder->currentTicks = (int16_t) encoder->htim->Instance->CNT;
 8000f84:	6801      	ldr	r1, [r0, #0]
 8000f86:	680b      	ldr	r3, [r1, #0]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	8203      	strh	r3, [r0, #16]

	encoder->fullRevolutions += encoder->currentTicks / encoder->countsPerRevolution;
 8000f8e:	6942      	ldr	r2, [r0, #20]
 8000f90:	8886      	ldrh	r6, [r0, #4]
 8000f92:	fb93 f0f6 	sdiv	r0, r3, r6
 8000f96:	4402      	add	r2, r0
 8000f98:	6162      	str	r2, [r4, #20]
	encoder->currentTicks = encoder->currentTicks % encoder->countsPerRevolution;
 8000f9a:	fb06 3310 	mls	r3, r6, r0, r3
 8000f9e:	8223      	strh	r3, [r4, #16]
	encoder->htim->Instance->CNT = (uint16_t) encoder->currentTicks;
 8000fa0:	680a      	ldr	r2, [r1, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	6253      	str	r3, [r2, #36]	@ 0x24

	encoder->angle = (((float) encoder->fullRevolutions
 8000fa6:	6960      	ldr	r0, [r4, #20]
 8000fa8:	f7ff fd8a 	bl	8000ac0 <__aeabi_i2f>
 8000fac:	4606      	mov	r6, r0
			+ ((float) encoder->currentTicks / encoder->countsPerRevolution)) * 2 * M_PI)
 8000fae:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8000fb2:	f7ff fd85 	bl	8000ac0 <__aeabi_i2f>
 8000fb6:	4607      	mov	r7, r0
 8000fb8:	88a0      	ldrh	r0, [r4, #4]
 8000fba:	f7ff fd81 	bl	8000ac0 <__aeabi_i2f>
 8000fbe:	4601      	mov	r1, r0
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	f7ff fe85 	bl	8000cd0 <__aeabi_fdiv>
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	4630      	mov	r0, r6
 8000fca:	f7ff fcc5 	bl	8000958 <__addsf3>
 8000fce:	4601      	mov	r1, r0
 8000fd0:	f7ff fcc2 	bl	8000958 <__addsf3>
 8000fd4:	f7ff fa00 	bl	80003d8 <__aeabi_f2d>
 8000fd8:	a309      	add	r3, pc, #36	@ (adr r3, 8001000 <encoder_updatePosition+0x80>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fa53 	bl	8000488 <__aeabi_dmul>
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	460f      	mov	r7, r1
			/ encoder->gearRatio;
 8000fe6:	69e0      	ldr	r0, [r4, #28]
 8000fe8:	f7ff f9f6 	bl	80003d8 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	4639      	mov	r1, r7
 8000ff4:	f7ff fb72 	bl	80006dc <__aeabi_ddiv>
 8000ff8:	f7ff fc58 	bl	80008ac <__aeabi_d2f>
	encoder->angle = (((float) encoder->fullRevolutions
 8000ffc:	60a0      	str	r0, [r4, #8]
}
 8000ffe:	bdd0      	pop	{r4, r6, r7, pc}
 8001000:	54442d18 	.word	0x54442d18
 8001004:	400921fb 	.word	0x400921fb

08001008 <encoder_updateVelocity>:

// Calculates current angular velocity in rad/s. Must be called with a specified period (dt)
void encoder_updateVelocity(encoder_t *encoder) {
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4604      	mov	r4, r0
	encoder->angularVelocity = (encoder->angle - encoder->previousAngle) / encoder->dt;
 800100c:	6885      	ldr	r5, [r0, #8]
 800100e:	6a01      	ldr	r1, [r0, #32]
 8001010:	4628      	mov	r0, r5
 8001012:	f7ff fc9f 	bl	8000954 <__aeabi_fsub>
 8001016:	69a1      	ldr	r1, [r4, #24]
 8001018:	f7ff fe5a 	bl	8000cd0 <__aeabi_fdiv>
 800101c:	60e0      	str	r0, [r4, #12]
	encoder->previousAngle = encoder->angle;
 800101e:	6225      	str	r5, [r4, #32]
}
 8001020:	bd38      	pop	{r3, r4, r5, pc}

08001022 <encoder_getAngle>:
	encoder->currentTicks = 0;
}

float encoder_getAngle(encoder_t *encoder){
	return encoder->angle;
}
 8001022:	6880      	ldr	r0, [r0, #8]
 8001024:	4770      	bx	lr

08001026 <encoder_getVelocity>:
float encoder_getVelocity(encoder_t *encoder){
	return encoder->angularVelocity;
}
 8001026:	68c0      	ldr	r0, [r0, #12]
 8001028:	4770      	bx	lr
	...

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b530      	push	{r4, r5, lr}
 800102e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	2400      	movs	r4, #0
 8001032:	9404      	str	r4, [sp, #16]
 8001034:	9405      	str	r4, [sp, #20]
 8001036:	9406      	str	r4, [sp, #24]
 8001038:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_GPIO_Init+0x6c>)
 800103c:	699a      	ldr	r2, [r3, #24]
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	619a      	str	r2, [r3, #24]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	f002 0220 	and.w	r2, r2, #32
 800104a:	9201      	str	r2, [sp, #4]
 800104c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	f042 0204 	orr.w	r2, r2, #4
 8001054:	619a      	str	r2, [r3, #24]
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	f002 0204 	and.w	r2, r2, #4
 800105c:	9202      	str	r2, [sp, #8]
 800105e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	699a      	ldr	r2, [r3, #24]
 8001062:	f042 0208 	orr.w	r2, r2, #8
 8001066:	619a      	str	r2, [r3, #24]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	9303      	str	r3, [sp, #12]
 8001070:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8001072:	4d0a      	ldr	r5, [pc, #40]	@ (800109c <MX_GPIO_Init+0x70>)
 8001074:	4622      	mov	r2, r4
 8001076:	2118      	movs	r1, #24
 8001078:	4628      	mov	r0, r5
 800107a:	f000 fd95 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin;
 800107e:	2318      	movs	r3, #24
 8001080:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2302      	movs	r3, #2
 800108a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	a904      	add	r1, sp, #16
 800108e:	4628      	mov	r0, r5
 8001090:	f000 fc7c 	bl	800198c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001094:	b009      	add	sp, #36	@ 0x24
 8001096:	bd30      	pop	{r4, r5, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40010800 	.word	0x40010800

080010a0 <USBRxHandler>:
void USBRxHandler(uint8_t* buf, uint16_t len){
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4605      	mov	r5, r0
 80010a4:	460c      	mov	r4, r1
  if(strncmp((char*)buf,"HIGH", len) == 0){
 80010a6:	460a      	mov	r2, r1
 80010a8:	490f      	ldr	r1, [pc, #60]	@ (80010e8 <USBRxHandler+0x48>)
 80010aa:	f004 ff3e 	bl	8005f2a <strncmp>
 80010ae:	b130      	cbz	r0, 80010be <USBRxHandler+0x1e>
  else if (strncmp((char*)buf, "LOW", len) == 0) {
 80010b0:	4622      	mov	r2, r4
 80010b2:	490e      	ldr	r1, [pc, #56]	@ (80010ec <USBRxHandler+0x4c>)
 80010b4:	4628      	mov	r0, r5
 80010b6:	f004 ff38 	bl	8005f2a <strncmp>
 80010ba:	b150      	cbz	r0, 80010d2 <USBRxHandler+0x32>
}
 80010bc:	bd38      	pop	{r3, r4, r5, pc}
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c4:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80010c8:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80010cc:	f000 fd6c 	bl	8001ba8 <HAL_GPIO_WritePin>
 80010d0:	e7f4      	b.n	80010bc <USBRxHandler+0x1c>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Выключить
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d8:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80010dc:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80010e0:	f000 fd62 	bl	8001ba8 <HAL_GPIO_WritePin>
  return;
 80010e4:	e7ea      	b.n	80010bc <USBRxHandler+0x1c>
 80010e6:	bf00      	nop
 80010e8:	08005fb0 	.word	0x08005fb0
 80010ec:	08005fb8 	.word	0x08005fb8

080010f0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <Error_Handler+0x2>

080010f4 <MX_TIM2_Init>:
{
 80010f4:	b500      	push	{lr}
 80010f6:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f8:	2300      	movs	r3, #0
 80010fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80010fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80010fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8001100:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	9308      	str	r3, [sp, #32]
 8001104:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9304      	str	r3, [sp, #16]
 800110e:	9305      	str	r3, [sp, #20]
 8001110:	9306      	str	r3, [sp, #24]
 8001112:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001114:	4820      	ldr	r0, [pc, #128]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800111a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 4-1;
 800111c:	2203      	movs	r2, #3
 800111e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000-1;
 8001122:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001126:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800112a:	2380      	movs	r3, #128	@ 0x80
 800112c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800112e:	f002 fb91 	bl	8003854 <HAL_TIM_Base_Init>
 8001132:	bb30      	cbnz	r0, 8001182 <MX_TIM2_Init+0x8e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001138:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800113a:	a90a      	add	r1, sp, #40	@ 0x28
 800113c:	4816      	ldr	r0, [pc, #88]	@ (8001198 <MX_TIM2_Init+0xa4>)
 800113e:	f002 fce5 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 8001142:	bb00      	cbnz	r0, 8001186 <MX_TIM2_Init+0x92>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001144:	4814      	ldr	r0, [pc, #80]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001146:	f002 fbb1 	bl	80038ac <HAL_TIM_PWM_Init>
 800114a:	b9f0      	cbnz	r0, 800118a <MX_TIM2_Init+0x96>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001152:	a908      	add	r1, sp, #32
 8001154:	4810      	ldr	r0, [pc, #64]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001156:	f002 fe3b 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	b9c0      	cbnz	r0, 800118e <MX_TIM2_Init+0x9a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115c:	2360      	movs	r3, #96	@ 0x60
 800115e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001166:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001168:	2204      	movs	r2, #4
 800116a:	eb0d 0102 	add.w	r1, sp, r2
 800116e:	480a      	ldr	r0, [pc, #40]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001170:	f002 fc52 	bl	8003a18 <HAL_TIM_PWM_ConfigChannel>
 8001174:	b968      	cbnz	r0, 8001192 <MX_TIM2_Init+0x9e>
  HAL_TIM_MspPostInit(&htim2);
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <MX_TIM2_Init+0xa4>)
 8001178:	f000 fdac 	bl	8001cd4 <HAL_TIM_MspPostInit>
}
 800117c:	b00f      	add	sp, #60	@ 0x3c
 800117e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001182:	f7ff ffb5 	bl	80010f0 <Error_Handler>
    Error_Handler();
 8001186:	f7ff ffb3 	bl	80010f0 <Error_Handler>
    Error_Handler();
 800118a:	f7ff ffb1 	bl	80010f0 <Error_Handler>
    Error_Handler();
 800118e:	f7ff ffaf 	bl	80010f0 <Error_Handler>
    Error_Handler();
 8001192:	f7ff ffad 	bl	80010f0 <Error_Handler>
 8001196:	bf00      	nop
 8001198:	2000033c 	.word	0x2000033c

0800119c <MX_TIM1_Init>:
{
 800119c:	b500      	push	{lr}
 800119e:	b08d      	sub	sp, #52	@ 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 80011a0:	2224      	movs	r2, #36	@ 0x24
 80011a2:	2100      	movs	r1, #0
 80011a4:	a803      	add	r0, sp, #12
 80011a6:	f004 feb8 	bl	8005f1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	2300      	movs	r3, #0
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	9302      	str	r3, [sp, #8]
  htim1.Instance = TIM1;
 80011b0:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <MX_TIM1_Init+0x5c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <MX_TIM1_Init+0x60>)
 80011b4:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 80011b6:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80011ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011be:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c2:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011c6:	2303      	movs	r3, #3
 80011c8:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011ca:	2301      	movs	r3, #1
 80011cc:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ce:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011d0:	a903      	add	r1, sp, #12
 80011d2:	f002 fb97 	bl	8003904 <HAL_TIM_Encoder_Init>
 80011d6:	b950      	cbnz	r0, 80011ee <MX_TIM1_Init+0x52>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011de:	a901      	add	r1, sp, #4
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_TIM1_Init+0x5c>)
 80011e2:	f002 fdf5 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	b920      	cbnz	r0, 80011f2 <MX_TIM1_Init+0x56>
}
 80011e8:	b00d      	add	sp, #52	@ 0x34
 80011ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011ee:	f7ff ff7f 	bl	80010f0 <Error_Handler>
    Error_Handler();
 80011f2:	f7ff ff7d 	bl	80010f0 <Error_Handler>
 80011f6:	bf00      	nop
 80011f8:	20000384 	.word	0x20000384
 80011fc:	40012c00 	.word	0x40012c00

08001200 <MX_TIM3_Init>:
{
 8001200:	b500      	push	{lr}
 8001202:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001204:	2300      	movs	r3, #0
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	9303      	str	r3, [sp, #12]
 800120a:	9304      	str	r3, [sp, #16]
 800120c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8001212:	4813      	ldr	r0, [pc, #76]	@ (8001260 <MX_TIM3_Init+0x60>)
 8001214:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_TIM3_Init+0x64>)
 8001216:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 8001218:	2247      	movs	r2, #71	@ 0x47
 800121a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000-1;
 800121e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001222:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001228:	f002 fb14 	bl	8003854 <HAL_TIM_Base_Init>
 800122c:	b990      	cbnz	r0, 8001254 <MX_TIM3_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001232:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001234:	a902      	add	r1, sp, #8
 8001236:	480a      	ldr	r0, [pc, #40]	@ (8001260 <MX_TIM3_Init+0x60>)
 8001238:	f002 fc68 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 800123c:	b960      	cbnz	r0, 8001258 <MX_TIM3_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001244:	4669      	mov	r1, sp
 8001246:	4806      	ldr	r0, [pc, #24]	@ (8001260 <MX_TIM3_Init+0x60>)
 8001248:	f002 fdc2 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	b930      	cbnz	r0, 800125c <MX_TIM3_Init+0x5c>
}
 800124e:	b007      	add	sp, #28
 8001250:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001254:	f7ff ff4c 	bl	80010f0 <Error_Handler>
    Error_Handler();
 8001258:	f7ff ff4a 	bl	80010f0 <Error_Handler>
    Error_Handler();
 800125c:	f7ff ff48 	bl	80010f0 <Error_Handler>
 8001260:	200002f4 	.word	0x200002f4
 8001264:	40000400 	.word	0x40000400

08001268 <MX_TIM4_Init>:
{
 8001268:	b500      	push	{lr}
 800126a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126c:	2300      	movs	r3, #0
 800126e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001272:	930c      	str	r3, [sp, #48]	@ 0x30
 8001274:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	9308      	str	r3, [sp, #32]
 8001278:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	9304      	str	r3, [sp, #16]
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	9306      	str	r3, [sp, #24]
 8001286:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8001288:	481e      	ldr	r0, [pc, #120]	@ (8001304 <MX_TIM4_Init+0x9c>)
 800128a:	4a1f      	ldr	r2, [pc, #124]	@ (8001308 <MX_TIM4_Init+0xa0>)
 800128c:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 800-1;
 800128e:	f240 321f 	movw	r2, #799	@ 0x31f
 8001292:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1800-1;
 8001296:	f240 7207 	movw	r2, #1799	@ 0x707
 800129a:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012a0:	f002 fad8 	bl	8003854 <HAL_TIM_Base_Init>
 80012a4:	bb20      	cbnz	r0, 80012f0 <MX_TIM4_Init+0x88>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012aa:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012ac:	a90a      	add	r1, sp, #40	@ 0x28
 80012ae:	4815      	ldr	r0, [pc, #84]	@ (8001304 <MX_TIM4_Init+0x9c>)
 80012b0:	f002 fc2c 	bl	8003b0c <HAL_TIM_ConfigClockSource>
 80012b4:	b9f0      	cbnz	r0, 80012f4 <MX_TIM4_Init+0x8c>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012b6:	4813      	ldr	r0, [pc, #76]	@ (8001304 <MX_TIM4_Init+0x9c>)
 80012b8:	f002 faf8 	bl	80038ac <HAL_TIM_PWM_Init>
 80012bc:	b9e0      	cbnz	r0, 80012f8 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c4:	a908      	add	r1, sp, #32
 80012c6:	480f      	ldr	r0, [pc, #60]	@ (8001304 <MX_TIM4_Init+0x9c>)
 80012c8:	f002 fd82 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	b9b0      	cbnz	r0, 80012fc <MX_TIM4_Init+0x94>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ce:	2360      	movs	r3, #96	@ 0x60
 80012d0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80012d2:	2200      	movs	r2, #0
 80012d4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012da:	a901      	add	r1, sp, #4
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <MX_TIM4_Init+0x9c>)
 80012de:	f002 fb9b 	bl	8003a18 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	b968      	cbnz	r0, 8001300 <MX_TIM4_Init+0x98>
  HAL_TIM_MspPostInit(&htim4);
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <MX_TIM4_Init+0x9c>)
 80012e6:	f000 fcf5 	bl	8001cd4 <HAL_TIM_MspPostInit>
}
 80012ea:	b00f      	add	sp, #60	@ 0x3c
 80012ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012f0:	f7ff fefe 	bl	80010f0 <Error_Handler>
    Error_Handler();
 80012f4:	f7ff fefc 	bl	80010f0 <Error_Handler>
    Error_Handler();
 80012f8:	f7ff fefa 	bl	80010f0 <Error_Handler>
    Error_Handler();
 80012fc:	f7ff fef8 	bl	80010f0 <Error_Handler>
    Error_Handler();
 8001300:	f7ff fef6 	bl	80010f0 <Error_Handler>
 8001304:	200002ac 	.word	0x200002ac
 8001308:	40000800 	.word	0x40000800

0800130c <SystemClock_Config>:
{
 800130c:	b500      	push	{lr}
 800130e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001310:	2228      	movs	r2, #40	@ 0x28
 8001312:	2100      	movs	r1, #0
 8001314:	eb0d 0002 	add.w	r0, sp, r2
 8001318:	f004 fdff 	bl	8005f1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	2300      	movs	r3, #0
 800131e:	9305      	str	r3, [sp, #20]
 8001320:	9306      	str	r3, [sp, #24]
 8001322:	9307      	str	r3, [sp, #28]
 8001324:	9308      	str	r3, [sp, #32]
 8001326:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	9303      	str	r3, [sp, #12]
 800132e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001330:	2201      	movs	r2, #1
 8001332:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001334:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001338:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2202      	movs	r2, #2
 800133e:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001340:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001342:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001346:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	a80a      	add	r0, sp, #40	@ 0x28
 800134a:	f001 fd33 	bl	8002db4 <HAL_RCC_OscConfig>
 800134e:	b9c0      	cbnz	r0, 8001382 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001350:	230f      	movs	r3, #15
 8001352:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001354:	2102      	movs	r1, #2
 8001356:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001360:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001362:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001364:	a805      	add	r0, sp, #20
 8001366:	f001 ff57 	bl	8003218 <HAL_RCC_ClockConfig>
 800136a:	b960      	cbnz	r0, 8001386 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800136c:	2310      	movs	r3, #16
 800136e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001370:	2300      	movs	r3, #0
 8001372:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	a801      	add	r0, sp, #4
 8001376:	f002 f805 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	b930      	cbnz	r0, 800138a <SystemClock_Config+0x7e>
}
 800137c:	b015      	add	sp, #84	@ 0x54
 800137e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001382:	f7ff feb5 	bl	80010f0 <Error_Handler>
    Error_Handler();
 8001386:	f7ff feb3 	bl	80010f0 <Error_Handler>
    Error_Handler();
 800138a:	f7ff feb1 	bl	80010f0 <Error_Handler>
	...

08001390 <main>:
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
  HAL_Init();
 8001394:	f000 fa5e 	bl	8001854 <HAL_Init>
  SystemClock_Config();
 8001398:	f7ff ffb8 	bl	800130c <SystemClock_Config>
  MX_GPIO_Init();
 800139c:	f7ff fe46 	bl	800102c <MX_GPIO_Init>
  MX_TIM2_Init();
 80013a0:	f7ff fea8 	bl	80010f4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013a4:	f7ff fefa 	bl	800119c <MX_TIM1_Init>
  MX_TIM3_Init();
 80013a8:	f7ff ff2a 	bl	8001200 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013ac:	f7ff ff5c 	bl	8001268 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80013b0:	f003 fd0c 	bl	8004dcc <MX_USB_DEVICE_Init>
  servo_baseInit(&servo1, Double, 895.8775050487, 59, 0);
 80013b4:	4c2b      	ldr	r4, [pc, #172]	@ (8001464 <main+0xd4>)
 80013b6:	2600      	movs	r6, #0
 80013b8:	9600      	str	r6, [sp, #0]
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <main+0xd8>)
 80013bc:	4a2b      	ldr	r2, [pc, #172]	@ (800146c <main+0xdc>)
 80013be:	2101      	movs	r1, #1
 80013c0:	4620      	mov	r0, r4
 80013c2:	f000 f92b 	bl	800161c <servo_baseInit>
  servo_encoderInit(&servo1, &htim1, 1999);
 80013c6:	4f2a      	ldr	r7, [pc, #168]	@ (8001470 <main+0xe0>)
 80013c8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80013cc:	4639      	mov	r1, r7
 80013ce:	4620      	mov	r0, r4
 80013d0:	f000 f940 	bl	8001654 <servo_encoderInit>
  servo_driverInit(&servo1, &htim2, 2, DIR1_GPIO_Port, DIR1_Pin, DIR2_GPIO_Port, DIR2_Pin, 0, 999);
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <main+0xe4>)
 80013d6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8001478 <main+0xe8>
 80013da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013de:	9204      	str	r2, [sp, #16]
 80013e0:	9603      	str	r6, [sp, #12]
 80013e2:	2210      	movs	r2, #16
 80013e4:	9202      	str	r2, [sp, #8]
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2208      	movs	r2, #8
 80013ea:	9200      	str	r2, [sp, #0]
 80013ec:	2202      	movs	r2, #2
 80013ee:	4641      	mov	r1, r8
 80013f0:	4620      	mov	r0, r4
 80013f2:	f000 f932 	bl	800165a <servo_driverInit>
  servo_positionInit(&servo1, 3, 0, 0, 0.001, 0);
 80013f6:	2500      	movs	r5, #0
 80013f8:	9501      	str	r5, [sp, #4]
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <main+0xec>)
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	462b      	mov	r3, r5
 8001400:	462a      	mov	r2, r5
 8001402:	491f      	ldr	r1, [pc, #124]	@ (8001480 <main+0xf0>)
 8001404:	4620      	mov	r0, r4
 8001406:	f000 f967 	bl	80016d8 <servo_positionInit>
  servo_velocityInit(&servo1, 150, 1500, 0, 0.004, 0);
 800140a:	9501      	str	r5, [sp, #4]
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <main+0xf4>)
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	462b      	mov	r3, r5
 8001412:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <main+0xf8>)
 8001414:	491d      	ldr	r1, [pc, #116]	@ (800148c <main+0xfc>)
 8001416:	4620      	mov	r0, r4
 8001418:	f000 f966 	bl	80016e8 <servo_velocityInit>
  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f06f 0201 	mvn.w	r2, #1
 8001422:	611a      	str	r2, [r3, #16]
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001424:	213c      	movs	r1, #60	@ 0x3c
 8001426:	4638      	mov	r0, r7
 8001428:	f002 fc6c 	bl	8003d04 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // �?нициализация PWM
 800142c:	2104      	movs	r1, #4
 800142e:	4640      	mov	r0, r8
 8001430:	f002 fbfa 	bl	8003c28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // �?нициализация PWM
 8001434:	4c16      	ldr	r4, [pc, #88]	@ (8001490 <main+0x100>)
 8001436:	4631      	mov	r1, r6
 8001438:	4620      	mov	r0, r4
 800143a:	f002 fbf5 	bl	8003c28 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800143e:	4815      	ldr	r0, [pc, #84]	@ (8001494 <main+0x104>)
 8001440:	f002 f8d6 	bl	80035f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001444:	4620      	mov	r0, r4
 8001446:	f002 f8d3 	bl	80035f0 <HAL_TIM_Base_Start_IT>
    servo_controlVelocity(&servo1, VELvalue); // 0 - 15
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <main+0x108>)
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <main+0xd4>)
 8001450:	f000 f9b5 	bl	80017be <servo_controlVelocity>
    htim4.Instance->CCR1 = PWM_servo + 27;    // 0 - 180
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <main+0x100>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <main+0x10c>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	331b      	adds	r3, #27
 800145e:	6353      	str	r3, [r2, #52]	@ 0x34
  while (1)
 8001460:	e7f3      	b.n	800144a <main+0xba>
 8001462:	bf00      	nop
 8001464:	20000198 	.word	0x20000198
 8001468:	426c0000 	.word	0x426c0000
 800146c:	445ff829 	.word	0x445ff829
 8001470:	20000384 	.word	0x20000384
 8001474:	40010800 	.word	0x40010800
 8001478:	2000033c 	.word	0x2000033c
 800147c:	3a83126f 	.word	0x3a83126f
 8001480:	40400000 	.word	0x40400000
 8001484:	3b83126f 	.word	0x3b83126f
 8001488:	44bb8000 	.word	0x44bb8000
 800148c:	43160000 	.word	0x43160000
 8001490:	200002ac 	.word	0x200002ac
 8001494:	200002f4 	.word	0x200002f4
 8001498:	200002a8 	.word	0x200002a8
 800149c:	20000000 	.word	0x20000000

080014a0 <pid_reset>:
	pid->previousError = pid->error;
}

// Resets all the components and previous error
void pid_reset(pid_t *pid) {
	pid->P = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	6183      	str	r3, [r0, #24]
	pid->I = 0;
 80014a4:	61c3      	str	r3, [r0, #28]
	pid->D = 0;
 80014a6:	6203      	str	r3, [r0, #32]
	pid->previousError = 0;
 80014a8:	6383      	str	r3, [r0, #56]	@ 0x38
	pid->output = 0;
 80014aa:	6343      	str	r3, [r0, #52]	@ 0x34
}
 80014ac:	4770      	bx	lr

080014ae <pid_calculate>:
void pid_calculate(pid_t *pid, float setpoint, float feedback) {
 80014ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014b2:	4604      	mov	r4, r0
 80014b4:	4608      	mov	r0, r1
	pid->error = setpoint - feedback;
 80014b6:	4611      	mov	r1, r2
 80014b8:	f7ff fa4c 	bl	8000954 <__aeabi_fsub>
 80014bc:	4605      	mov	r5, r0
 80014be:	6020      	str	r0, [r4, #0]
	if ((pid->error > -(pid->toleranceBand)) && (pid->error < pid->toleranceBand)) {
 80014c0:	6966      	ldr	r6, [r4, #20]
 80014c2:	f106 4100 	add.w	r1, r6, #2147483648	@ 0x80000000
 80014c6:	f7ff fd0b 	bl	8000ee0 <__aeabi_fcmpgt>
 80014ca:	b128      	cbz	r0, 80014d8 <pid_calculate+0x2a>
 80014cc:	4631      	mov	r1, r6
 80014ce:	4628      	mov	r0, r5
 80014d0:	f7ff fce8 	bl	8000ea4 <__aeabi_fcmplt>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d149      	bne.n	800156c <pid_calculate+0xbe>
	pid->P = pid->error * pid->kp;
 80014d8:	6825      	ldr	r5, [r4, #0]
 80014da:	6861      	ldr	r1, [r4, #4]
 80014dc:	4628      	mov	r0, r5
 80014de:	f7ff fb43 	bl	8000b68 <__aeabi_fmul>
 80014e2:	4607      	mov	r7, r0
 80014e4:	61a0      	str	r0, [r4, #24]
	pid->I += (pid->output - pid->rawOutput) * pid->kt + pid->error * pid->dt * pid->ki;
 80014e6:	f8d4 801c 	ldr.w	r8, [r4, #28]
 80014ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80014ec:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80014ee:	f7ff fa31 	bl	8000954 <__aeabi_fsub>
 80014f2:	6921      	ldr	r1, [r4, #16]
 80014f4:	f7ff fb38 	bl	8000b68 <__aeabi_fmul>
 80014f8:	4606      	mov	r6, r0
 80014fa:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 80014fe:	4649      	mov	r1, r9
 8001500:	4628      	mov	r0, r5
 8001502:	f7ff fb31 	bl	8000b68 <__aeabi_fmul>
 8001506:	68a1      	ldr	r1, [r4, #8]
 8001508:	f7ff fb2e 	bl	8000b68 <__aeabi_fmul>
 800150c:	4601      	mov	r1, r0
 800150e:	4630      	mov	r0, r6
 8001510:	f7ff fa22 	bl	8000958 <__addsf3>
 8001514:	4601      	mov	r1, r0
 8001516:	4640      	mov	r0, r8
 8001518:	f7ff fa1e 	bl	8000958 <__addsf3>
 800151c:	4680      	mov	r8, r0
 800151e:	61e0      	str	r0, [r4, #28]
	pid->D = ((pid->error - pid->previousError) * pid->kd) / pid->dt;
 8001520:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001522:	4628      	mov	r0, r5
 8001524:	f7ff fa16 	bl	8000954 <__aeabi_fsub>
 8001528:	68e1      	ldr	r1, [r4, #12]
 800152a:	f7ff fb1d 	bl	8000b68 <__aeabi_fmul>
 800152e:	4649      	mov	r1, r9
 8001530:	f7ff fbce 	bl	8000cd0 <__aeabi_fdiv>
 8001534:	4606      	mov	r6, r0
 8001536:	6220      	str	r0, [r4, #32]
	pid->rawOutput = pid->P + pid->I + pid->D;
 8001538:	4641      	mov	r1, r8
 800153a:	4638      	mov	r0, r7
 800153c:	f7ff fa0c 	bl	8000958 <__addsf3>
 8001540:	4601      	mov	r1, r0
 8001542:	4630      	mov	r0, r6
 8001544:	f7ff fa08 	bl	8000958 <__addsf3>
 8001548:	4606      	mov	r6, r0
 800154a:	6320      	str	r0, [r4, #48]	@ 0x30
	pid->output = constrain(pid->rawOutput, pid->lowerLimit, pid->upperLimit);
 800154c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800154e:	4639      	mov	r1, r7
 8001550:	f7ff fca8 	bl	8000ea4 <__aeabi_fcmplt>
 8001554:	b930      	cbnz	r0, 8001564 <pid_calculate+0xb6>
 8001556:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8001558:	4639      	mov	r1, r7
 800155a:	4630      	mov	r0, r6
 800155c:	f7ff fcc0 	bl	8000ee0 <__aeabi_fcmpgt>
 8001560:	b900      	cbnz	r0, 8001564 <pid_calculate+0xb6>
 8001562:	4637      	mov	r7, r6
 8001564:	6367      	str	r7, [r4, #52]	@ 0x34
	pid->previousError = pid->error;
 8001566:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8001568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pid->error = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	6023      	str	r3, [r4, #0]
		pid_reset(pid);
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff ff95 	bl	80014a0 <pid_reset>
 8001576:	e7af      	b.n	80014d8 <pid_calculate+0x2a>

08001578 <pid_getOutput>:

float pid_getOutput(pid_t *pid) {
	return pid->output;
}
 8001578:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800157a:	4770      	bx	lr

0800157c <pwm_setSpeed>:
void pwm_dutyLimits(pwmControl_t *driver, uint16_t minDuty, uint16_t maxDuty) {
	driver->minDuty = minDuty;
	driver->maxDuty = maxDuty;
}

void pwm_setSpeed(pwmControl_t *driver, int32_t duty) {
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4604      	mov	r4, r0
	if (!duty) {
 8001580:	b301      	cbz	r1, 80015c4 <pwm_setSpeed+0x48>
 8001582:	460a      	mov	r2, r1
		driver->_duty = 0;
		HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
		HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 0);
	} else {
		driver->_duty = constrain(ABS(duty), driver->minDuty, driver->maxDuty);
 8001584:	ea81 71e1 	eor.w	r1, r1, r1, asr #31
 8001588:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800158c:	8b43      	ldrh	r3, [r0, #26]
 800158e:	4299      	cmp	r1, r3
 8001590:	db03      	blt.n	800159a <pwm_setSpeed+0x1e>
 8001592:	8b03      	ldrh	r3, [r0, #24]
 8001594:	428b      	cmp	r3, r1
 8001596:	bfa8      	it	ge
 8001598:	460b      	movge	r3, r1
 800159a:	61e3      	str	r3, [r4, #28]
		if (duty > 0) {
 800159c:	2a00      	cmp	r2, #0
 800159e:	dd1e      	ble.n	80015de <pwm_setSpeed+0x62>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	8921      	ldrh	r1, [r4, #8]
 80015a4:	68e0      	ldr	r0, [r4, #12]
 80015a6:	f000 faff 	bl	8001ba8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	8a21      	ldrh	r1, [r4, #16]
 80015ae:	6960      	ldr	r0, [r4, #20]
 80015b0:	f000 fafa 	bl	8001ba8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
			HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 1);
		}
	}

	switch (driver->timerChannel) {
 80015b4:	7923      	ldrb	r3, [r4, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d81f      	bhi.n	80015fc <pwm_setSpeed+0x80>
 80015bc:	e8df f003 	tbb	[pc, r3]
 80015c0:	29241f1a 	.word	0x29241f1a
		driver->_duty = 0;
 80015c4:	2500      	movs	r5, #0
 80015c6:	61c5      	str	r5, [r0, #28]
		HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 80015c8:	462a      	mov	r2, r5
 80015ca:	8901      	ldrh	r1, [r0, #8]
 80015cc:	68c0      	ldr	r0, [r0, #12]
 80015ce:	f000 faeb 	bl	8001ba8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 0);
 80015d2:	462a      	mov	r2, r5
 80015d4:	8a21      	ldrh	r1, [r4, #16]
 80015d6:	6960      	ldr	r0, [r4, #20]
 80015d8:	f000 fae6 	bl	8001ba8 <HAL_GPIO_WritePin>
 80015dc:	e7ea      	b.n	80015b4 <pwm_setSpeed+0x38>
			HAL_GPIO_WritePin(driver->dir1_Port, driver->dir1_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	8921      	ldrh	r1, [r4, #8]
 80015e2:	68e0      	ldr	r0, [r4, #12]
 80015e4:	f000 fae0 	bl	8001ba8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(driver->dir2_Port, driver->dir2_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	8a21      	ldrh	r1, [r4, #16]
 80015ec:	6960      	ldr	r0, [r4, #20]
 80015ee:	f000 fadb 	bl	8001ba8 <HAL_GPIO_WritePin>
 80015f2:	e7df      	b.n	80015b4 <pwm_setSpeed+0x38>
	case 1:
		driver->htim->Instance->CCR1 = driver->_duty;
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	69e2      	ldr	r2, [r4, #28]
 80015fa:	635a      	str	r2, [r3, #52]	@ 0x34
		driver->htim->Instance->CCR4 = driver->_duty;
		break;
	default:
		break;
	}
}
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
		driver->htim->Instance->CCR2 = driver->_duty;
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	69e2      	ldr	r2, [r4, #28]
 8001604:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001606:	e7f9      	b.n	80015fc <pwm_setSpeed+0x80>
		driver->htim->Instance->CCR3 = driver->_duty;
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69e2      	ldr	r2, [r4, #28]
 800160e:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8001610:	e7f4      	b.n	80015fc <pwm_setSpeed+0x80>
		driver->htim->Instance->CCR4 = driver->_duty;
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69e2      	ldr	r2, [r4, #28]
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800161a:	e7ef      	b.n	80015fc <pwm_setSpeed+0x80>

0800161c <servo_baseInit>:
 3. Speed of motor before gearbox in rad/s

 4. Gear ratio of reducer (e.g. if reducer is 1:21.3, pass 21.3)
 */
void servo_baseInit(servocontrol_t *servo, enum loops servoLoops, float motorSpeed, float gearRatio,
		uint8_t reverse) {
 800161c:	b538      	push	{r3, r4, r5, lr}
 800161e:	4604      	mov	r4, r0
 8001620:	460d      	mov	r5, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f89d 3010 	ldrb.w	r3, [sp, #16]
	servo->controllerLoops = servoLoops;
 800162a:	f884 5109 	strb.w	r5, [r4, #265]	@ 0x109
	servo->encoder.gearRatio = gearRatio;
 800162e:	61e1      	str	r1, [r4, #28]
	if (reverse) {
 8001630:	b163      	cbz	r3, 800164c <servo_baseInit+0x30>
		servo->reverseFlag = -1;
 8001632:	23ff      	movs	r3, #255	@ 0xff
 8001634:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
	}
	else{
		servo->reverseFlag = 1;
	}
	servo->maxShaftSpeed = motorSpeed / gearRatio;
 8001638:	f7ff fb4a 	bl	8000cd0 <__aeabi_fdiv>
 800163c:	f8c4 010c 	str.w	r0, [r4, #268]	@ 0x10c

	if (servoLoops != Single) {
 8001640:	b11d      	cbz	r5, 800164a <servo_baseInit+0x2e>
		servo->pid_position.lowerLimit = -servo->maxShaftSpeed;
 8001642:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8001646:	6523      	str	r3, [r4, #80]	@ 0x50
		servo->pid_position.upperLimit = servo->maxShaftSpeed;
 8001648:	64e0      	str	r0, [r4, #76]	@ 0x4c
	}
}
 800164a:	bd38      	pop	{r3, r4, r5, pc}
		servo->reverseFlag = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	f884 30f8 	strb.w	r3, [r4, #248]	@ 0xf8
 8001652:	e7f1      	b.n	8001638 <servo_baseInit+0x1c>

08001654 <servo_encoderInit>:

 htim - pointer to handler of timer in encoder mode.
 CPR - counts per revolution. If you are using both channels and rising/falling edges of encoder, CPR=PPR*4.
 */
void servo_encoderInit(servocontrol_t *servo, TIM_HandleTypeDef *htim, uint16_t CPR) {
	servo->encoder.htim = htim;
 8001654:	6001      	str	r1, [r0, #0]
	servo->encoder.countsPerRevolution = CPR;
 8001656:	8082      	strh	r2, [r0, #4]
}
 8001658:	4770      	bx	lr

0800165a <servo_driverInit>:

 GPIOs are needed to control direction with a dc-motor driver
 */
void servo_driverInit(servocontrol_t *servo, TIM_HandleTypeDef *htim, uint8_t timerChannel,
		GPIO_TypeDef *dir1_Port, uint32_t dir1_Pin, GPIO_TypeDef *dir2_Port, uint32_t dir2_Pin,
		uint16_t minDuty, uint16_t maxDuty) {
 800165a:	b538      	push	{r3, r4, r5, lr}
 800165c:	4604      	mov	r4, r0
 800165e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	servo->driver.htim = htim;
 8001662:	f8c0 10d8 	str.w	r1, [r0, #216]	@ 0xd8
	servo->driver.timerChannel = timerChannel;
 8001666:	f880 20dc 	strb.w	r2, [r0, #220]	@ 0xdc
	servo->driver.dir1_Port = dir1_Port;
 800166a:	f8c0 30e4 	str.w	r3, [r0, #228]	@ 0xe4
	servo->driver.dir1_Pin = dir1_Pin;
 800166e:	9b04      	ldr	r3, [sp, #16]
 8001670:	f8c0 30e0 	str.w	r3, [r0, #224]	@ 0xe0
	servo->driver.dir2_Port = dir2_Port;
 8001674:	9b05      	ldr	r3, [sp, #20]
 8001676:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
	servo->driver.dir2_Pin = dir2_Pin;
 800167a:	9b06      	ldr	r3, [sp, #24]
 800167c:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8

	servo->driver.minDuty = minDuty;
 8001680:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8001684:	f8a0 30f2 	strh.w	r3, [r0, #242]	@ 0xf2
	servo->driver.maxDuty = maxDuty;
 8001688:	f8a0 50f0 	strh.w	r5, [r0, #240]	@ 0xf0

	switch (servo->controllerLoops) {
 800168c:	f890 3109 	ldrb.w	r3, [r0, #265]	@ 0x109
 8001690:	2b01      	cmp	r3, #1
 8001692:	d00b      	beq.n	80016ac <servo_driverInit+0x52>
 8001694:	2b02      	cmp	r3, #2
 8001696:	d014      	beq.n	80016c2 <servo_driverInit+0x68>
 8001698:	b93b      	cbnz	r3, 80016aa <servo_driverInit+0x50>
	case Single:
		servo->pid_position.lowerLimit = -maxDuty;
 800169a:	4268      	negs	r0, r5
 800169c:	f7ff fa10 	bl	8000ac0 <__aeabi_i2f>
 80016a0:	6520      	str	r0, [r4, #80]	@ 0x50
		servo->pid_position.upperLimit = maxDuty;
 80016a2:	4628      	mov	r0, r5
 80016a4:	f7ff fa08 	bl	8000ab8 <__aeabi_ui2f>
 80016a8:	64e0      	str	r0, [r4, #76]	@ 0x4c
		servo->pid_current.upperLimit = maxDuty;
		break;
	default:
		break;
	}
}
 80016aa:	bd38      	pop	{r3, r4, r5, pc}
		servo->pid_velocity.lowerLimit = -maxDuty;
 80016ac:	4268      	negs	r0, r5
 80016ae:	f7ff fa07 	bl	8000ac0 <__aeabi_i2f>
 80016b2:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
		servo->pid_velocity.upperLimit = maxDuty;
 80016b6:	4628      	mov	r0, r5
 80016b8:	f7ff f9fe 	bl	8000ab8 <__aeabi_ui2f>
 80016bc:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
		break;
 80016c0:	e7f3      	b.n	80016aa <servo_driverInit+0x50>
		servo->pid_current.lowerLimit = -maxDuty;
 80016c2:	4268      	negs	r0, r5
 80016c4:	f7ff f9fc 	bl	8000ac0 <__aeabi_i2f>
 80016c8:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
		servo->pid_current.upperLimit = maxDuty;
 80016cc:	4628      	mov	r0, r5
 80016ce:	f7ff f9f3 	bl	8000ab8 <__aeabi_ui2f>
 80016d2:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
}
 80016d6:	e7e8      	b.n	80016aa <servo_driverInit+0x50>

080016d8 <servo_positionInit>:

// Initialization of controller loops with PID gains and period
void servo_positionInit(servocontrol_t *servo, float kp, float ki, float kd, float dt, float kt) {
	servo->pid_position.kp = kp;
 80016d8:	6281      	str	r1, [r0, #40]	@ 0x28
	servo->pid_position.ki = ki;
 80016da:	62c2      	str	r2, [r0, #44]	@ 0x2c
	servo->pid_position.kd = kd;
 80016dc:	6303      	str	r3, [r0, #48]	@ 0x30
	servo->pid_position.dt = dt;
 80016de:	9b00      	ldr	r3, [sp, #0]
 80016e0:	6483      	str	r3, [r0, #72]	@ 0x48
	servo->pid_position.kt = kt;
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	6343      	str	r3, [r0, #52]	@ 0x34
}
 80016e6:	4770      	bx	lr

080016e8 <servo_velocityInit>:
void servo_velocityInit(servocontrol_t *servo, float kp, float ki, float kd, float dt, float kt) {
 80016e8:	f8dd c000 	ldr.w	ip, [sp]
	servo->pid_velocity.kp = kp;
 80016ec:	6641      	str	r1, [r0, #100]	@ 0x64
	servo->pid_velocity.ki = ki;
 80016ee:	6682      	str	r2, [r0, #104]	@ 0x68
	servo->pid_velocity.kd = kd;
 80016f0:	66c3      	str	r3, [r0, #108]	@ 0x6c
	servo->pid_velocity.dt = dt;
 80016f2:	f8c0 c084 	str.w	ip, [r0, #132]	@ 0x84
	servo->pid_velocity.kt = kt;
 80016f6:	9b01      	ldr	r3, [sp, #4]
 80016f8:	6703      	str	r3, [r0, #112]	@ 0x70
	servo->encoder.dt = dt;
 80016fa:	f8c0 c018 	str.w	ip, [r0, #24]
}
 80016fe:	4770      	bx	lr

08001700 <servo_positionLoop>:
 Position controller loop. Contains PID controller and algorithm which decides whether output should be passed
 to velocity loop (if system is Double/Triple-loop) or used as pwm duty cycle (Single-loop).

 Must be called with specified period for position controller.
 */
void servo_positionLoop(servocontrol_t *servo) {
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	4604      	mov	r4, r0
	encoder_updatePosition(&servo->encoder);
 8001704:	f7ff fc3c 	bl	8000f80 <encoder_updatePosition>

	switch (servo->currentMode) {
 8001708:	f894 310a 	ldrb.w	r3, [r4, #266]	@ 0x10a
 800170c:	2b01      	cmp	r3, #1
 800170e:	d007      	beq.n	8001720 <servo_positionLoop+0x20>
			servo->velocitySetpoint = pid_getOutput(&servo->pid_position);
		}
		break;
	}
	default: {
		pid_reset(&servo->pid_position);
 8001710:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001714:	f7ff fec4 	bl	80014a0 <pid_reset>
		servo->positionSetpoint = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
		break;
	}
	}
}
 800171e:	bd70      	pop	{r4, r5, r6, pc}
		pid_calculate(&servo->pid_position, servo->positionSetpoint, encoder_getAngle(&servo->encoder));
 8001720:	f104 0524 	add.w	r5, r4, #36	@ 0x24
 8001724:	f8d4 60fc 	ldr.w	r6, [r4, #252]	@ 0xfc
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff fc7a 	bl	8001022 <encoder_getAngle>
 800172e:	4602      	mov	r2, r0
 8001730:	4631      	mov	r1, r6
 8001732:	4628      	mov	r0, r5
 8001734:	f7ff febb 	bl	80014ae <pid_calculate>
		if (servo->controllerLoops == Single) {
 8001738:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 800173c:	b953      	cbnz	r3, 8001754 <servo_positionLoop+0x54>
			pwm_setSpeed(&servo->driver, pid_getOutput(&servo->pid_position));
 800173e:	4628      	mov	r0, r5
 8001740:	f7ff ff1a 	bl	8001578 <pid_getOutput>
 8001744:	f7ff fbd6 	bl	8000ef4 <__aeabi_f2iz>
 8001748:	4601      	mov	r1, r0
 800174a:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 800174e:	f7ff ff15 	bl	800157c <pwm_setSpeed>
 8001752:	e7e4      	b.n	800171e <servo_positionLoop+0x1e>
			servo->velocitySetpoint = pid_getOutput(&servo->pid_position);
 8001754:	4628      	mov	r0, r5
 8001756:	f7ff ff0f 	bl	8001578 <pid_getOutput>
 800175a:	f8c4 0100 	str.w	r0, [r4, #256]	@ 0x100
 800175e:	e7de      	b.n	800171e <servo_positionLoop+0x1e>

08001760 <servo_velocityLoop>:
 to current loop (if system is Triple-loop) or used as pwm duty cycle (Double-loop).

 Must be called with specified period for velocity controller.
 If controller is single-loop, should not be used.
 */
void servo_velocityLoop(servocontrol_t *servo) {
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	4604      	mov	r4, r0
	encoder_updateVelocity(&servo->encoder);
 8001764:	f7ff fc50 	bl	8001008 <encoder_updateVelocity>
	pid_calculate(&servo->pid_velocity, servo->velocitySetpoint, encoder_getVelocity(&servo->encoder));
 8001768:	f104 0560 	add.w	r5, r4, #96	@ 0x60
 800176c:	f8d4 6100 	ldr.w	r6, [r4, #256]	@ 0x100
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff fc58 	bl	8001026 <encoder_getVelocity>
 8001776:	4602      	mov	r2, r0
 8001778:	4631      	mov	r1, r6
 800177a:	4628      	mov	r0, r5
 800177c:	f7ff fe97 	bl	80014ae <pid_calculate>
	switch (servo->controllerLoops) {
 8001780:	f894 3109 	ldrb.w	r3, [r4, #265]	@ 0x109
 8001784:	2b01      	cmp	r3, #1
 8001786:	d009      	beq.n	800179c <servo_velocityLoop+0x3c>
 8001788:	2b02      	cmp	r3, #2
 800178a:	d012      	beq.n	80017b2 <servo_velocityLoop+0x52>
 800178c:	b92b      	cbnz	r3, 800179a <servo_velocityLoop+0x3a>
	case Single:
		pid_reset(&servo->pid_velocity);
 800178e:	4628      	mov	r0, r5
 8001790:	f7ff fe86 	bl	80014a0 <pid_reset>
		servo->velocitySetpoint = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
		break;
	case Triple:
		servo->currentSetpoint = pid_getOutput(&servo->pid_velocity);
		break;
	}
}
 800179a:	bd70      	pop	{r4, r5, r6, pc}
		pwm_setSpeed(&servo->driver, pid_getOutput(&servo->pid_velocity));
 800179c:	4628      	mov	r0, r5
 800179e:	f7ff feeb 	bl	8001578 <pid_getOutput>
 80017a2:	f7ff fba7 	bl	8000ef4 <__aeabi_f2iz>
 80017a6:	4601      	mov	r1, r0
 80017a8:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 80017ac:	f7ff fee6 	bl	800157c <pwm_setSpeed>
		break;
 80017b0:	e7f3      	b.n	800179a <servo_velocityLoop+0x3a>
		servo->currentSetpoint = pid_getOutput(&servo->pid_velocity);
 80017b2:	4628      	mov	r0, r5
 80017b4:	f7ff fee0 	bl	8001578 <pid_getOutput>
 80017b8:	f8c4 0104 	str.w	r0, [r4, #260]	@ 0x104
}
 80017bc:	e7ed      	b.n	800179a <servo_velocityLoop+0x3a>

080017be <servo_controlVelocity>:
void servo_controlPosition(servocontrol_t *servo, float setpoint) {
	servo->currentMode = Position;
	servo->positionSetpoint = setpoint*servo->reverseFlag;
}

void servo_controlVelocity(servocontrol_t *servo, float setpoint) {
 80017be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (servo->controllerLoops != Single) {
 80017c0:	f890 3109 	ldrb.w	r3, [r0, #265]	@ 0x109
 80017c4:	b1e3      	cbz	r3, 8001800 <servo_controlVelocity+0x42>
 80017c6:	4604      	mov	r4, r0
 80017c8:	460d      	mov	r5, r1
		servo->currentMode = Velocity;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f880 310a 	strb.w	r3, [r0, #266]	@ 0x10a
		servo->velocitySetpoint = constrain(setpoint*servo->reverseFlag, -servo->maxShaftSpeed, servo->maxShaftSpeed);
 80017d0:	f990 00f8 	ldrsb.w	r0, [r0, #248]	@ 0xf8
 80017d4:	f7ff f974 	bl	8000ac0 <__aeabi_i2f>
 80017d8:	4629      	mov	r1, r5
 80017da:	f7ff f9c5 	bl	8000b68 <__aeabi_fmul>
 80017de:	4605      	mov	r5, r0
 80017e0:	f8d4 710c 	ldr.w	r7, [r4, #268]	@ 0x10c
 80017e4:	f107 4600 	add.w	r6, r7, #2147483648	@ 0x80000000
 80017e8:	4631      	mov	r1, r6
 80017ea:	f7ff fb5b 	bl	8000ea4 <__aeabi_fcmplt>
 80017ee:	b928      	cbnz	r0, 80017fc <servo_controlVelocity+0x3e>
 80017f0:	4639      	mov	r1, r7
 80017f2:	4628      	mov	r0, r5
 80017f4:	f7ff fb74 	bl	8000ee0 <__aeabi_fcmpgt>
 80017f8:	b118      	cbz	r0, 8001802 <servo_controlVelocity+0x44>
 80017fa:	463e      	mov	r6, r7
 80017fc:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
	}
}
 8001800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		servo->velocitySetpoint = constrain(setpoint*servo->reverseFlag, -servo->maxShaftSpeed, servo->maxShaftSpeed);
 8001802:	462e      	mov	r6, r5
 8001804:	e7fa      	b.n	80017fc <servo_controlVelocity+0x3e>
	...

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b510      	push	{r4, lr}
 800180a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_InitTick+0x40>)
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001814:	fbb3 f3f2 	udiv	r3, r3, r2
 8001818:	4a0c      	ldr	r2, [pc, #48]	@ (800184c <HAL_InitTick+0x44>)
 800181a:	6810      	ldr	r0, [r2, #0]
 800181c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001820:	f000 f8a0 	bl	8001964 <HAL_SYSTICK_Config>
 8001824:	b968      	cbnz	r0, 8001842 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	2c0f      	cmp	r4, #15
 8001828:	d901      	bls.n	800182e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e00a      	b.n	8001844 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182e:	2200      	movs	r2, #0
 8001830:	4621      	mov	r1, r4
 8001832:	f04f 30ff 	mov.w	r0, #4294967295
 8001836:	f000 f877 	bl	8001928 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183a:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_InitTick+0x48>)
 800183c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001842:	2001      	movs	r0, #1
}
 8001844:	bd10      	pop	{r4, pc}
 8001846:	bf00      	nop
 8001848:	20000002 	.word	0x20000002
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_Init>:
{
 8001854:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001856:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_Init+0x20>)
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 f84f 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	200f      	movs	r0, #15
 8001868:	f7ff ffce 	bl	8001808 <HAL_InitTick>
  HAL_MspInit();
 800186c:	f000 f9a2 	bl	8001bb4 <HAL_MspInit>
}
 8001870:	2000      	movs	r0, #0
 8001872:	bd08      	pop	{r3, pc}
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001878:	4a03      	ldr	r2, [pc, #12]	@ (8001888 <HAL_IncTick+0x10>)
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <HAL_IncTick+0x14>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	440b      	add	r3, r1
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200003cc 	.word	0x200003cc
 800188c:	20000002 	.word	0x20000002

08001890 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001890:	4b01      	ldr	r3, [pc, #4]	@ (8001898 <HAL_GetTick+0x8>)
 8001892:	6818      	ldr	r0, [r3, #0]
}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200003cc 	.word	0x200003cc

0800189c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800189c:	2800      	cmp	r0, #0
 800189e:	db08      	blt.n	80018b2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	0109      	lsls	r1, r1, #4
 80018a2:	b2c9      	uxtb	r1, r1
 80018a4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80018a8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80018ac:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80018b0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	f000 000f 	and.w	r0, r0, #15
 80018b6:	0109      	lsls	r1, r1, #4
 80018b8:	b2c9      	uxtb	r1, r1
 80018ba:	4b01      	ldr	r3, [pc, #4]	@ (80018c0 <__NVIC_SetPriority+0x24>)
 80018bc:	5419      	strb	r1, [r3, r0]
  }
}
 80018be:	4770      	bx	lr
 80018c0:	e000ed14 	.word	0xe000ed14

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ca:	f1c0 0c07 	rsb	ip, r0, #7
 80018ce:	f1bc 0f04 	cmp.w	ip, #4
 80018d2:	bf28      	it	cs
 80018d4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d8:	1d03      	adds	r3, r0, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d90f      	bls.n	80018fe <NVIC_EncodePriority+0x3a>
 80018de:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 3eff 	mov.w	lr, #4294967295
 80018e4:	fa0e f00c 	lsl.w	r0, lr, ip
 80018e8:	ea21 0100 	bic.w	r1, r1, r0
 80018ec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ee:	fa0e fe03 	lsl.w	lr, lr, r3
 80018f2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80018f6:	ea41 0002 	orr.w	r0, r1, r2
 80018fa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	2300      	movs	r3, #0
 8001900:	e7ee      	b.n	80018e0 <NVIC_EncodePriority+0x1c>
	...

08001904 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001906:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001908:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001910:	0200      	lsls	r0, r0, #8
 8001912:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001916:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001920:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001928:	b510      	push	{r4, lr}
 800192a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_NVIC_SetPriority+0x1c>)
 800192e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001934:	f7ff ffc6 	bl	80018c4 <NVIC_EncodePriority>
 8001938:	4601      	mov	r1, r0
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff ffae 	bl	800189c <__NVIC_SetPriority>
}
 8001940:	bd10      	pop	{r4, pc}
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001948:	2800      	cmp	r0, #0
 800194a:	db07      	blt.n	800195c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194c:	f000 021f 	and.w	r2, r0, #31
 8001950:	0940      	lsrs	r0, r0, #5
 8001952:	2301      	movs	r3, #1
 8001954:	4093      	lsls	r3, r2
 8001956:	4a02      	ldr	r2, [pc, #8]	@ (8001960 <HAL_NVIC_EnableIRQ+0x18>)
 8001958:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	3801      	subs	r0, #1
 8001966:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800196a:	d20b      	bcs.n	8001984 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001970:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <HAL_SYSTICK_Config+0x24>)
 8001974:	21f0      	movs	r1, #240	@ 0xf0
 8001976:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197a:	2000      	movs	r0, #0
 800197c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	2207      	movs	r2, #7
 8001980:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001982:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001984:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001990:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001992:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001994:	e0a1      	b.n	8001ada <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	4d7e      	ldr	r5, [pc, #504]	@ (8001b90 <HAL_GPIO_Init+0x204>)
 8001998:	42ab      	cmp	r3, r5
 800199a:	d014      	beq.n	80019c6 <HAL_GPIO_Init+0x3a>
 800199c:	d80c      	bhi.n	80019b8 <HAL_GPIO_Init+0x2c>
 800199e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80019a2:	42ab      	cmp	r3, r5
 80019a4:	d00f      	beq.n	80019c6 <HAL_GPIO_Init+0x3a>
 80019a6:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 80019aa:	42ab      	cmp	r3, r5
 80019ac:	d00b      	beq.n	80019c6 <HAL_GPIO_Init+0x3a>
 80019ae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80019b2:	42ab      	cmp	r3, r5
 80019b4:	d110      	bne.n	80019d8 <HAL_GPIO_Init+0x4c>
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x3a>
 80019b8:	4d76      	ldr	r5, [pc, #472]	@ (8001b94 <HAL_GPIO_Init+0x208>)
 80019ba:	42ab      	cmp	r3, r5
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x3a>
 80019be:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 80019c2:	42ab      	cmp	r3, r5
 80019c4:	d108      	bne.n	80019d8 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c6:	688b      	ldr	r3, [r1, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d050      	beq.n	8001a6e <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d049      	beq.n	8001a64 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80019d0:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d2:	2408      	movs	r4, #8
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d6:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80019dc:	d849      	bhi.n	8001a72 <HAL_GPIO_Init+0xe6>
 80019de:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e0:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e4:	6833      	ldr	r3, [r6, #0]
 80019e6:	250f      	movs	r5, #15
 80019e8:	4095      	lsls	r5, r2
 80019ea:	ea23 0305 	bic.w	r3, r3, r5
 80019ee:	fa04 f202 	lsl.w	r2, r4, r2
 80019f2:	4313      	orrs	r3, r2
 80019f4:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f6:	684b      	ldr	r3, [r1, #4]
 80019f8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80019fc:	d06b      	beq.n	8001ad6 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019fe:	4b66      	ldr	r3, [pc, #408]	@ (8001b98 <HAL_GPIO_Init+0x20c>)
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001a12:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001a16:	1c95      	adds	r5, r2, #2
 8001a18:	4b60      	ldr	r3, [pc, #384]	@ (8001b9c <HAL_GPIO_Init+0x210>)
 8001a1a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1e:	f00c 0503 	and.w	r5, ip, #3
 8001a22:	00ad      	lsls	r5, r5, #2
 8001a24:	230f      	movs	r3, #15
 8001a26:	40ab      	lsls	r3, r5
 8001a28:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba0 <HAL_GPIO_Init+0x214>)
 8001a2e:	4298      	cmp	r0, r3
 8001a30:	d026      	beq.n	8001a80 <HAL_GPIO_Init+0xf4>
 8001a32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a36:	4298      	cmp	r0, r3
 8001a38:	f000 808c 	beq.w	8001b54 <HAL_GPIO_Init+0x1c8>
 8001a3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a40:	4298      	cmp	r0, r3
 8001a42:	f000 8089 	beq.w	8001b58 <HAL_GPIO_Init+0x1cc>
 8001a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a4a:	4298      	cmp	r0, r3
 8001a4c:	d016      	beq.n	8001a7c <HAL_GPIO_Init+0xf0>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e017      	b.n	8001a82 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a52:	68cc      	ldr	r4, [r1, #12]
 8001a54:	3404      	adds	r4, #4
          break;
 8001a56:	e7bf      	b.n	80019d8 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a58:	68cc      	ldr	r4, [r1, #12]
 8001a5a:	3408      	adds	r4, #8
          break;
 8001a5c:	e7bc      	b.n	80019d8 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a5e:	68cc      	ldr	r4, [r1, #12]
 8001a60:	340c      	adds	r4, #12
          break;
 8001a62:	e7b9      	b.n	80019d8 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8001a64:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a66:	2408      	movs	r4, #8
 8001a68:	e7b6      	b.n	80019d8 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	e7b4      	b.n	80019d8 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a6e:	2404      	movs	r4, #4
 8001a70:	e7b2      	b.n	80019d8 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a72:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a74:	f1ac 0208 	sub.w	r2, ip, #8
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	e7b3      	b.n	80019e4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0xf6>
 8001a80:	2300      	movs	r3, #0
 8001a82:	40ab      	lsls	r3, r5
 8001a84:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001a86:	3202      	adds	r2, #2
 8001a88:	4d44      	ldr	r5, [pc, #272]	@ (8001b9c <HAL_GPIO_Init+0x210>)
 8001a8a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8e:	684b      	ldr	r3, [r1, #4]
 8001a90:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001a94:	d062      	beq.n	8001b5c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a96:	4a43      	ldr	r2, [pc, #268]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001a98:	6893      	ldr	r3, [r2, #8]
 8001a9a:	ea43 030e 	orr.w	r3, r3, lr
 8001a9e:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa0:	684b      	ldr	r3, [r1, #4]
 8001aa2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001aa6:	d05f      	beq.n	8001b68 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001aaa:	68d3      	ldr	r3, [r2, #12]
 8001aac:	ea43 030e 	orr.w	r3, r3, lr
 8001ab0:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab2:	684b      	ldr	r3, [r1, #4]
 8001ab4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ab8:	d05c      	beq.n	8001b74 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aba:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001abc:	6853      	ldr	r3, [r2, #4]
 8001abe:	ea43 030e 	orr.w	r3, r3, lr
 8001ac2:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	684b      	ldr	r3, [r1, #4]
 8001ac6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001aca:	d059      	beq.n	8001b80 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001acc:	4a35      	ldr	r2, [pc, #212]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	ea43 030e 	orr.w	r3, r3, lr
 8001ad4:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001ad6:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	680b      	ldr	r3, [r1, #0]
 8001adc:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001ae0:	d054      	beq.n	8001b8c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae8:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8001aec:	ea32 0303 	bics.w	r3, r2, r3
 8001af0:	d1f1      	bne.n	8001ad6 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8001af2:	684b      	ldr	r3, [r1, #4]
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	f63f af4e 	bhi.w	8001996 <HAL_GPIO_Init+0xa>
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	f63f af6c 	bhi.w	80019d8 <HAL_GPIO_Init+0x4c>
 8001b00:	a501      	add	r5, pc, #4	@ (adr r5, 8001b08 <HAL_GPIO_Init+0x17c>)
 8001b02:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001b06:	bf00      	nop
 8001b08:	080019c7 	.word	0x080019c7
 8001b0c:	080019d7 	.word	0x080019d7
 8001b10:	08001a59 	.word	0x08001a59
 8001b14:	08001a6b 	.word	0x08001a6b
 8001b18:	080019d9 	.word	0x080019d9
 8001b1c:	080019d9 	.word	0x080019d9
 8001b20:	080019d9 	.word	0x080019d9
 8001b24:	080019d9 	.word	0x080019d9
 8001b28:	080019d9 	.word	0x080019d9
 8001b2c:	080019d9 	.word	0x080019d9
 8001b30:	080019d9 	.word	0x080019d9
 8001b34:	080019d9 	.word	0x080019d9
 8001b38:	080019d9 	.word	0x080019d9
 8001b3c:	080019d9 	.word	0x080019d9
 8001b40:	080019d9 	.word	0x080019d9
 8001b44:	080019d9 	.word	0x080019d9
 8001b48:	080019d9 	.word	0x080019d9
 8001b4c:	08001a53 	.word	0x08001a53
 8001b50:	08001a5f 	.word	0x08001a5f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b54:	2301      	movs	r3, #1
 8001b56:	e794      	b.n	8001a82 <HAL_GPIO_Init+0xf6>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e792      	b.n	8001a82 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001b5e:	6893      	ldr	r3, [r2, #8]
 8001b60:	ea23 030e 	bic.w	r3, r3, lr
 8001b64:	6093      	str	r3, [r2, #8]
 8001b66:	e79b      	b.n	8001aa0 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001b6a:	68d3      	ldr	r3, [r2, #12]
 8001b6c:	ea23 030e 	bic.w	r3, r3, lr
 8001b70:	60d3      	str	r3, [r2, #12]
 8001b72:	e79e      	b.n	8001ab2 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001b76:	6853      	ldr	r3, [r2, #4]
 8001b78:	ea23 030e 	bic.w	r3, r3, lr
 8001b7c:	6053      	str	r3, [r2, #4]
 8001b7e:	e7a1      	b.n	8001ac4 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b80:	4a08      	ldr	r2, [pc, #32]	@ (8001ba4 <HAL_GPIO_Init+0x218>)
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	ea23 030e 	bic.w	r3, r3, lr
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e7a4      	b.n	8001ad6 <HAL_GPIO_Init+0x14a>
  }
}
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	10220000 	.word	0x10220000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba8:	b10a      	cbz	r2, 8001bae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	6101      	str	r1, [r0, #16]
 8001bac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bae:	0409      	lsls	r1, r1, #16
 8001bb0:	6101      	str	r1, [r0, #16]
  }
}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_MspInit+0x3c>)
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	619a      	str	r2, [r3, #24]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	f002 0201 	and.w	r2, r2, #1
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001bd0:	61da      	str	r2, [r3, #28]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bdc:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <HAL_MspInit+0x40>)
 8001bde:	6853      	ldr	r3, [r2, #4]
 8001be0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001be4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bea:	b002      	add	sp, #8
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000

08001bf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bf8:	b500      	push	{lr}
 8001bfa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	9303      	str	r3, [sp, #12]
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	9305      	str	r3, [sp, #20]
  if(htim_encoder->Instance==TIM1)
 8001c06:	6802      	ldr	r2, [r0, #0]
 8001c08:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_TIM_Encoder_MspInit+0x54>)
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d002      	beq.n	8001c14 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c0e:	b007      	add	sp, #28
 8001c10:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c14:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c1e:	619a      	str	r2, [r3, #24]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001c26:	9200      	str	r2, [sp, #0]
 8001c28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	f042 0204 	orr.w	r2, r2, #4
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001c3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c40:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	a902      	add	r1, sp, #8
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <HAL_TIM_Encoder_MspInit+0x58>)
 8001c46:	f7ff fea1 	bl	800198c <HAL_GPIO_Init>
}
 8001c4a:	e7e0      	b.n	8001c0e <HAL_TIM_Encoder_MspInit+0x16>
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40010800 	.word	0x40010800

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b500      	push	{lr}
 8001c56:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 8001c58:	6803      	ldr	r3, [r0, #0]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5e:	d008      	beq.n	8001c72 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001c60:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x74>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d011      	beq.n	8001c8a <HAL_TIM_Base_MspInit+0x36>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001c66:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_TIM_Base_MspInit+0x78>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d021      	beq.n	8001cb0 <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c6c:	b005      	add	sp, #20
 8001c6e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	61da      	str	r2, [r3, #28]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	e7f0      	b.n	8001c6c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	f042 0202 	orr.w	r2, r2, #2
 8001c92:	61da      	str	r2, [r3, #28]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	201d      	movs	r0, #29
 8001ca4:	f7ff fe40 	bl	8001928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca8:	201d      	movs	r0, #29
 8001caa:	f7ff fe4d 	bl	8001948 <HAL_NVIC_EnableIRQ>
 8001cae:	e7dd      	b.n	8001c6c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	f042 0204 	orr.w	r2, r2, #4
 8001cb8:	61da      	str	r2, [r3, #28]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	9303      	str	r3, [sp, #12]
 8001cc2:	9b03      	ldr	r3, [sp, #12]
}
 8001cc4:	e7d2      	b.n	8001c6c <HAL_TIM_Base_MspInit+0x18>
 8001cc6:	bf00      	nop
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd4:	b500      	push	{lr}
 8001cd6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	9303      	str	r3, [sp, #12]
 8001cde:	9304      	str	r3, [sp, #16]
 8001ce0:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8001ce2:	6803      	ldr	r3, [r0, #0]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ce8:	d005      	beq.n	8001cf6 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_TIM_MspPostInit+0x74>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d016      	beq.n	8001d1e <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cf0:	b007      	add	sp, #28
 8001cf2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001cfa:	699a      	ldr	r2, [r3, #24]
 8001cfc:	f042 0204 	orr.w	r2, r2, #4
 8001d00:	619a      	str	r2, [r3, #24]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_CH2_Pin;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_CH2_GPIO_Port, &GPIO_InitStruct);
 8001d14:	a902      	add	r1, sp, #8
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <HAL_TIM_MspPostInit+0x78>)
 8001d18:	f7ff fe38 	bl	800198c <HAL_GPIO_Init>
 8001d1c:	e7e8      	b.n	8001cf0 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_TIM_MspPostInit+0x7c>)
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	f042 0208 	orr.w	r2, r2, #8
 8001d26:	619a      	str	r2, [r3, #24]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d32:	2340      	movs	r3, #64	@ 0x40
 8001d34:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	a902      	add	r1, sp, #8
 8001d3e:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <HAL_TIM_MspPostInit+0x80>)
 8001d40:	f7ff fe24 	bl	800198c <HAL_GPIO_Init>
}
 8001d44:	e7d4      	b.n	8001cf0 <HAL_TIM_MspPostInit+0x1c>
 8001d46:	bf00      	nop
 8001d48:	40000800 	.word	0x40000800
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010c00 	.word	0x40010c00

08001d58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d58:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d5a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8001d5e:	d044      	beq.n	8001dea <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d60:	6804      	ldr	r4, [r0, #0]
 8001d62:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f891 c000 	ldrb.w	ip, [r1]
 8001d6c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8001d70:	3302      	adds	r3, #2
 8001d72:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8001d76:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 8001d7a:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8001d7e:	698b      	ldr	r3, [r1, #24]
 8001d80:	42a3      	cmp	r3, r4
 8001d82:	d328      	bcc.n	8001dd6 <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 8001d84:	1b1b      	subs	r3, r3, r4
 8001d86:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8001d88:	698b      	ldr	r3, [r1, #24]
 8001d8a:	b97b      	cbnz	r3, 8001dac <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d8c:	6805      	ldr	r5, [r0, #0]
 8001d8e:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da8:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dac:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001db0:	d00e      	beq.n	8001dd0 <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	780d      	ldrb	r5, [r1, #0]
 8001db6:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001dcc:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8001dd0:	b924      	cbnz	r4, 8001ddc <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	618b      	str	r3, [r1, #24]
 8001dda:	e7d5      	b.n	8001d88 <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ddc:	4623      	mov	r3, r4
 8001dde:	890a      	ldrh	r2, [r1, #8]
 8001de0:	6949      	ldr	r1, [r1, #20]
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	f002 ffd9 	bl	8004d9a <USB_ReadPMA>
 8001de8:	e7f3      	b.n	8001dd2 <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dea:	6804      	ldr	r4, [r0, #0]
 8001dec:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f891 c000 	ldrb.w	ip, [r1]
 8001df6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8001dfa:	3306      	adds	r3, #6
 8001dfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8001e00:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 8001e04:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8001e08:	698b      	ldr	r3, [r1, #24]
 8001e0a:	42a3      	cmp	r3, r4
 8001e0c:	d32f      	bcc.n	8001e6e <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 8001e0e:	1b1b      	subs	r3, r3, r4
 8001e10:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8001e12:	698b      	ldr	r3, [r1, #24]
 8001e14:	b97b      	cbnz	r3, 8001e36 <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e16:	6805      	ldr	r5, [r0, #0]
 8001e18:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e32:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e36:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001e3a:	d10f      	bne.n	8001e5c <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e3c:	6802      	ldr	r2, [r0, #0]
 8001e3e:	f891 c000 	ldrb.w	ip, [r1]
 8001e42:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e58:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d0b8      	beq.n	8001dd2 <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e60:	4623      	mov	r3, r4
 8001e62:	894a      	ldrh	r2, [r1, #10]
 8001e64:	6949      	ldr	r1, [r1, #20]
 8001e66:	6800      	ldr	r0, [r0, #0]
 8001e68:	f002 ff97 	bl	8004d9a <USB_ReadPMA>
 8001e6c:	e7b1      	b.n	8001dd2 <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	618b      	str	r3, [r1, #24]
 8001e72:	e7ce      	b.n	8001e12 <HAL_PCD_EP_DB_Receive+0xba>

08001e74 <HAL_PCD_Init>:
{
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	f000 8081 	beq.w	8001f80 <HAL_PCD_Init+0x10c>
 8001e7e:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e80:	f890 32a9 	ldrb.w	r3, [r0, #681]	@ 0x2a9
 8001e84:	b1eb      	cbz	r3, 8001ec2 <HAL_PCD_Init+0x4e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	f002 f817 	bl	8003ec0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e92:	4625      	mov	r5, r4
 8001e94:	f855 6b10 	ldr.w	r6, [r5], #16
 8001e98:	46ec      	mov	ip, sp
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ea0:	682b      	ldr	r3, [r5, #0]
 8001ea2:	f8cc 3000 	str.w	r3, [ip]
 8001ea6:	1d23      	adds	r3, r4, #4
 8001ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eaa:	4630      	mov	r0, r6
 8001eac:	f001 fff8 	bl	8003ea0 <USB_CoreInit>
 8001eb0:	4605      	mov	r5, r0
 8001eb2:	b158      	cbz	r0, 8001ecc <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
    return HAL_ERROR;
 8001eba:	2501      	movs	r5, #1
}
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	b006      	add	sp, #24
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001ec2:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
    HAL_PCD_MspInit(hpcd);
 8001ec6:	f003 f97f 	bl	80051c8 <HAL_PCD_MspInit>
 8001eca:	e7dc      	b.n	8001e86 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	6820      	ldr	r0, [r4, #0]
 8001ed0:	f002 f800 	bl	8003ed4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	462b      	mov	r3, r5
 8001ed6:	e016      	b.n	8001f06 <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001ede:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8001ee6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001eea:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eee:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	70c1      	strb	r1, [r0, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ef6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001efa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001efe:	6381      	str	r1, [r0, #56]	@ 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f00:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f02:	6401      	str	r1, [r0, #64]	@ 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f04:	b2d3      	uxtb	r3, r2
 8001f06:	6861      	ldr	r1, [r4, #4]
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	d3e5      	bcc.n	8001ed8 <HAL_PCD_Init+0x64>
 8001f0c:	e016      	b.n	8001f3c <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 8001f0e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001f12:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    hpcd->OUT_ep[i].num = i;
 8001f1c:	f883 5168 	strb.w	r5, [r3, #360]	@ 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f20:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f24:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f28:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f2c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001f30:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001f34:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f38:	3501      	adds	r5, #1
 8001f3a:	b2ed      	uxtb	r5, r5
 8001f3c:	42a9      	cmp	r1, r5
 8001f3e:	d8e6      	bhi.n	8001f0e <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f40:	4625      	mov	r5, r4
 8001f42:	f855 6b10 	ldr.w	r6, [r5], #16
 8001f46:	46ec      	mov	ip, sp
 8001f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f4e:	682b      	ldr	r3, [r5, #0]
 8001f50:	f8cc 3000 	str.w	r3, [ip]
 8001f54:	1d23      	adds	r3, r4, #4
 8001f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f58:	4630      	mov	r0, r6
 8001f5a:	f001 ffbd 	bl	8003ed8 <USB_DevInit>
 8001f5e:	4605      	mov	r5, r0
 8001f60:	b120      	cbz	r0, 8001f6c <HAL_PCD_Init+0xf8>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
    return HAL_ERROR;
 8001f68:	2501      	movs	r5, #1
 8001f6a:	e7a7      	b.n	8001ebc <HAL_PCD_Init+0x48>
  hpcd->USB_Address = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f884 32a9 	strb.w	r3, [r4, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f78:	6820      	ldr	r0, [r4, #0]
 8001f7a:	f002 fb0c 	bl	8004596 <USB_DevDisconnect>
  return HAL_OK;
 8001f7e:	e79d      	b.n	8001ebc <HAL_PCD_Init+0x48>
    return HAL_ERROR;
 8001f80:	2501      	movs	r5, #1
 8001f82:	e79b      	b.n	8001ebc <HAL_PCD_Init+0x48>

08001f84 <HAL_PCD_Start>:
{
 8001f84:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001f86:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d011      	beq.n	8001fb2 <HAL_PCD_Start+0x2e>
 8001f8e:	4604      	mov	r4, r0
 8001f90:	2501      	movs	r5, #1
 8001f92:	f880 52a8 	strb.w	r5, [r0, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f96:	6800      	ldr	r0, [r0, #0]
 8001f98:	f001 ff89 	bl	8003eae <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f003 fa27 	bl	80053f2 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8001fa4:	6820      	ldr	r0, [r4, #0]
 8001fa6:	f002 faf4 	bl	8004592 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8001fb0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	e7fc      	b.n	8001fb0 <HAL_PCD_Start+0x2c>

08001fb6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fb6:	b570      	push	{r4, r5, r6, lr}
 8001fb8:	4605      	mov	r5, r0
 8001fba:	460c      	mov	r4, r1
 8001fbc:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fbe:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001fc2:	f000 810e 	beq.w	80021e2 <HAL_PCD_EP_DB_Transmit+0x22c>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fc6:	6802      	ldr	r2, [r0, #0]
 8001fc8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	7809      	ldrb	r1, [r1, #0]
 8001fd0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001fda:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 8001fde:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 8001fe2:	69a3      	ldr	r3, [r4, #24]
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d94e      	bls.n	8002086 <HAL_PCD_EP_DB_Transmit+0xd0>
    {
      ep->xfer_len -= TxPctSize;
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fec:	69a3      	ldr	r3, [r4, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d166      	bne.n	80020c0 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ff2:	7863      	ldrb	r3, [r4, #1]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d149      	bne.n	800208c <HAL_PCD_EP_DB_Transmit+0xd6>
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8001ffe:	b292      	uxth	r2, r2
 8002000:	4413      	add	r3, r2
 8002002:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002006:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800200a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800200e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8002012:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8002016:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800201a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800201e:	b292      	uxth	r2, r2
 8002020:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002024:	682b      	ldr	r3, [r5, #0]
 8002026:	7862      	ldrb	r2, [r4, #1]
 8002028:	2a00      	cmp	r2, #0
 800202a:	d13c      	bne.n	80020a6 <HAL_PCD_EP_DB_Transmit+0xf0>
 800202c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002030:	b292      	uxth	r2, r2
 8002032:	4413      	add	r3, r2
 8002034:	7822      	ldrb	r2, [r4, #0]
 8002036:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800203a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800203e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002042:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8002046:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800204a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800204e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002052:	b292      	uxth	r2, r2
 8002054:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002058:	7821      	ldrb	r1, [r4, #0]
 800205a:	4628      	mov	r0, r5
 800205c:	f003 f8e8 	bl	8005230 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002060:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8002064:	d041      	beq.n	80020ea <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002066:	682a      	ldr	r2, [r5, #0]
 8002068:	7821      	ldrb	r1, [r4, #0]
 800206a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800207c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002080:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002084:	e031      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	61a3      	str	r3, [r4, #24]
 800208a:	e7af      	b.n	8001fec <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800208c:	2b01      	cmp	r3, #1
 800208e:	d1c9      	bne.n	8002024 <HAL_PCD_EP_DB_Transmit+0x6e>
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002096:	b292      	uxth	r2, r2
 8002098:	4413      	add	r3, r2
 800209a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800209e:	2200      	movs	r2, #0
 80020a0:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80020a4:	e7be      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0x6e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a6:	2a01      	cmp	r2, #1
 80020a8:	d1d6      	bne.n	8002058 <HAL_PCD_EP_DB_Transmit+0xa2>
 80020aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80020ae:	b292      	uxth	r2, r2
 80020b0:	4413      	add	r3, r2
 80020b2:	7822      	ldrb	r2, [r4, #0]
 80020b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80020be:	e7cb      	b.n	8002058 <HAL_PCD_EP_DB_Transmit+0xa2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020c0:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80020c4:	d00d      	beq.n	80020e2 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020c6:	6828      	ldr	r0, [r5, #0]
 80020c8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020de:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020e2:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d012      	beq.n	8002110 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80020ea:	682a      	ldr	r2, [r5, #0]
 80020ec:	7821      	ldrb	r1, [r4, #0]
 80020ee:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020fc:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8002100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002108:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800210c:	2000      	movs	r0, #0
 800210e:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8002110:	6963      	ldr	r3, [r4, #20]
 8002112:	4413      	add	r3, r2
 8002114:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002116:	69e3      	ldr	r3, [r4, #28]
 8002118:	4413      	add	r3, r2
 800211a:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800211c:	6a21      	ldr	r1, [r4, #32]
 800211e:	6923      	ldr	r3, [r4, #16]
 8002120:	4299      	cmp	r1, r3
 8002122:	d324      	bcc.n	800216e <HAL_PCD_EP_DB_Transmit+0x1b8>
          ep->xfer_len_db -= len;
 8002124:	1ac9      	subs	r1, r1, r3
 8002126:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002128:	7862      	ldrb	r2, [r4, #1]
 800212a:	2a00      	cmp	r2, #0
 800212c:	d144      	bne.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x202>
 800212e:	682a      	ldr	r2, [r5, #0]
 8002130:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8002134:	b289      	uxth	r1, r1
 8002136:	440a      	add	r2, r1
 8002138:	7821      	ldrb	r1, [r4, #0]
 800213a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800213e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8002142:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002146:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800214a:	2b3e      	cmp	r3, #62	@ 0x3e
 800214c:	d91b      	bls.n	8002186 <HAL_PCD_EP_DB_Transmit+0x1d0>
 800214e:	0958      	lsrs	r0, r3, #5
 8002150:	f013 0f1f 	tst.w	r3, #31
 8002154:	d100      	bne.n	8002158 <HAL_PCD_EP_DB_Transmit+0x1a2>
 8002156:	3801      	subs	r0, #1
 8002158:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 800215c:	b289      	uxth	r1, r1
 800215e:	0280      	lsls	r0, r0, #10
 8002160:	b280      	uxth	r0, r0
 8002162:	4301      	orrs	r1, r0
 8002164:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002168:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800216c:	e026      	b.n	80021bc <HAL_PCD_EP_DB_Transmit+0x206>
        else if (ep->xfer_len_db == 0U)
 800216e:	b921      	cbnz	r1, 800217a <HAL_PCD_EP_DB_Transmit+0x1c4>
          ep->xfer_fill_db = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8002176:	4613      	mov	r3, r2
 8002178:	e7d6      	b.n	8002128 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8002180:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002182:	460b      	mov	r3, r1
 8002184:	e7d0      	b.n	8002128 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002186:	b94b      	cbnz	r3, 800219c <HAL_PCD_EP_DB_Transmit+0x1e6>
 8002188:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 800218c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002190:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002194:	b289      	uxth	r1, r1
 8002196:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800219a:	e00f      	b.n	80021bc <HAL_PCD_EP_DB_Transmit+0x206>
 800219c:	0859      	lsrs	r1, r3, #1
 800219e:	f013 0f01 	tst.w	r3, #1
 80021a2:	d000      	beq.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80021a4:	3101      	adds	r1, #1
 80021a6:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	@ 0x404
 80021aa:	b280      	uxth	r0, r0
 80021ac:	0289      	lsls	r1, r1, #10
 80021ae:	b289      	uxth	r1, r1
 80021b0:	4301      	orrs	r1, r0
 80021b2:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 80021b6:	e001      	b.n	80021bc <HAL_PCD_EP_DB_Transmit+0x206>
 80021b8:	2a01      	cmp	r2, #1
 80021ba:	d006      	beq.n	80021ca <HAL_PCD_EP_DB_Transmit+0x214>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021bc:	b29b      	uxth	r3, r3
 80021be:	8922      	ldrh	r2, [r4, #8]
 80021c0:	6961      	ldr	r1, [r4, #20]
 80021c2:	6828      	ldr	r0, [r5, #0]
 80021c4:	f002 f9ef 	bl	80045a6 <USB_WritePMA>
 80021c8:	e78f      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021ca:	682a      	ldr	r2, [r5, #0]
 80021cc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 80021d0:	b289      	uxth	r1, r1
 80021d2:	440a      	add	r2, r1
 80021d4:	7821      	ldrb	r1, [r4, #0]
 80021d6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80021da:	b299      	uxth	r1, r3
 80021dc:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 80021e0:	e7ec      	b.n	80021bc <HAL_PCD_EP_DB_Transmit+0x206>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021e2:	6802      	ldr	r2, [r0, #0]
 80021e4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	7809      	ldrb	r1, [r1, #0]
 80021ec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80021f0:	3306      	adds	r3, #6
 80021f2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80021f6:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 80021fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 80021fe:	69a3      	ldr	r3, [r4, #24]
 8002200:	4293      	cmp	r3, r2
 8002202:	d34f      	bcc.n	80022a4 <HAL_PCD_EP_DB_Transmit+0x2ee>
      ep->xfer_len -= TxPctSize;
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002208:	69a3      	ldr	r3, [r4, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d167      	bne.n	80022de <HAL_PCD_EP_DB_Transmit+0x328>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800220e:	7863      	ldrb	r3, [r4, #1]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d14a      	bne.n	80022aa <HAL_PCD_EP_DB_Transmit+0x2f4>
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800221a:	b292      	uxth	r2, r2
 800221c:	4413      	add	r3, r2
 800221e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002222:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8002226:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800222a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800222e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8002232:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002236:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800223a:	b292      	uxth	r2, r2
 800223c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	7862      	ldrb	r2, [r4, #1]
 8002244:	2a00      	cmp	r2, #0
 8002246:	d13d      	bne.n	80022c4 <HAL_PCD_EP_DB_Transmit+0x30e>
 8002248:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800224c:	b292      	uxth	r2, r2
 800224e:	4413      	add	r3, r2
 8002250:	7822      	ldrb	r2, [r4, #0]
 8002252:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002256:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800225a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800225e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8002262:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8002266:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800226a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800226e:	b292      	uxth	r2, r2
 8002270:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002274:	7821      	ldrb	r1, [r4, #0]
 8002276:	4628      	mov	r0, r5
 8002278:	f002 ffda 	bl	8005230 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800227c:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8002280:	f47f af33 	bne.w	80020ea <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002284:	682a      	ldr	r2, [r5, #0]
 8002286:	7821      	ldrb	r1, [r4, #0]
 8002288:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800228c:	b29b      	uxth	r3, r3
 800228e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002296:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800229a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800229e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80022a2:	e722      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61a3      	str	r3, [r4, #24]
 80022a8:	e7ae      	b.n	8002208 <HAL_PCD_EP_DB_Transmit+0x252>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d1c8      	bne.n	8002240 <HAL_PCD_EP_DB_Transmit+0x28a>
 80022ae:	682b      	ldr	r3, [r5, #0]
 80022b0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80022b4:	b292      	uxth	r2, r2
 80022b6:	4413      	add	r3, r2
 80022b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80022bc:	2200      	movs	r2, #0
 80022be:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80022c2:	e7bd      	b.n	8002240 <HAL_PCD_EP_DB_Transmit+0x28a>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022c4:	2a01      	cmp	r2, #1
 80022c6:	d1d5      	bne.n	8002274 <HAL_PCD_EP_DB_Transmit+0x2be>
 80022c8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80022cc:	b292      	uxth	r2, r2
 80022ce:	4413      	add	r3, r2
 80022d0:	7822      	ldrb	r2, [r4, #0]
 80022d2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80022dc:	e7ca      	b.n	8002274 <HAL_PCD_EP_DB_Transmit+0x2be>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022de:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80022e2:	d10d      	bne.n	8002300 <HAL_PCD_EP_DB_Transmit+0x34a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022e4:	6828      	ldr	r0, [r5, #0]
 80022e6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002300:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002304:	2b01      	cmp	r3, #1
 8002306:	f47f aef0 	bne.w	80020ea <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 800230a:	6963      	ldr	r3, [r4, #20]
 800230c:	4413      	add	r3, r2
 800230e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002310:	69e3      	ldr	r3, [r4, #28]
 8002312:	4413      	add	r3, r2
 8002314:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002316:	6a21      	ldr	r1, [r4, #32]
 8002318:	6923      	ldr	r3, [r4, #16]
 800231a:	4299      	cmp	r1, r3
 800231c:	d324      	bcc.n	8002368 <HAL_PCD_EP_DB_Transmit+0x3b2>
          ep->xfer_len_db -= len;
 800231e:	1ac9      	subs	r1, r1, r3
 8002320:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002322:	682a      	ldr	r2, [r5, #0]
 8002324:	7861      	ldrb	r1, [r4, #1]
 8002326:	2900      	cmp	r1, #0
 8002328:	d143      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x3fc>
 800232a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 800232e:	b289      	uxth	r1, r1
 8002330:	440a      	add	r2, r1
 8002332:	7821      	ldrb	r1, [r4, #0]
 8002334:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002338:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 800233c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002340:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002344:	2b3e      	cmp	r3, #62	@ 0x3e
 8002346:	d91b      	bls.n	8002380 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002348:	0958      	lsrs	r0, r3, #5
 800234a:	f013 0f1f 	tst.w	r3, #31
 800234e:	d100      	bne.n	8002352 <HAL_PCD_EP_DB_Transmit+0x39c>
 8002350:	3801      	subs	r0, #1
 8002352:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8002356:	b289      	uxth	r1, r1
 8002358:	0280      	lsls	r0, r0, #10
 800235a:	b280      	uxth	r0, r0
 800235c:	4301      	orrs	r1, r0
 800235e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002362:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002366:	e026      	b.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x400>
        else if (ep->xfer_len_db == 0U)
 8002368:	b921      	cbnz	r1, 8002374 <HAL_PCD_EP_DB_Transmit+0x3be>
          ep->xfer_fill_db = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8002370:	4613      	mov	r3, r2
 8002372:	e7d6      	b.n	8002322 <HAL_PCD_EP_DB_Transmit+0x36c>
          ep->xfer_len_db = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002378:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = ep->xfer_len_db;
 800237c:	460b      	mov	r3, r1
 800237e:	e7d0      	b.n	8002322 <HAL_PCD_EP_DB_Transmit+0x36c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002380:	b94b      	cbnz	r3, 8002396 <HAL_PCD_EP_DB_Transmit+0x3e0>
 8002382:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8002386:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800238a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800238e:	b289      	uxth	r1, r1
 8002390:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002394:	e00f      	b.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x400>
 8002396:	0859      	lsrs	r1, r3, #1
 8002398:	f013 0f01 	tst.w	r3, #1
 800239c:	d000      	beq.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x3ea>
 800239e:	3101      	adds	r1, #1
 80023a0:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	@ 0x40c
 80023a4:	b280      	uxth	r0, r0
 80023a6:	0289      	lsls	r1, r1, #10
 80023a8:	b289      	uxth	r1, r1
 80023aa:	4301      	orrs	r1, r0
 80023ac:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 80023b0:	e001      	b.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x400>
 80023b2:	2901      	cmp	r1, #1
 80023b4:	d006      	beq.n	80023c4 <HAL_PCD_EP_DB_Transmit+0x40e>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	8962      	ldrh	r2, [r4, #10]
 80023ba:	6961      	ldr	r1, [r4, #20]
 80023bc:	6828      	ldr	r0, [r5, #0]
 80023be:	f002 f8f2 	bl	80045a6 <USB_WritePMA>
 80023c2:	e692      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023c4:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 80023c8:	b289      	uxth	r1, r1
 80023ca:	440a      	add	r2, r1
 80023cc:	7821      	ldrb	r1, [r4, #0]
 80023ce:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80023d2:	b299      	uxth	r1, r3
 80023d4:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 80023d8:	e7ed      	b.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x400>

080023da <PCD_EP_ISR_Handler>:
{
 80023da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023de:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023e0:	6828      	ldr	r0, [r5, #0]
 80023e2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80023e6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80023ea:	f000 8292 	beq.w	8002912 <PCD_EP_ISR_Handler+0x538>
    wIstr = hpcd->Instance->ISTR;
 80023ee:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 80023f2:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 80023f4:	f014 040f 	ands.w	r4, r4, #15
 80023f8:	f040 80e2 	bne.w	80025c0 <PCD_EP_ISR_Handler+0x1e6>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023fc:	f013 0f10 	tst.w	r3, #16
 8002400:	d06b      	beq.n	80024da <PCD_EP_ISR_Handler+0x100>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002402:	8803      	ldrh	r3, [r0, #0]
 8002404:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002406:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800240a:	f040 809d 	bne.w	8002548 <PCD_EP_ISR_Handler+0x16e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800240e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002412:	d0e5      	beq.n	80023e0 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002414:	8803      	ldrh	r3, [r0, #0]
 8002416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241a:	051b      	lsls	r3, r3, #20
 800241c:	0d1b      	lsrs	r3, r3, #20
 800241e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002422:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002424:	6828      	ldr	r0, [r5, #0]
 8002426:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800242a:	b29b      	uxth	r3, r3
 800242c:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 8002430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002434:	3306      	adds	r3, #6
 8002436:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800243a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800243e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002442:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002446:	b18b      	cbz	r3, 800246c <PCD_EP_ISR_Handler+0x92>
 8002448:	f8d5 117c 	ldr.w	r1, [r5, #380]	@ 0x17c
 800244c:	b171      	cbz	r1, 800246c <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800244e:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 8002452:	f002 fca2 	bl	8004d9a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002456:	f8d5 317c 	ldr.w	r3, [r5, #380]	@ 0x17c
 800245a:	f8d5 2184 	ldr.w	r2, [r5, #388]	@ 0x184
 800245e:	4413      	add	r3, r2
 8002460:	f8c5 317c 	str.w	r3, [r5, #380]	@ 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002464:	2100      	movs	r1, #0
 8002466:	4628      	mov	r0, r5
 8002468:	f002 fed6 	bl	8005218 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800246c:	682a      	ldr	r2, [r5, #0]
 800246e:	8813      	ldrh	r3, [r2, #0]
 8002470:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002472:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002476:	d1b3      	bne.n	80023e0 <PCD_EP_ISR_Handler+0x6>
 8002478:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 800247c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8002480:	d0ae      	beq.n	80023e0 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002482:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002486:	b29b      	uxth	r3, r3
 8002488:	441a      	add	r2, r3
 800248a:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 800248e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002492:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8002496:	f8d5 3178 	ldr.w	r3, [r5, #376]	@ 0x178
 800249a:	2b3e      	cmp	r3, #62	@ 0x3e
 800249c:	d977      	bls.n	800258e <PCD_EP_ISR_Handler+0x1b4>
 800249e:	0959      	lsrs	r1, r3, #5
 80024a0:	f013 0f1f 	tst.w	r3, #31
 80024a4:	d100      	bne.n	80024a8 <PCD_EP_ISR_Handler+0xce>
 80024a6:	3901      	subs	r1, #1
 80024a8:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	0289      	lsls	r1, r1, #10
 80024b0:	b289      	uxth	r1, r1
 80024b2:	430b      	orrs	r3, r1
 80024b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024b8:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024bc:	682a      	ldr	r2, [r5, #0]
 80024be:	8813      	ldrh	r3, [r2, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ca:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d6:	8013      	strh	r3, [r2, #0]
 80024d8:	e782      	b.n	80023e0 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024da:	8803      	ldrh	r3, [r0, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024f2:	682a      	ldr	r2, [r5, #0]
 80024f4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 80024fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002502:	3302      	adds	r3, #2
 8002504:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002508:	f8b2 3400 	ldrh.w	r3, [r2, #1024]	@ 0x400
 800250c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002510:	646b      	str	r3, [r5, #68]	@ 0x44
        ep->xfer_buff += ep->xfer_count;
 8002512:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002514:	441a      	add	r2, r3
 8002516:	63ea      	str	r2, [r5, #60]	@ 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002518:	2100      	movs	r1, #0
 800251a:	4628      	mov	r0, r5
 800251c:	f002 fe88 	bl	8005230 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002520:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	f43f af5b 	beq.w	80023e0 <PCD_EP_ISR_Handler+0x6>
 800252a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f af57 	bne.w	80023e0 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002532:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8002536:	682a      	ldr	r2, [r5, #0]
 8002538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253c:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
 8002546:	e74b      	b.n	80023e0 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002548:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 8002552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002556:	3306      	adds	r3, #6
 8002558:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800255c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002568:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 800256c:	f505 712c 	add.w	r1, r5, #688	@ 0x2b0
 8002570:	f002 fc13 	bl	8004d9a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002574:	682a      	ldr	r2, [r5, #0]
 8002576:	8813      	ldrh	r3, [r2, #0]
 8002578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	0d1b      	lsrs	r3, r3, #20
 8002580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002584:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002586:	4628      	mov	r0, r5
 8002588:	f002 fe3e 	bl	8005208 <HAL_PCD_SetupStageCallback>
 800258c:	e728      	b.n	80023e0 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800258e:	b94b      	cbnz	r3, 80025a4 <PCD_EP_ISR_Handler+0x1ca>
 8002590:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8002594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259c:	b29b      	uxth	r3, r3
 800259e:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 80025a2:	e78b      	b.n	80024bc <PCD_EP_ISR_Handler+0xe2>
 80025a4:	0859      	lsrs	r1, r3, #1
 80025a6:	f013 0f01 	tst.w	r3, #1
 80025aa:	d000      	beq.n	80025ae <PCD_EP_ISR_Handler+0x1d4>
 80025ac:	3101      	adds	r1, #1
 80025ae:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 80025b2:	b298      	uxth	r0, r3
 80025b4:	028b      	lsls	r3, r1, #10
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4303      	orrs	r3, r0
 80025ba:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 80025be:	e77d      	b.n	80024bc <PCD_EP_ISR_Handler+0xe2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025c0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80025c4:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025c6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80025ca:	d14c      	bne.n	8002666 <PCD_EP_ISR_Handler+0x28c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025cc:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80025d0:	f43f af06 	beq.w	80023e0 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 80025d4:	1c62      	adds	r2, r4, #1
 80025d6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80025da:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025de:	6828      	ldr	r0, [r5, #0]
 80025e0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80025fc:	78cb      	ldrb	r3, [r1, #3]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f000 80f2 	beq.w	80027e8 <PCD_EP_ISR_Handler+0x40e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002604:	f416 7f80 	tst.w	r6, #256	@ 0x100
 8002608:	f040 817e 	bne.w	8002908 <PCD_EP_ISR_Handler+0x52e>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800260c:	6828      	ldr	r0, [r5, #0]
 800260e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	1c62      	adds	r2, r4, #1
 8002616:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800261a:	f815 6032 	ldrb.w	r6, [r5, r2, lsl #3]
 800261e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002622:	3302      	adds	r3, #2
 8002624:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002628:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800262c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8002630:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002634:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002638:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800263a:	429a      	cmp	r2, r3
 800263c:	f240 814c 	bls.w	80028d8 <PCD_EP_ISR_Handler+0x4fe>
              ep->xfer_len -= TxPctSize;
 8002640:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8002644:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8002648:	1ad2      	subs	r2, r2, r3
 800264a:	643a      	str	r2, [r7, #64]	@ 0x40
            if (ep->xfer_len == 0U)
 800264c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002650:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002654:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002656:	2a00      	cmp	r2, #0
 8002658:	f040 8145 	bne.w	80028e6 <PCD_EP_ISR_Handler+0x50c>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800265c:	4631      	mov	r1, r6
 800265e:	4628      	mov	r0, r5
 8002660:	f002 fde6 	bl	8005230 <HAL_PCD_DataInStageCallback>
 8002664:	e6bc      	b.n	80023e0 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002666:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800266a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266e:	051b      	lsls	r3, r3, #20
 8002670:	0d1b      	lsrs	r3, r3, #20
 8002672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002676:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 800267a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800267e:	00c9      	lsls	r1, r1, #3
 8002680:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8002684:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8002688:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800268c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002690:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8002694:	2b00      	cmp	r3, #0
 8002696:	d142      	bne.n	800271e <PCD_EP_ISR_Handler+0x344>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002698:	6828      	ldr	r0, [r5, #0]
 800269a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80026a4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80026a8:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 80026ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026b0:	3306      	adds	r3, #6
 80026b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80026b6:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 80026ba:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 80026be:	bb17      	cbnz	r7, 8002706 <PCD_EP_ISR_Handler+0x32c>
        ep->xfer_count += count;
 80026c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80026c4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80026c8:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 80026cc:	443a      	add	r2, r7
 80026ce:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ep->xfer_buff += count;
 80026d2:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 80026d6:	443a      	add	r2, r7
 80026d8:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026dc:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80026e0:	b13b      	cbz	r3, 80026f2 <PCD_EP_ISR_Handler+0x318>
 80026e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80026e6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80026ea:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80026ee:	429f      	cmp	r7, r3
 80026f0:	d275      	bcs.n	80027de <PCD_EP_ISR_Handler+0x404>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026f2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80026f6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80026fa:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 80026fe:	4628      	mov	r0, r5
 8002700:	f002 fd8a 	bl	8005218 <HAL_PCD_DataOutStageCallback>
 8002704:	e762      	b.n	80025cc <PCD_EP_ISR_Handler+0x1f2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002706:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800270a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800270e:	463b      	mov	r3, r7
 8002710:	f8b1 216e 	ldrh.w	r2, [r1, #366]	@ 0x16e
 8002714:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002718:	f002 fb3f 	bl	8004d9a <USB_ReadPMA>
 800271c:	e7d0      	b.n	80026c0 <PCD_EP_ISR_Handler+0x2e6>
          if (ep->type == EP_TYPE_BULK)
 800271e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002722:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002726:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 800272a:	2b02      	cmp	r3, #2
 800272c:	d035      	beq.n	800279a <PCD_EP_ISR_Handler+0x3c0>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800272e:	6829      	ldr	r1, [r5, #0]
 8002730:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002734:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002738:	f892 0168 	ldrb.w	r0, [r2, #360]	@ 0x168
 800273c:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800274a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800274e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002752:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002756:	6828      	ldr	r0, [r5, #0]
 8002758:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 800275c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002760:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002764:	d020      	beq.n	80027a8 <PCD_EP_ISR_Handler+0x3ce>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002766:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002770:	3302      	adds	r3, #2
 8002772:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002776:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 800277a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800277e:	2f00      	cmp	r7, #0
 8002780:	d09e      	beq.n	80026c0 <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002782:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002786:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800278a:	463b      	mov	r3, r7
 800278c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 8002790:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002794:	f002 fb01 	bl	8004d9a <USB_ReadPMA>
 8002798:	e792      	b.n	80026c0 <PCD_EP_ISR_Handler+0x2e6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800279a:	4632      	mov	r2, r6
 800279c:	4641      	mov	r1, r8
 800279e:	4628      	mov	r0, r5
 80027a0:	f7ff fada 	bl	8001d58 <HAL_PCD_EP_DB_Receive>
 80027a4:	4607      	mov	r7, r0
 80027a6:	e78b      	b.n	80026c0 <PCD_EP_ISR_Handler+0x2e6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027a8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80027b2:	3306      	adds	r3, #6
 80027b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027b8:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 80027bc:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	f43f af7d 	beq.w	80026c0 <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027c6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80027ca:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80027ce:	463b      	mov	r3, r7
 80027d0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 80027d4:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 80027d8:	f002 fadf 	bl	8004d9a <USB_ReadPMA>
 80027dc:	e770      	b.n	80026c0 <PCD_EP_ISR_Handler+0x2e6>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027de:	4641      	mov	r1, r8
 80027e0:	6828      	ldr	r0, [r5, #0]
 80027e2:	f001 fef3 	bl	80045cc <USB_EPStartXfer>
 80027e6:	e6f1      	b.n	80025cc <PCD_EP_ISR_Handler+0x1f2>
          ep->xfer_len = 0U;
 80027e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80027ec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40
          if (ep->doublebuffer != 0U)
 80027f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027f8:	b1fb      	cbz	r3, 800283a <PCD_EP_ISR_Handler+0x460>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027fa:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80027fe:	d037      	beq.n	8002870 <PCD_EP_ISR_Handler+0x496>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002800:	784b      	ldrb	r3, [r1, #1]
 8002802:	bb1b      	cbnz	r3, 800284c <PCD_EP_ISR_Handler+0x472>
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800280a:	b292      	uxth	r2, r2
 800280c:	4413      	add	r3, r2
 800280e:	1c62      	adds	r2, r4, #1
 8002810:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002814:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002818:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800281c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8002820:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002824:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8002828:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800282c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002830:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002834:	b292      	uxth	r2, r2
 8002836:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800283a:	3401      	adds	r4, #1
 800283c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002840:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8002844:	4628      	mov	r0, r5
 8002846:	f002 fcf3 	bl	8005230 <HAL_PCD_DataInStageCallback>
 800284a:	e5c9      	b.n	80023e0 <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800284c:	2b01      	cmp	r3, #1
 800284e:	d1f4      	bne.n	800283a <PCD_EP_ISR_Handler+0x460>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002856:	b292      	uxth	r2, r2
 8002858:	4413      	add	r3, r2
 800285a:	1c62      	adds	r2, r4, #1
 800285c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002860:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002864:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002868:	2200      	movs	r2, #0
 800286a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800286e:	e7e4      	b.n	800283a <PCD_EP_ISR_Handler+0x460>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002870:	682a      	ldr	r2, [r5, #0]
 8002872:	1c63      	adds	r3, r4, #1
 8002874:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002878:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	b9d3      	cbnz	r3, 80028b6 <PCD_EP_ISR_Handler+0x4dc>
 8002880:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	4413      	add	r3, r2
 8002888:	1c62      	adds	r2, r4, #1
 800288a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800288e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8002892:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002896:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800289a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800289e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80028a2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80028a6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80028aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80028ae:	b292      	uxth	r2, r2
 80028b0:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80028b4:	e7c1      	b.n	800283a <PCD_EP_ISR_Handler+0x460>
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d1bf      	bne.n	800283a <PCD_EP_ISR_Handler+0x460>
 80028ba:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	1c62      	adds	r2, r4, #1
 80028c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80028c8:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 80028cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80028d6:	e7b0      	b.n	800283a <PCD_EP_ISR_Handler+0x460>
              ep->xfer_len = 0U;
 80028d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80028dc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80028e0:	2700      	movs	r7, #0
 80028e2:	6417      	str	r7, [r2, #64]	@ 0x40
 80028e4:	e6b2      	b.n	800264c <PCD_EP_ISR_Handler+0x272>
              ep->xfer_buff += TxPctSize;
 80028e6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80028ea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80028ee:	6bd6      	ldr	r6, [r2, #60]	@ 0x3c
 80028f0:	441e      	add	r6, r3
 80028f2:	63d6      	str	r6, [r2, #60]	@ 0x3c
              ep->xfer_count += TxPctSize;
 80028f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80028fa:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80028fe:	4413      	add	r3, r2
 8002900:	6463      	str	r3, [r4, #68]	@ 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002902:	f001 fe63 	bl	80045cc <USB_EPStartXfer>
 8002906:	e56b      	b.n	80023e0 <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002908:	4632      	mov	r2, r6
 800290a:	4628      	mov	r0, r5
 800290c:	f7ff fb53 	bl	8001fb6 <HAL_PCD_EP_DB_Transmit>
 8002910:	e566      	b.n	80023e0 <PCD_EP_ISR_Handler+0x6>
}
 8002912:	2000      	movs	r0, #0
 8002914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002918 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002918:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00d      	beq.n	800293c <HAL_PCD_SetAddress+0x24>
{
 8002920:	b510      	push	{r4, lr}
 8002922:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002924:	2301      	movs	r3, #1
 8002926:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800292a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800292e:	6800      	ldr	r0, [r0, #0]
 8002930:	f001 fe29 	bl	8004586 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002934:	2000      	movs	r0, #0
 8002936:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 800293a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800293c:	2002      	movs	r0, #2
}
 800293e:	4770      	bx	lr

08002940 <HAL_PCD_IRQHandler>:
{
 8002940:	b510      	push	{r4, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002946:	6800      	ldr	r0, [r0, #0]
 8002948:	f001 fe27 	bl	800459a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800294c:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8002950:	d120      	bne.n	8002994 <HAL_PCD_IRQHandler+0x54>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002952:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8002956:	d121      	bne.n	800299c <HAL_PCD_IRQHandler+0x5c>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002958:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 800295c:	d12f      	bne.n	80029be <HAL_PCD_IRQHandler+0x7e>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800295e:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8002962:	d137      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x94>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002964:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8002968:	d13e      	bne.n	80029e8 <HAL_PCD_IRQHandler+0xa8>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800296a:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800296e:	f040 8087 	bne.w	8002a80 <HAL_PCD_IRQHandler+0x140>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002972:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8002976:	f040 80ae 	bne.w	8002ad6 <HAL_PCD_IRQHandler+0x196>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800297a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800297e:	d027      	beq.n	80029d0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002980:	6822      	ldr	r2, [r4, #0]
 8002982:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800298c:	b29b      	uxth	r3, r3
 800298e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8002992:	e01d      	b.n	80029d0 <HAL_PCD_IRQHandler+0x90>
    (void)PCD_EP_ISR_Handler(hpcd);
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fd20 	bl	80023da <PCD_EP_ISR_Handler>
    return;
 800299a:	e019      	b.n	80029d0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800299c:	6822      	ldr	r2, [r4, #0]
 800299e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80029ae:	4620      	mov	r0, r4
 80029b0:	f002 fc4f 	bl	8005252 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029b4:	2100      	movs	r1, #0
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7ff ffae 	bl	8002918 <HAL_PCD_SetAddress>
    return;
 80029bc:	e008      	b.n	80029d0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029be:	6822      	ldr	r2, [r4, #0]
 80029c0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 80029d0:	b004      	add	sp, #16
 80029d2:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80029e6:	e7f3      	b.n	80029d0 <HAL_PCD_IRQHandler+0x90>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029fa:	6822      	ldr	r2, [r4, #0]
 80029fc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f023 0308 	bic.w	r3, r3, #8
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f002 fc43 	bl	8005298 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a12:	6822      	ldr	r2, [r4, #0]
 8002a14:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8002a24:	e7d4      	b.n	80029d0 <HAL_PCD_IRQHandler+0x90>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a26:	6822      	ldr	r2, [r4, #0]
 8002a28:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002a2c:	aa04      	add	r2, sp, #16
 8002a2e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002a32:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b07      	cmp	r3, #7
 8002a3c:	d9f3      	bls.n	8002a26 <HAL_PCD_IRQHandler+0xe6>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002a66:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002a6a:	d0f9      	beq.n	8002a60 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a6c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002a70:	b292      	uxth	r2, r2
 8002a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a76:	b292      	uxth	r2, r2
 8002a78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    for (i = 0U; i < 8U; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e00b      	b.n	8002a98 <HAL_PCD_IRQHandler+0x158>
    for (i = 0U; i < 8U; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	e7da      	b.n	8002a3a <HAL_PCD_IRQHandler+0xfa>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	a904      	add	r1, sp, #16
 8002a88:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002a8c:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8002a90:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 8002a94:	3301      	adds	r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b07      	cmp	r3, #7
 8002a9a:	d9f3      	bls.n	8002a84 <HAL_PCD_IRQHandler+0x144>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aac:	6822      	ldr	r2, [r4, #0]
 8002aae:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f002 fbd2 	bl	8005278 <HAL_PCD_SuspendCallback>
    return;
 8002ad4:	e77c      	b.n	80029d0 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f002 fbac 	bl	8005246 <HAL_PCD_SOFCallback>
    return;
 8002aee:	e76f      	b.n	80029d0 <HAL_PCD_IRQHandler+0x90>

08002af0 <HAL_PCD_EP_Open>:
{
 8002af0:	b510      	push	{r4, lr}
 8002af2:	4604      	mov	r4, r0
 8002af4:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002af6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002afa:	d125      	bne.n	8002b48 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	f001 0c07 	and.w	ip, r1, #7
 8002b00:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002b04:	00c9      	lsls	r1, r1, #3
 8002b06:	f501 7eb4 	add.w	lr, r1, #360	@ 0x168
 8002b0a:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8002b0e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002b12:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002b16:	f04f 0e00 	mov.w	lr, #0
 8002b1a:	f88c e169 	strb.w	lr, [ip, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b1e:	f000 0007 	and.w	r0, r0, #7
 8002b22:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8002b24:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8002b26:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d01a      	beq.n	8002b62 <HAL_PCD_EP_Open+0x72>
  __HAL_LOCK(hpcd);
 8002b2c:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d019      	beq.n	8002b68 <HAL_PCD_EP_Open+0x78>
 8002b34:	2301      	movs	r3, #1
 8002b36:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	f001 f9dd 	bl	8003efa <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8002b46:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b48:	f001 0c07 	and.w	ip, r1, #7
 8002b4c:	f10c 0c01 	add.w	ip, ip, #1
 8002b50:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002b54:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8002b58:	f04f 0e01 	mov.w	lr, #1
 8002b5c:	f881 e001 	strb.w	lr, [r1, #1]
 8002b60:	e7dd      	b.n	8002b1e <HAL_PCD_EP_Open+0x2e>
    ep->data_pid_start = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	710b      	strb	r3, [r1, #4]
 8002b66:	e7e1      	b.n	8002b2c <HAL_PCD_EP_Open+0x3c>
  __HAL_LOCK(hpcd);
 8002b68:	2002      	movs	r0, #2
 8002b6a:	e7ec      	b.n	8002b46 <HAL_PCD_EP_Open+0x56>

08002b6c <HAL_PCD_EP_Close>:
{
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002b72:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002b76:	d11f      	bne.n	8002bb8 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	f001 0207 	and.w	r2, r1, #7
 8002b7c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002b80:	00c9      	lsls	r1, r1, #3
 8002b82:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8002b86:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002b88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b8c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002b90:	2000      	movs	r0, #0
 8002b92:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002b9c:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d013      	beq.n	8002bcc <HAL_PCD_EP_Close+0x60>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	f001 fb8a 	bl	80042c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8002bb6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	f001 0207 	and.w	r2, r1, #7
 8002bbc:	3201      	adds	r2, #1
 8002bbe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002bc2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	7048      	strb	r0, [r1, #1]
 8002bca:	e7e4      	b.n	8002b96 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8002bcc:	2002      	movs	r0, #2
 8002bce:	e7f2      	b.n	8002bb6 <HAL_PCD_EP_Close+0x4a>

08002bd0 <HAL_PCD_EP_Receive>:
{
 8002bd0:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd2:	f001 0c07 	and.w	ip, r1, #7
 8002bd6:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002bda:	00c9      	lsls	r1, r1, #3
 8002bdc:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
  ep->xfer_buff = pBuf;
 8002be0:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 8002be4:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8002be8:	f8ce 217c 	str.w	r2, [lr, #380]	@ 0x17c
  ep->xfer_len = len;
 8002bec:	f8ce 3180 	str.w	r3, [lr, #384]	@ 0x180
  ep->xfer_count = 0U;
 8002bf0:	2400      	movs	r4, #0
 8002bf2:	f8ce 4184 	str.w	r4, [lr, #388]	@ 0x184
  ep->is_in = 0U;
 8002bf6:	f88e 4169 	strb.w	r4, [lr, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfa:	f88e c168 	strb.w	ip, [lr, #360]	@ 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bfe:	4401      	add	r1, r0
 8002c00:	6800      	ldr	r0, [r0, #0]
 8002c02:	f001 fce3 	bl	80045cc <USB_EPStartXfer>
}
 8002c06:	4620      	mov	r0, r4
 8002c08:	bd10      	pop	{r4, pc}

08002c0a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c0a:	f001 0107 	and.w	r1, r1, #7
 8002c0e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002c12:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8002c16:	f8d0 0184 	ldr.w	r0, [r0, #388]	@ 0x184
 8002c1a:	4770      	bx	lr

08002c1c <HAL_PCD_EP_Transmit>:
{
 8002c1c:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1e:	f001 0407 	and.w	r4, r1, #7
 8002c22:	f104 0c01 	add.w	ip, r4, #1
 8002c26:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
  ep->xfer_buff = pBuf;
 8002c2a:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
 8002c2e:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8002c32:	f8ce 203c 	str.w	r2, [lr, #60]	@ 0x3c
  ep->xfer_len = len;
 8002c36:	f8ce 3040 	str.w	r3, [lr, #64]	@ 0x40
  ep->xfer_fill_db = 1U;
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f88e 204c 	strb.w	r2, [lr, #76]	@ 0x4c
  ep->xfer_len_db = len;
 8002c40:	f8ce 3048 	str.w	r3, [lr, #72]	@ 0x48
  ep->xfer_count = 0U;
 8002c44:	2500      	movs	r5, #0
 8002c46:	f8ce 5044 	str.w	r5, [lr, #68]	@ 0x44
  ep->is_in = 1U;
 8002c4a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8002c4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c50:	f800 4031 	strb.w	r4, [r0, r1, lsl #3]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c54:	4619      	mov	r1, r3
 8002c56:	6800      	ldr	r0, [r0, #0]
 8002c58:	f001 fcb8 	bl	80045cc <USB_EPStartXfer>
}
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}

08002c60 <HAL_PCD_EP_SetStall>:
{
 8002c60:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c62:	f001 0507 	and.w	r5, r1, #7
 8002c66:	6842      	ldr	r2, [r0, #4]
 8002c68:	4295      	cmp	r5, r2
 8002c6a:	d831      	bhi.n	8002cd0 <HAL_PCD_EP_SetStall+0x70>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002c70:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002c74:	d11e      	bne.n	8002cb4 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8002c76:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002c7a:	00c9      	lsls	r1, r1, #3
 8002c7c:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8002c80:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002c82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c86:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
  ep->is_stall = 1U;
 8002c90:	2301      	movs	r3, #1
 8002c92:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c94:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002c96:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d01a      	beq.n	8002cd4 <HAL_PCD_EP_SetStall+0x74>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ca4:	6820      	ldr	r0, [r4, #0]
 8002ca6:	f001 fbf8 	bl	800449a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002caa:	b15d      	cbz	r5, 8002cc4 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	1c6b      	adds	r3, r5, #1
 8002cb6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002cba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	704a      	strb	r2, [r1, #1]
 8002cc2:	e7e5      	b.n	8002c90 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002cc4:	f504 712c 	add.w	r1, r4, #688	@ 0x2b0
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	f001 fc6a 	bl	80045a2 <USB_EP0_OutStart>
 8002cce:	e7ed      	b.n	8002cac <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e7ee      	b.n	8002cb2 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	e7ec      	b.n	8002cb2 <HAL_PCD_EP_SetStall+0x52>

08002cd8 <HAL_PCD_EP_ClrStall>:
{
 8002cd8:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cda:	f001 010f 	and.w	r1, r1, #15
 8002cde:	6842      	ldr	r2, [r0, #4]
 8002ce0:	4291      	cmp	r1, r2
 8002ce2:	d830      	bhi.n	8002d46 <HAL_PCD_EP_ClrStall+0x6e>
{
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002ce8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002cec:	d121      	bne.n	8002d32 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	f003 0207 	and.w	r2, r3, #7
 8002cf2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002cf6:	00c9      	lsls	r1, r1, #3
 8002cf8:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8002cfc:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002cfe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d02:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002d06:	2000      	movs	r0, #0
 8002d08:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->is_stall = 0U;
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002d16:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d015      	beq.n	8002d4a <HAL_PCD_EP_ClrStall+0x72>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d24:	6820      	ldr	r0, [r4, #0]
 8002d26:	f001 fbdd 	bl	80044e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8002d30:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d32:	f003 0207 	and.w	r2, r3, #7
 8002d36:	3201      	adds	r2, #1
 8002d38:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002d3c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002d40:	2001      	movs	r0, #1
 8002d42:	7048      	strb	r0, [r1, #1]
 8002d44:	e7e2      	b.n	8002d0c <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
}
 8002d48:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	e7f0      	b.n	8002d30 <HAL_PCD_EP_ClrStall+0x58>

08002d4e <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d4e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002d52:	d00b      	beq.n	8002d6c <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d54:	f001 0107 	and.w	r1, r1, #7
 8002d58:	3101      	adds	r1, #1
 8002d5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002d5e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d62:	b952      	cbnz	r2, 8002d7a <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d64:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d66:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002d68:	2000      	movs	r0, #0
 8002d6a:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8002d6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002d70:	00c9      	lsls	r1, r1, #3
 8002d72:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8002d76:	4408      	add	r0, r1
 8002d78:	e7f3      	b.n	8002d62 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d7e:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	8143      	strh	r3, [r0, #10]
 8002d84:	e7f0      	b.n	8002d68 <HAL_PCDEx_PMAConfig+0x1a>
	...

08002d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d88:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <RCC_Delay+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a08      	ldr	r2, [pc, #32]	@ (8002db0 <RCC_Delay+0x28>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	0a5b      	lsrs	r3, r3, #9
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002d9c:	bf00      	nop
  }
  while (Delay --);
 8002d9e:	9b01      	ldr	r3, [sp, #4]
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	9201      	str	r2, [sp, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <RCC_Delay+0x14>
}
 8002da8:	b002      	add	sp, #8
 8002daa:	4770      	bx	lr
 8002dac:	20000008 	.word	0x20000008
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002db4:	2800      	cmp	r0, #0
 8002db6:	f000 81f1 	beq.w	800319c <HAL_RCC_OscConfig+0x3e8>
{
 8002dba:	b570      	push	{r4, r5, r6, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc0:	6803      	ldr	r3, [r0, #0]
 8002dc2:	f013 0f01 	tst.w	r3, #1
 8002dc6:	d02c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc8:	4b99      	ldr	r3, [pc, #612]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d01d      	beq.n	8002e10 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dd4:	4b96      	ldr	r3, [pc, #600]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d012      	beq.n	8002e06 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	6863      	ldr	r3, [r4, #4]
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de6:	d041      	beq.n	8002e6c <HAL_RCC_OscConfig+0xb8>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d155      	bne.n	8002e98 <HAL_RCC_OscConfig+0xe4>
 8002dec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002df0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e037      	b.n	8002e76 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e06:	4b8a      	ldr	r3, [pc, #552]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002e0e:	d0e7      	beq.n	8002de0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b87      	ldr	r3, [pc, #540]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_OscConfig+0x6e>
 8002e1a:	6863      	ldr	r3, [r4, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 81bf 	beq.w	80031a0 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	f013 0f02 	tst.w	r3, #2
 8002e28:	d075      	beq.n	8002f16 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e2a:	4b81      	ldr	r3, [pc, #516]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f013 0f0c 	tst.w	r3, #12
 8002e32:	d05f      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e34:	4b7e      	ldr	r3, [pc, #504]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d054      	beq.n	8002eea <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e40:	6923      	ldr	r3, [r4, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 808a 	beq.w	8002f5c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002e48:	4b7a      	ldr	r3, [pc, #488]	@ (8003034 <HAL_RCC_OscConfig+0x280>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fd1f 	bl	8001890 <HAL_GetTick>
 8002e52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	4b76      	ldr	r3, [pc, #472]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f013 0f02 	tst.w	r3, #2
 8002e5c:	d175      	bne.n	8002f4a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe fd17 	bl	8001890 <HAL_GetTick>
 8002e62:	1b40      	subs	r0, r0, r5
 8002e64:	2802      	cmp	r0, #2
 8002e66:	d9f5      	bls.n	8002e54 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
 8002e6a:	e19e      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	4a70      	ldr	r2, [pc, #448]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e76:	6863      	ldr	r3, [r4, #4]
 8002e78:	b343      	cbz	r3, 8002ecc <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fd09 	bl	8001890 <HAL_GetTick>
 8002e7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e80:	4b6b      	ldr	r3, [pc, #428]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002e88:	d1cb      	bne.n	8002e22 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fd01 	bl	8001890 <HAL_GetTick>
 8002e8e:	1b40      	subs	r0, r0, r5
 8002e90:	2864      	cmp	r0, #100	@ 0x64
 8002e92:	d9f5      	bls.n	8002e80 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002e94:	2003      	movs	r0, #3
 8002e96:	e188      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_OscConfig+0xfe>
 8002e9e:	4b64      	ldr	r3, [pc, #400]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e7e1      	b.n	8002e76 <HAL_RCC_OscConfig+0xc2>
 8002eb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eb6:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e7d4      	b.n	8002e76 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fce0 	bl	8001890 <HAL_GetTick>
 8002ed0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	4b57      	ldr	r3, [pc, #348]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002eda:	d0a2      	beq.n	8002e22 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fcd8 	bl	8001890 <HAL_GetTick>
 8002ee0:	1b40      	subs	r0, r0, r5
 8002ee2:	2864      	cmp	r0, #100	@ 0x64
 8002ee4:	d9f5      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002ee6:	2003      	movs	r0, #3
 8002ee8:	e15f      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eea:	4b51      	ldr	r3, [pc, #324]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002ef2:	d1a5      	bne.n	8002e40 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f013 0f02 	tst.w	r3, #2
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_OscConfig+0x152>
 8002efe:	6923      	ldr	r3, [r4, #16]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	f040 814f 	bne.w	80031a4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4a4a      	ldr	r2, [pc, #296]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002f08:	6813      	ldr	r3, [r2, #0]
 8002f0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002f0e:	6961      	ldr	r1, [r4, #20]
 8002f10:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f14:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	f013 0f08 	tst.w	r3, #8
 8002f1c:	d033      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1e:	69a3      	ldr	r3, [r4, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d05c      	beq.n	8002fde <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002f24:	4b43      	ldr	r3, [pc, #268]	@ (8003034 <HAL_RCC_OscConfig+0x280>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fcb0 	bl	8001890 <HAL_GetTick>
 8002f30:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	4b3f      	ldr	r3, [pc, #252]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	f013 0f02 	tst.w	r3, #2
 8002f3a:	d121      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fca8 	bl	8001890 <HAL_GetTick>
 8002f40:	1b40      	subs	r0, r0, r5
 8002f42:	2802      	cmp	r0, #2
 8002f44:	d9f5      	bls.n	8002f32 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002f46:	2003      	movs	r0, #3
 8002f48:	e12f      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4a39      	ldr	r2, [pc, #228]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	6813      	ldr	r3, [r2, #0]
 8002f4e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002f52:	6961      	ldr	r1, [r4, #20]
 8002f54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e7dc      	b.n	8002f16 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002f5c:	4b35      	ldr	r3, [pc, #212]	@ (8003034 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f62:	f7fe fc95 	bl	8001890 <HAL_GetTick>
 8002f66:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f013 0f02 	tst.w	r3, #2
 8002f70:	d0d1      	beq.n	8002f16 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fc8d 	bl	8001890 <HAL_GetTick>
 8002f76:	1b40      	subs	r0, r0, r5
 8002f78:	2802      	cmp	r0, #2
 8002f7a:	d9f5      	bls.n	8002f68 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	e114      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7ff ff01 	bl	8002d88 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	f013 0f04 	tst.w	r3, #4
 8002f8c:	f000 8096 	beq.w	80030bc <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002f98:	d134      	bne.n	8003004 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002fa2:	61da      	str	r2, [r3, #28]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fae:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <HAL_RCC_OscConfig+0x284>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002fb8:	d026      	beq.n	8003008 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fba:	68e3      	ldr	r3, [r4, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d03d      	beq.n	800303c <HAL_RCC_OscConfig+0x288>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d153      	bne.n	800306c <HAL_RCC_OscConfig+0x2b8>
 8002fc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fc8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	621a      	str	r2, [r3, #32]
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	e033      	b.n	8003046 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002fe6:	f7fe fc53 	bl	8001890 <HAL_GetTick>
 8002fea:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <HAL_RCC_OscConfig+0x27c>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	f013 0f02 	tst.w	r3, #2
 8002ff4:	d0c7      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7fe fc4b 	bl	8001890 <HAL_GetTick>
 8002ffa:	1b40      	subs	r0, r0, r5
 8002ffc:	2802      	cmp	r0, #2
 8002ffe:	d9f5      	bls.n	8002fec <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8003000:	2003      	movs	r0, #3
 8003002:	e0d2      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003004:	2500      	movs	r5, #0
 8003006:	e7d3      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003008:	4a0b      	ldr	r2, [pc, #44]	@ (8003038 <HAL_RCC_OscConfig+0x284>)
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003010:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003012:	f7fe fc3d 	bl	8001890 <HAL_GetTick>
 8003016:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <HAL_RCC_OscConfig+0x284>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003020:	d1cb      	bne.n	8002fba <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fc35 	bl	8001890 <HAL_GetTick>
 8003026:	1b80      	subs	r0, r0, r6
 8003028:	2864      	cmp	r0, #100	@ 0x64
 800302a:	d9f5      	bls.n	8003018 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800302c:	2003      	movs	r0, #3
 800302e:	e0bc      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
 8003030:	40021000 	.word	0x40021000
 8003034:	42420000 	.word	0x42420000
 8003038:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303c:	4a5f      	ldr	r2, [pc, #380]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 800303e:	6a13      	ldr	r3, [r2, #32]
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003046:	68e3      	ldr	r3, [r4, #12]
 8003048:	b333      	cbz	r3, 8003098 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800304a:	f7fe fc21 	bl	8001890 <HAL_GetTick>
 800304e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b5a      	ldr	r3, [pc, #360]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f013 0f02 	tst.w	r3, #2
 8003058:	d12f      	bne.n	80030ba <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe fc19 	bl	8001890 <HAL_GetTick>
 800305e:	1b80      	subs	r0, r0, r6
 8003060:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003064:	4298      	cmp	r0, r3
 8003066:	d9f3      	bls.n	8003050 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003068:	2003      	movs	r0, #3
 800306a:	e09e      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306c:	2b05      	cmp	r3, #5
 800306e:	d009      	beq.n	8003084 <HAL_RCC_OscConfig+0x2d0>
 8003070:	4b52      	ldr	r3, [pc, #328]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	621a      	str	r2, [r3, #32]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	f022 0204 	bic.w	r2, r2, #4
 8003080:	621a      	str	r2, [r3, #32]
 8003082:	e7e0      	b.n	8003046 <HAL_RCC_OscConfig+0x292>
 8003084:	4b4d      	ldr	r3, [pc, #308]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	f042 0204 	orr.w	r2, r2, #4
 800308c:	621a      	str	r2, [r3, #32]
 800308e:	6a1a      	ldr	r2, [r3, #32]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	621a      	str	r2, [r3, #32]
 8003096:	e7d6      	b.n	8003046 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003098:	f7fe fbfa 	bl	8001890 <HAL_GetTick>
 800309c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f013 0f02 	tst.w	r3, #2
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7fe fbf2 	bl	8001890 <HAL_GetTick>
 80030ac:	1b80      	subs	r0, r0, r6
 80030ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030b2:	4298      	cmp	r0, r3
 80030b4:	d9f3      	bls.n	800309e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80030b6:	2003      	movs	r0, #3
 80030b8:	e077      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80030ba:	b9e5      	cbnz	r5, 80030f6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030bc:	69e3      	ldr	r3, [r4, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d072      	beq.n	80031a8 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c2:	4a3e      	ldr	r2, [pc, #248]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 80030c4:	6852      	ldr	r2, [r2, #4]
 80030c6:	f002 020c 	and.w	r2, r2, #12
 80030ca:	2a08      	cmp	r2, #8
 80030cc:	d056      	beq.n	800317c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d017      	beq.n	8003102 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <HAL_RCC_OscConfig+0x40c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80030d8:	f7fe fbda 	bl	8001890 <HAL_GetTick>
 80030dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030de:	4b37      	ldr	r3, [pc, #220]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80030e6:	d047      	beq.n	8003178 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fbd2 	bl	8001890 <HAL_GetTick>
 80030ec:	1b00      	subs	r0, r0, r4
 80030ee:	2802      	cmp	r0, #2
 80030f0:	d9f5      	bls.n	80030de <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80030f2:	2003      	movs	r0, #3
 80030f4:	e059      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f6:	4a31      	ldr	r2, [pc, #196]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 80030f8:	69d3      	ldr	r3, [r2, #28]
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	61d3      	str	r3, [r2, #28]
 8003100:	e7dc      	b.n	80030bc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <HAL_RCC_OscConfig+0x40c>)
 8003104:	2200      	movs	r2, #0
 8003106:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003108:	f7fe fbc2 	bl	8001890 <HAL_GetTick>
 800310c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310e:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003116:	d006      	beq.n	8003126 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fbba 	bl	8001890 <HAL_GetTick>
 800311c:	1b40      	subs	r0, r0, r5
 800311e:	2802      	cmp	r0, #2
 8003120:	d9f5      	bls.n	800310e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003122:	2003      	movs	r0, #3
 8003124:	e041      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003126:	6a23      	ldr	r3, [r4, #32]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800312c:	d01a      	beq.n	8003164 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800312e:	4923      	ldr	r1, [pc, #140]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 8003130:	684b      	ldr	r3, [r1, #4]
 8003132:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8003136:	6a22      	ldr	r2, [r4, #32]
 8003138:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800313a:	4302      	orrs	r2, r0
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b1f      	ldr	r3, [pc, #124]	@ (80031c0 <HAL_RCC_OscConfig+0x40c>)
 8003142:	2201      	movs	r2, #1
 8003144:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003146:	f7fe fba3 	bl	8001890 <HAL_GetTick>
 800314a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003154:	d10e      	bne.n	8003174 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe fb9b 	bl	8001890 <HAL_GetTick>
 800315a:	1b00      	subs	r0, r0, r4
 800315c:	2802      	cmp	r0, #2
 800315e:	d9f5      	bls.n	800314c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003160:	2003      	movs	r0, #3
 8003162:	e022      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003164:	4a15      	ldr	r2, [pc, #84]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 8003166:	6853      	ldr	r3, [r2, #4]
 8003168:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800316c:	68a1      	ldr	r1, [r4, #8]
 800316e:	430b      	orrs	r3, r1
 8003170:	6053      	str	r3, [r2, #4]
 8003172:	e7dc      	b.n	800312e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003174:	2000      	movs	r0, #0
 8003176:	e018      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
 8003178:	2000      	movs	r0, #0
 800317a:	e016      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317c:	2b01      	cmp	r3, #1
 800317e:	d016      	beq.n	80031ae <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003180:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <HAL_RCC_OscConfig+0x408>)
 8003182:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003184:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8003188:	6a22      	ldr	r2, [r4, #32]
 800318a:	4291      	cmp	r1, r2
 800318c:	d111      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800318e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003192:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003194:	4293      	cmp	r3, r2
 8003196:	d10e      	bne.n	80031b6 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003198:	2000      	movs	r0, #0
 800319a:	e006      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800319c:	2001      	movs	r0, #1
}
 800319e:	4770      	bx	lr
        return HAL_ERROR;
 80031a0:	2001      	movs	r0, #1
 80031a2:	e002      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80031a8:	2000      	movs	r0, #0
}
 80031aa:	b002      	add	sp, #8
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80031ae:	2001      	movs	r0, #1
 80031b0:	e7fb      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80031b2:	2001      	movs	r0, #1
 80031b4:	e7f9      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
 80031b6:	2001      	movs	r0, #1
 80031b8:	e7f7      	b.n	80031aa <HAL_RCC_OscConfig+0x3f6>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	42420000 	.word	0x42420000

080031c4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x40>)
 80031c6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80031c8:	f003 020c 	and.w	r2, r3, #12
 80031cc:	2a08      	cmp	r2, #8
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80031d0:	480d      	ldr	r0, [pc, #52]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80031d2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031d4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80031d8:	490c      	ldr	r1, [pc, #48]	@ (800320c <HAL_RCC_GetSysClockFreq+0x48>)
 80031da:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031dc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80031e0:	d00b      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031e2:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x40>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80031ea:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x4c>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ee:	4a06      	ldr	r2, [pc, #24]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x44>)
 80031f0:	fb02 f000 	mul.w	r0, r2, r0
 80031f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80031f8:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x50>)
 80031fc:	fb03 f000 	mul.w	r0, r3, r0
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	007a1200 	.word	0x007a1200
 800320c:	08006008 	.word	0x08006008
 8003210:	08006004 	.word	0x08006004
 8003214:	003d0900 	.word	0x003d0900

08003218 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003218:	2800      	cmp	r0, #0
 800321a:	f000 80a0 	beq.w	800335e <HAL_RCC_ClockConfig+0x146>
{
 800321e:	b570      	push	{r4, r5, r6, lr}
 8003220:	460d      	mov	r5, r1
 8003222:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b52      	ldr	r3, [pc, #328]	@ (8003370 <HAL_RCC_ClockConfig+0x158>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	428b      	cmp	r3, r1
 800322e:	d20b      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003230:	4a4f      	ldr	r2, [pc, #316]	@ (8003370 <HAL_RCC_ClockConfig+0x158>)
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	f023 0307 	bic.w	r3, r3, #7
 8003238:	430b      	orrs	r3, r1
 800323a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	428b      	cmp	r3, r1
 8003244:	f040 808d 	bne.w	8003362 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	f013 0f02 	tst.w	r3, #2
 800324e:	d017      	beq.n	8003280 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	f013 0f04 	tst.w	r3, #4
 8003254:	d004      	beq.n	8003260 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003256:	4a47      	ldr	r2, [pc, #284]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 8003258:	6853      	ldr	r3, [r2, #4]
 800325a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800325e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	f013 0f08 	tst.w	r3, #8
 8003266:	d004      	beq.n	8003272 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003268:	4a42      	ldr	r2, [pc, #264]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 800326a:	6853      	ldr	r3, [r2, #4]
 800326c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003270:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003272:	4a40      	ldr	r2, [pc, #256]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 8003274:	6853      	ldr	r3, [r2, #4]
 8003276:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800327a:	68a1      	ldr	r1, [r4, #8]
 800327c:	430b      	orrs	r3, r1
 800327e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f013 0f01 	tst.w	r3, #1
 8003286:	d031      	beq.n	80032ec <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003288:	6863      	ldr	r3, [r4, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d020      	beq.n	80032d0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	2b02      	cmp	r3, #2
 8003290:	d025      	beq.n	80032de <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4a38      	ldr	r2, [pc, #224]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	f012 0f02 	tst.w	r2, #2
 800329a:	d064      	beq.n	8003366 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329c:	4935      	ldr	r1, [pc, #212]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 800329e:	684a      	ldr	r2, [r1, #4]
 80032a0:	f022 0203 	bic.w	r2, r2, #3
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80032a8:	f7fe faf2 	bl	8001890 <HAL_GetTick>
 80032ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b31      	ldr	r3, [pc, #196]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	6862      	ldr	r2, [r4, #4]
 80032b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032bc:	d016      	beq.n	80032ec <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032be:	f7fe fae7 	bl	8001890 <HAL_GetTick>
 80032c2:	1b80      	subs	r0, r0, r6
 80032c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032c8:	4298      	cmp	r0, r3
 80032ca:	d9f0      	bls.n	80032ae <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80032cc:	2003      	movs	r0, #3
 80032ce:	e045      	b.n	800335c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d0:	4a28      	ldr	r2, [pc, #160]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80032d8:	d1e0      	bne.n	800329c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80032da:	2001      	movs	r0, #1
 80032dc:	e03e      	b.n	800335c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80032e6:	d1d9      	bne.n	800329c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80032e8:	2001      	movs	r0, #1
 80032ea:	e037      	b.n	800335c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_RCC_ClockConfig+0x158>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	d90a      	bls.n	800330e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <HAL_RCC_ClockConfig+0x158>)
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	f023 0307 	bic.w	r3, r3, #7
 8003300:	432b      	orrs	r3, r5
 8003302:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003304:	6813      	ldr	r3, [r2, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	42ab      	cmp	r3, r5
 800330c:	d12d      	bne.n	800336a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	f013 0f04 	tst.w	r3, #4
 8003314:	d006      	beq.n	8003324 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003316:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 8003318:	6853      	ldr	r3, [r2, #4]
 800331a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800331e:	68e1      	ldr	r1, [r4, #12]
 8003320:	430b      	orrs	r3, r1
 8003322:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	f013 0f08 	tst.w	r3, #8
 800332a:	d007      	beq.n	800333c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800332c:	4a11      	ldr	r2, [pc, #68]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 800332e:	6853      	ldr	r3, [r2, #4]
 8003330:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003334:	6921      	ldr	r1, [r4, #16]
 8003336:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800333a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333c:	f7ff ff42 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <HAL_RCC_ClockConfig+0x15c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003348:	4a0b      	ldr	r2, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x160>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	40d8      	lsrs	r0, r3
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_ClockConfig+0x164>)
 8003350:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003352:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_RCC_ClockConfig+0x168>)
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	f7fe fa57 	bl	8001808 <HAL_InitTick>
  return HAL_OK;
 800335a:	2000      	movs	r0, #0
}
 800335c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800335e:	2001      	movs	r0, #1
}
 8003360:	4770      	bx	lr
    return HAL_ERROR;
 8003362:	2001      	movs	r0, #1
 8003364:	e7fa      	b.n	800335c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003366:	2001      	movs	r0, #1
 8003368:	e7f8      	b.n	800335c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800336a:	2001      	movs	r0, #1
 800336c:	e7f6      	b.n	800335c <HAL_RCC_ClockConfig+0x144>
 800336e:	bf00      	nop
 8003370:	40022000 	.word	0x40022000
 8003374:	40021000 	.word	0x40021000
 8003378:	08006018 	.word	0x08006018
 800337c:	20000008 	.word	0x20000008
 8003380:	20000004 	.word	0x20000004

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800338a:	6803      	ldr	r3, [r0, #0]
 800338c:	f013 0f01 	tst.w	r3, #1
 8003390:	d036      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b3f      	ldr	r3, [pc, #252]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800339a:	d149      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b3c      	ldr	r3, [pc, #240]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80033a4:	61da      	str	r2, [r3, #28]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80033b0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b38      	ldr	r3, [pc, #224]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80033ba:	d03b      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033bc:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80033c4:	d013      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80033c6:	6862      	ldr	r2, [r4, #4]
 80033c8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d00e      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80033d2:	6a13      	ldr	r3, [r2, #32]
 80033d4:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033d8:	492f      	ldr	r1, [pc, #188]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80033da:	2601      	movs	r6, #1
 80033dc:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e0:	2600      	movs	r6, #0
 80033e2:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033e6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033e8:	f013 0f01 	tst.w	r3, #1
 80033ec:	d136      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ee:	4a28      	ldr	r2, [pc, #160]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80033f0:	6a13      	ldr	r3, [r2, #32]
 80033f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f6:	6861      	ldr	r1, [r4, #4]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033fc:	2d00      	cmp	r5, #0
 80033fe:	d13e      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	f013 0f02 	tst.w	r3, #2
 8003406:	d006      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003408:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800340a:	6853      	ldr	r3, [r2, #4]
 800340c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003410:	68a1      	ldr	r1, [r4, #8]
 8003412:	430b      	orrs	r3, r1
 8003414:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	f013 0f10 	tst.w	r3, #16
 800341c:	d034      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800341e:	4a1c      	ldr	r2, [pc, #112]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003420:	6853      	ldr	r3, [r2, #4]
 8003422:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003426:	68e1      	ldr	r1, [r4, #12]
 8003428:	430b      	orrs	r3, r1
 800342a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800342c:	2000      	movs	r0, #0
 800342e:	e02c      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8003430:	2500      	movs	r5, #0
 8003432:	e7be      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003434:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800343e:	f7fe fa27 	bl	8001890 <HAL_GetTick>
 8003442:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800344c:	d1b6      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344e:	f7fe fa1f 	bl	8001890 <HAL_GetTick>
 8003452:	1b80      	subs	r0, r0, r6
 8003454:	2864      	cmp	r0, #100	@ 0x64
 8003456:	d9f5      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003458:	2003      	movs	r0, #3
 800345a:	e016      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800345c:	f7fe fa18 	bl	8001890 <HAL_GetTick>
 8003460:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003462:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f013 0f02 	tst.w	r3, #2
 800346a:	d1c0      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe fa10 	bl	8001890 <HAL_GetTick>
 8003470:	1b80      	subs	r0, r0, r6
 8003472:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003476:	4298      	cmp	r0, r3
 8003478:	d9f3      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800347a:	2003      	movs	r0, #3
 800347c:	e005      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	69d3      	ldr	r3, [r2, #28]
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003484:	61d3      	str	r3, [r2, #28]
 8003486:	e7bb      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8003488:	2000      	movs	r0, #0
}
 800348a:	b002      	add	sp, #8
 800348c:	bd70      	pop	{r4, r5, r6, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420000 	.word	0x42420000

0800349c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a0:	6a03      	ldr	r3, [r0, #32]
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034ac:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b0:	680c      	ldr	r4, [r1, #0]
 80034b2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034b4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034b8:	688b      	ldr	r3, [r1, #8]
 80034ba:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034bc:	4a0b      	ldr	r2, [pc, #44]	@ (80034ec <TIM_OC1_SetConfig+0x50>)
 80034be:	4290      	cmp	r0, r2
 80034c0:	d006      	beq.n	80034d0 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c4:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c6:	684a      	ldr	r2, [r1, #4]
 80034c8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	6203      	str	r3, [r0, #32]
}
 80034cc:	bc30      	pop	{r4, r5}
 80034ce:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80034d4:	68ca      	ldr	r2, [r1, #12]
 80034d6:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80034d8:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034dc:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80034e0:	694a      	ldr	r2, [r1, #20]
 80034e2:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80034e4:	698d      	ldr	r5, [r1, #24]
 80034e6:	4315      	orrs	r5, r2
 80034e8:	e7eb      	b.n	80034c2 <TIM_OC1_SetConfig+0x26>
 80034ea:	bf00      	nop
 80034ec:	40012c00 	.word	0x40012c00

080034f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f4:	6a02      	ldr	r2, [r0, #32]
 80034f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034fa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003500:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003504:	680d      	ldr	r5, [r1, #0]
 8003506:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800350c:	688a      	ldr	r2, [r1, #8]
 800350e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003512:	4a0d      	ldr	r2, [pc, #52]	@ (8003548 <TIM_OC3_SetConfig+0x58>)
 8003514:	4290      	cmp	r0, r2
 8003516:	d006      	beq.n	8003526 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003518:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351c:	684a      	ldr	r2, [r1, #4]
 800351e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003520:	6203      	str	r3, [r0, #32]
}
 8003522:	bc30      	pop	{r4, r5}
 8003524:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800352a:	68ca      	ldr	r2, [r1, #12]
 800352c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003534:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003538:	694a      	ldr	r2, [r1, #20]
 800353a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800353e:	698a      	ldr	r2, [r1, #24]
 8003540:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003544:	e7e8      	b.n	8003518 <TIM_OC3_SetConfig+0x28>
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00

0800354c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003550:	6a02      	ldr	r2, [r0, #32]
 8003552:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003556:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800355c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	680d      	ldr	r5, [r1, #0]
 8003562:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003566:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800356a:	688d      	ldr	r5, [r1, #8]
 800356c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	4d07      	ldr	r5, [pc, #28]	@ (8003590 <TIM_OC4_SetConfig+0x44>)
 8003572:	42a8      	cmp	r0, r5
 8003574:	d006      	beq.n	8003584 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003578:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800357a:	684a      	ldr	r2, [r1, #4]
 800357c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357e:	6203      	str	r3, [r0, #32]
}
 8003580:	bc30      	pop	{r4, r5}
 8003582:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003584:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003588:	694d      	ldr	r5, [r1, #20]
 800358a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800358e:	e7f2      	b.n	8003576 <TIM_OC4_SetConfig+0x2a>
 8003590:	40012c00 	.word	0x40012c00

08003594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003594:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003596:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003598:	6a04      	ldr	r4, [r0, #32]
 800359a:	f024 0401 	bic.w	r4, r4, #1
 800359e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035aa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80035ae:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80035b2:	6203      	str	r3, [r0, #32]
}
 80035b4:	bc10      	pop	{r4}
 80035b6:	4770      	bx	lr

080035b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035bc:	6a04      	ldr	r4, [r0, #32]
 80035be:	f024 0410 	bic.w	r4, r4, #16
 80035c2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c6:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ca:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035d6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80035d8:	6203      	str	r3, [r0, #32]
}
 80035da:	bc10      	pop	{r4}
 80035dc:	4770      	bx	lr

080035de <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035de:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035e4:	430b      	orrs	r3, r1
 80035e6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ea:	6083      	str	r3, [r0, #8]
}
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80035f0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d127      	bne.n	800364a <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80035fa:	2302      	movs	r3, #2
 80035fc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003600:	6802      	ldr	r2, [r0, #0]
 8003602:	68d3      	ldr	r3, [r2, #12]
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360a:	6803      	ldr	r3, [r0, #0]
 800360c:	4a11      	ldr	r2, [pc, #68]	@ (8003654 <HAL_TIM_Base_Start_IT+0x64>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d010      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x44>
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d00d      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x44>
 8003618:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800361c:	4293      	cmp	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x44>
 8003620:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003624:	4293      	cmp	r3, r2
 8003626:	d005      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003630:	2000      	movs	r0, #0
 8003632:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363a:	2a06      	cmp	r2, #6
 800363c:	d007      	beq.n	800364e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003646:	2000      	movs	r0, #0
 8003648:	4770      	bx	lr
    return HAL_ERROR;
 800364a:	2001      	movs	r0, #1
 800364c:	4770      	bx	lr
  return HAL_OK;
 800364e:	2000      	movs	r0, #0
}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40012c00 	.word	0x40012c00

08003658 <HAL_TIM_PWM_MspInit>:
}
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_PeriodElapsedCallback>:
}
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_IC_CaptureCallback>:
}
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_TriggerCallback>:
}
 8003662:	4770      	bx	lr

08003664 <HAL_TIM_IRQHandler>:
{
 8003664:	b510      	push	{r4, lr}
 8003666:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003668:	6803      	ldr	r3, [r0, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	f012 0f02 	tst.w	r2, #2
 8003670:	d011      	beq.n	8003696 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	f012 0f02 	tst.w	r2, #2
 8003678:	d00d      	beq.n	8003696 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800367a:	f06f 0202 	mvn.w	r2, #2
 800367e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003680:	2301      	movs	r3, #1
 8003682:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003684:	6803      	ldr	r3, [r0, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f013 0f03 	tst.w	r3, #3
 800368c:	d070      	beq.n	8003770 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800368e:	f7ff ffe6 	bl	800365e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	2300      	movs	r3, #0
 8003694:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	f012 0f04 	tst.w	r2, #4
 800369e:	d012      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	f012 0f04 	tst.w	r2, #4
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a8:	f06f 0204 	mvn.w	r2, #4
 80036ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ae:	2302      	movs	r3, #2
 80036b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80036ba:	d05f      	beq.n	800377c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff ffce 	bl	800365e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	2300      	movs	r3, #0
 80036c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	f012 0f08 	tst.w	r2, #8
 80036ce:	d012      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	f012 0f08 	tst.w	r2, #8
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d8:	f06f 0208 	mvn.w	r2, #8
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036de:	2304      	movs	r3, #4
 80036e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f013 0f03 	tst.w	r3, #3
 80036ea:	d04e      	beq.n	800378a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff ffb6 	bl	800365e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	2300      	movs	r3, #0
 80036f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	f012 0f10 	tst.w	r2, #16
 80036fe:	d012      	beq.n	8003726 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	f012 0f10 	tst.w	r2, #16
 8003706:	d00e      	beq.n	8003726 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	2308      	movs	r3, #8
 8003710:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800371a:	d03d      	beq.n	8003798 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff ff9e 	bl	800365e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003722:	2300      	movs	r3, #0
 8003724:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	f012 0f01 	tst.w	r2, #1
 800372e:	d003      	beq.n	8003738 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	f012 0f01 	tst.w	r2, #1
 8003736:	d136      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003748:	d134      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003752:	d003      	beq.n	800375c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800375a:	d132      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	f012 0f20 	tst.w	r2, #32
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	f012 0f20 	tst.w	r2, #32
 800376c:	d130      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x16c>
}
 800376e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003770:	f7ff ff74 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff ff73 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
 800377a:	e78a      	b.n	8003692 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377c:	4620      	mov	r0, r4
 800377e:	f7ff ff6d 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff ff6c 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
 8003788:	e79b      	b.n	80036c2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	4620      	mov	r0, r4
 800378c:	f7ff ff66 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff ff65 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
 8003796:	e7ac      	b.n	80036f2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ff5f 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379e:	4620      	mov	r0, r4
 80037a0:	f7ff ff5e 	bl	8003660 <HAL_TIM_PWM_PulseFinishedCallback>
 80037a4:	e7bd      	b.n	8003722 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a6:	f06f 0201 	mvn.w	r2, #1
 80037aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff ff54 	bl	800365a <HAL_TIM_PeriodElapsedCallback>
 80037b2:	e7c1      	b.n	8003738 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 fb3f 	bl	8003e3e <HAL_TIMEx_BreakCallback>
 80037c0:	e7c3      	b.n	800374a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff ff4a 	bl	8003662 <HAL_TIM_TriggerCallback>
 80037ce:	e7c5      	b.n	800375c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d0:	f06f 0220 	mvn.w	r2, #32
 80037d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 fb30 	bl	8003e3c <HAL_TIMEx_CommutCallback>
}
 80037dc:	e7c7      	b.n	800376e <HAL_TIM_IRQHandler+0x10a>
	...

080037e0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80037e0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003850 <TIM_Base_SetConfig+0x70>)
 80037e4:	4290      	cmp	r0, r2
 80037e6:	d00a      	beq.n	80037fe <TIM_Base_SetConfig+0x1e>
 80037e8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0x1e>
 80037ee:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80037f2:	4290      	cmp	r0, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0x1e>
 80037f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037fa:	4290      	cmp	r0, r2
 80037fc:	d103      	bne.n	8003806 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003802:	684a      	ldr	r2, [r1, #4]
 8003804:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	4a12      	ldr	r2, [pc, #72]	@ (8003850 <TIM_Base_SetConfig+0x70>)
 8003808:	4290      	cmp	r0, r2
 800380a:	d00a      	beq.n	8003822 <TIM_Base_SetConfig+0x42>
 800380c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0x42>
 8003812:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003816:	4290      	cmp	r0, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0x42>
 800381a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800381e:	4290      	cmp	r0, r2
 8003820:	d103      	bne.n	800382a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003826:	68ca      	ldr	r2, [r1, #12]
 8003828:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800382a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800382e:	694a      	ldr	r2, [r1, #20]
 8003830:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003832:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003834:	688b      	ldr	r3, [r1, #8]
 8003836:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003838:	680b      	ldr	r3, [r1, #0]
 800383a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <TIM_Base_SetConfig+0x70>)
 800383e:	4298      	cmp	r0, r3
 8003840:	d002      	beq.n	8003848 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8003842:	2301      	movs	r3, #1
 8003844:	6143      	str	r3, [r0, #20]
}
 8003846:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003848:	690b      	ldr	r3, [r1, #16]
 800384a:	6303      	str	r3, [r0, #48]	@ 0x30
 800384c:	e7f9      	b.n	8003842 <TIM_Base_SetConfig+0x62>
 800384e:	bf00      	nop
 8003850:	40012c00 	.word	0x40012c00

08003854 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003854:	b340      	cbz	r0, 80038a8 <HAL_TIM_Base_Init+0x54>
{
 8003856:	b510      	push	{r4, lr}
 8003858:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800385e:	b1f3      	cbz	r3, 800389e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003866:	4621      	mov	r1, r4
 8003868:	f851 0b04 	ldr.w	r0, [r1], #4
 800386c:	f7ff ffb8 	bl	80037e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003870:	2301      	movs	r3, #1
 8003872:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800387a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800387e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003882:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800388a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800388e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003892:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003896:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800389a:	2000      	movs	r0, #0
}
 800389c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800389e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80038a2:	f7fe f9d7 	bl	8001c54 <HAL_TIM_Base_MspInit>
 80038a6:	e7db      	b.n	8003860 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
}
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80038ac:	b340      	cbz	r0, 8003900 <HAL_TIM_PWM_Init+0x54>
{
 80038ae:	b510      	push	{r4, lr}
 80038b0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80038b6:	b1f3      	cbz	r3, 80038f6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	2302      	movs	r3, #2
 80038ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038be:	4621      	mov	r1, r4
 80038c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80038c4:	f7ff ff8c 	bl	80037e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80038d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80038d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80038da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80038ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80038ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80038f2:	2000      	movs	r0, #0
}
 80038f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80038f6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80038fa:	f7ff fead 	bl	8003658 <HAL_TIM_PWM_MspInit>
 80038fe:	e7db      	b.n	80038b8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003900:	2001      	movs	r0, #1
}
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003904:	2800      	cmp	r0, #0
 8003906:	d056      	beq.n	80039b6 <HAL_TIM_Encoder_Init+0xb2>
{
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	460d      	mov	r5, r1
 800390c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04a      	beq.n	80039ac <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	2302      	movs	r3, #2
 8003918:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	6893      	ldr	r3, [r2, #8]
 8003920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003924:	f023 0307 	bic.w	r3, r3, #7
 8003928:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392a:	4621      	mov	r1, r4
 800392c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003930:	f7ff ff56 	bl	80037e0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003934:	6821      	ldr	r1, [r4, #0]
 8003936:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003938:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 800393a:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800393c:	6828      	ldr	r0, [r5, #0]
 800393e:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003940:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003944:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003948:	68ab      	ldr	r3, [r5, #8]
 800394a:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800394e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003952:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003954:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8003958:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800395c:	68ea      	ldr	r2, [r5, #12]
 800395e:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8003962:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8003966:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003968:	6a2b      	ldr	r3, [r5, #32]
 800396a:	031b      	lsls	r3, r3, #12
 800396c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003970:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8003974:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003976:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800397a:	686a      	ldr	r2, [r5, #4]
 800397c:	696d      	ldr	r5, [r5, #20]
 800397e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003982:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8003984:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003986:	6821      	ldr	r1, [r4, #0]
 8003988:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398e:	2301      	movs	r3, #1
 8003990:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80039a8:	2000      	movs	r0, #0
}
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80039ac:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80039b0:	f7fe f922 	bl	8001bf8 <HAL_TIM_Encoder_MspInit>
 80039b4:	e7af      	b.n	8003916 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 80039b6:	2001      	movs	r0, #1
}
 80039b8:	4770      	bx	lr
	...

080039bc <TIM_OC2_SetConfig>:
{
 80039bc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80039be:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c0:	6a02      	ldr	r2, [r0, #32]
 80039c2:	f022 0210 	bic.w	r2, r2, #16
 80039c6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80039c8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80039ca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039cc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	680d      	ldr	r5, [r1, #0]
 80039d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80039d6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039da:	688d      	ldr	r5, [r1, #8]
 80039dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039e0:	4d0c      	ldr	r5, [pc, #48]	@ (8003a14 <TIM_OC2_SetConfig+0x58>)
 80039e2:	42a8      	cmp	r0, r5
 80039e4:	d006      	beq.n	80039f4 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80039e6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80039e8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80039ea:	684a      	ldr	r2, [r1, #4]
 80039ec:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80039ee:	6203      	str	r3, [r0, #32]
}
 80039f0:	bc30      	pop	{r4, r5}
 80039f2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80039f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039f8:	68cd      	ldr	r5, [r1, #12]
 80039fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80039fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a02:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a06:	694d      	ldr	r5, [r1, #20]
 8003a08:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a0c:	698d      	ldr	r5, [r1, #24]
 8003a0e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003a12:	e7e8      	b.n	80039e6 <TIM_OC2_SetConfig+0x2a>
 8003a14:	40012c00 	.word	0x40012c00

08003a18 <HAL_TIM_PWM_ConfigChannel>:
{
 8003a18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003a1a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d066      	beq.n	8003af0 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003a22:	4604      	mov	r4, r0
 8003a24:	460d      	mov	r5, r1
 8003a26:	2301      	movs	r3, #1
 8003a28:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003a2c:	2a0c      	cmp	r2, #12
 8003a2e:	d85a      	bhi.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8003a30:	e8df f002 	tbb	[pc, r2]
 8003a34:	59595907 	.word	0x59595907
 8003a38:	5959591b 	.word	0x5959591b
 8003a3c:	59595930 	.word	0x59595930
 8003a40:	44          	.byte	0x44
 8003a41:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a42:	6800      	ldr	r0, [r0, #0]
 8003a44:	f7ff fd2a 	bl	800349c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	6993      	ldr	r3, [r2, #24]
 8003a4c:	f043 0308 	orr.w	r3, r3, #8
 8003a50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	6993      	ldr	r3, [r2, #24]
 8003a56:	f023 0304 	bic.w	r3, r3, #4
 8003a5a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	6993      	ldr	r3, [r2, #24]
 8003a60:	6929      	ldr	r1, [r5, #16]
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2000      	movs	r0, #0
      break;
 8003a68:	e03e      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	f7ff ffa6 	bl	80039bc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	6993      	ldr	r3, [r2, #24]
 8003a74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a78:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	6993      	ldr	r3, [r2, #24]
 8003a7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a82:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	6993      	ldr	r3, [r2, #24]
 8003a88:	6929      	ldr	r1, [r5, #16]
 8003a8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a8e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2000      	movs	r0, #0
      break;
 8003a92:	e029      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a94:	6800      	ldr	r0, [r0, #0]
 8003a96:	f7ff fd2b 	bl	80034f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	69d3      	ldr	r3, [r2, #28]
 8003a9e:	f043 0308 	orr.w	r3, r3, #8
 8003aa2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	69d3      	ldr	r3, [r2, #28]
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	69d3      	ldr	r3, [r2, #28]
 8003ab2:	6929      	ldr	r1, [r5, #16]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2000      	movs	r0, #0
      break;
 8003aba:	e015      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003abc:	6800      	ldr	r0, [r0, #0]
 8003abe:	f7ff fd45 	bl	800354c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	69d3      	ldr	r3, [r2, #28]
 8003ac6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003aca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	69d3      	ldr	r3, [r2, #28]
 8003ad0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ad4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	69d3      	ldr	r3, [r2, #28]
 8003ada:	6929      	ldr	r1, [r5, #16]
 8003adc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ae0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2000      	movs	r0, #0
      break;
 8003ae4:	e000      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003ae6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003af0:	2002      	movs	r0, #2
 8003af2:	e7fc      	b.n	8003aee <HAL_TIM_PWM_ConfigChannel+0xd6>

08003af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003afc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003b00:	430a      	orrs	r2, r1
 8003b02:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	6082      	str	r2, [r0, #8]
}
 8003b08:	bc10      	pop	{r4}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003b0c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d078      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003b14:	b510      	push	{r4, lr}
 8003b16:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003b24:	6802      	ldr	r2, [r0, #0]
 8003b26:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b2c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003b30:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003b32:	680b      	ldr	r3, [r1, #0]
 8003b34:	2b60      	cmp	r3, #96	@ 0x60
 8003b36:	d04c      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0xc6>
 8003b38:	d823      	bhi.n	8003b82 <HAL_TIM_ConfigClockSource+0x76>
 8003b3a:	2b40      	cmp	r3, #64	@ 0x40
 8003b3c:	d054      	beq.n	8003be8 <HAL_TIM_ConfigClockSource+0xdc>
 8003b3e:	d811      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x58>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d003      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0x40>
 8003b44:	d80a      	bhi.n	8003b5c <HAL_TIM_ConfigClockSource+0x50>
 8003b46:	b10b      	cbz	r3, 8003b4c <HAL_TIM_ConfigClockSource+0x40>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d105      	bne.n	8003b58 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6820      	ldr	r0, [r4, #0]
 8003b50:	f7ff fd45 	bl	80035de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2000      	movs	r0, #0
      break;
 8003b56:	e028      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003b58:	2001      	movs	r0, #1
 8003b5a:	e026      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003b5c:	2b30      	cmp	r3, #48	@ 0x30
 8003b5e:	d0f5      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8003b60:	2001      	movs	r0, #1
 8003b62:	e022      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d10a      	bne.n	8003b7e <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b68:	68ca      	ldr	r2, [r1, #12]
 8003b6a:	6849      	ldr	r1, [r1, #4]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f7ff fd11 	bl	8003594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b72:	2150      	movs	r1, #80	@ 0x50
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f7ff fd32 	bl	80035de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2000      	movs	r0, #0
      break;
 8003b7c:	e015      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e013      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b86:	d03a      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0xf2>
 8003b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8c:	d014      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xac>
 8003b8e:	2b70      	cmp	r3, #112	@ 0x70
 8003b90:	d137      	bne.n	8003c02 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003b92:	68cb      	ldr	r3, [r1, #12]
 8003b94:	684a      	ldr	r2, [r1, #4]
 8003b96:	6889      	ldr	r1, [r1, #8]
 8003b98:	6800      	ldr	r0, [r0, #0]
 8003b9a:	f7ff ffab 	bl	8003af4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003ba6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003bb6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	68cb      	ldr	r3, [r1, #12]
 8003bba:	684a      	ldr	r2, [r1, #4]
 8003bbc:	6889      	ldr	r1, [r1, #8]
 8003bbe:	6800      	ldr	r0, [r0, #0]
 8003bc0:	f7ff ff98 	bl	8003af4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	6893      	ldr	r3, [r2, #8]
 8003bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bcc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2000      	movs	r0, #0
      break;
 8003bd0:	e7eb      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bd2:	68ca      	ldr	r2, [r1, #12]
 8003bd4:	6849      	ldr	r1, [r1, #4]
 8003bd6:	6800      	ldr	r0, [r0, #0]
 8003bd8:	f7ff fcee 	bl	80035b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bdc:	2160      	movs	r1, #96	@ 0x60
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	f7ff fcfd 	bl	80035de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2000      	movs	r0, #0
      break;
 8003be6:	e7e0      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be8:	68ca      	ldr	r2, [r1, #12]
 8003bea:	6849      	ldr	r1, [r1, #4]
 8003bec:	6800      	ldr	r0, [r0, #0]
 8003bee:	f7ff fcd1 	bl	8003594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf2:	2140      	movs	r1, #64	@ 0x40
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	f7ff fcf2 	bl	80035de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2000      	movs	r0, #0
      break;
 8003bfc:	e7d5      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e7d3      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003c02:	2001      	movs	r0, #1
 8003c04:	e7d1      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003c06:	2002      	movs	r0, #2
}
 8003c08:	4770      	bx	lr

08003c0a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c0a:	f001 011f 	and.w	r1, r1, #31
 8003c0e:	f04f 0c01 	mov.w	ip, #1
 8003c12:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c16:	6a03      	ldr	r3, [r0, #32]
 8003c18:	ea23 030c 	bic.w	r3, r3, ip
 8003c1c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c1e:	6a03      	ldr	r3, [r0, #32]
 8003c20:	408a      	lsls	r2, r1
 8003c22:	4313      	orrs	r3, r2
 8003c24:	6203      	str	r3, [r0, #32]
}
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_PWM_Start>:
{
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	bb51      	cbnz	r1, 8003c86 <HAL_TIM_PWM_Start+0x5e>
 8003c30:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	bf18      	it	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d15b      	bne.n	8003cf8 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d139      	bne.n	8003cb8 <HAL_TIM_PWM_Start+0x90>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	f7ff ffdb 	bl	8003c0a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	4a2a      	ldr	r2, [pc, #168]	@ (8003d00 <HAL_TIM_PWM_Start+0xd8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d03d      	beq.n	8003cd8 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	4a28      	ldr	r2, [pc, #160]	@ (8003d00 <HAL_TIM_PWM_Start+0xd8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d03e      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xba>
 8003c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c68:	d03b      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xba>
 8003c6a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d037      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xba>
 8003c72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d033      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003c82:	2000      	movs	r0, #0
 8003c84:	e039      	b.n	8003cfa <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c86:	2904      	cmp	r1, #4
 8003c88:	d008      	beq.n	8003c9c <HAL_TIM_PWM_Start+0x74>
 8003c8a:	2908      	cmp	r1, #8
 8003c8c:	d00d      	beq.n	8003caa <HAL_TIM_PWM_Start+0x82>
 8003c8e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	bf18      	it	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	e7cf      	b.n	8003c3c <HAL_TIM_PWM_Start+0x14>
 8003c9c:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	e7c8      	b.n	8003c3c <HAL_TIM_PWM_Start+0x14>
 8003caa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	bf18      	it	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	e7c1      	b.n	8003c3c <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb8:	2804      	cmp	r0, #4
 8003cba:	d005      	beq.n	8003cc8 <HAL_TIM_PWM_Start+0xa0>
 8003cbc:	2808      	cmp	r0, #8
 8003cbe:	d007      	beq.n	8003cd0 <HAL_TIM_PWM_Start+0xa8>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003cc6:	e7c0      	b.n	8003c4a <HAL_TIM_PWM_Start+0x22>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003cce:	e7bc      	b.n	8003c4a <HAL_TIM_PWM_Start+0x22>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003cd6:	e7b8      	b.n	8003c4a <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cde:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ce0:	e7bc      	b.n	8003c5c <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	2a06      	cmp	r2, #6
 8003cea:	d007      	beq.n	8003cfc <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e000      	b.n	8003cfa <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8003cf8:	2001      	movs	r0, #1
}
 8003cfa:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e7fc      	b.n	8003cfa <HAL_TIM_PWM_Start+0xd2>
 8003d00:	40012c00 	.word	0x40012c00

08003d04 <HAL_TIM_Encoder_Start>:
{
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d08:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8003d0c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d0e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d12:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8003d16:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d18:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 8003d1c:	460d      	mov	r5, r1
 8003d1e:	b9b1      	cbnz	r1, 8003d4e <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d20:	2801      	cmp	r0, #1
 8003d22:	d149      	bne.n	8003db8 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d24:	2a01      	cmp	r2, #1
 8003d26:	d148      	bne.n	8003dba <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d28:	2302      	movs	r3, #2
 8003d2a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 8003d32:	b37d      	cbz	r5, 8003d94 <HAL_TIM_Encoder_Start+0x90>
 8003d34:	2d04      	cmp	r5, #4
 8003d36:	d039      	beq.n	8003dac <HAL_TIM_Encoder_Start+0xa8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6820      	ldr	r0, [r4, #0]
 8003d3e:	f7ff ff64 	bl	8003c0a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d42:	2201      	movs	r2, #1
 8003d44:	2104      	movs	r1, #4
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	f7ff ff5f 	bl	8003c0a <TIM_CCxChannelCmd>
      break;
 8003d4c:	e027      	b.n	8003d9e <HAL_TIM_Encoder_Start+0x9a>
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 8003d54:	2904      	cmp	r1, #4
 8003d56:	d012      	beq.n	8003d7e <HAL_TIM_Encoder_Start+0x7a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d58:	2801      	cmp	r0, #1
 8003d5a:	d133      	bne.n	8003dc4 <HAL_TIM_Encoder_Start+0xc0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d12c      	bne.n	8003dba <HAL_TIM_Encoder_Start+0xb6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d60:	2a01      	cmp	r2, #1
 8003d62:	d131      	bne.n	8003dc8 <HAL_TIM_Encoder_Start+0xc4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d64:	f1bc 0f01 	cmp.w	ip, #1
 8003d68:	d130      	bne.n	8003dcc <HAL_TIM_Encoder_Start+0xc8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d70:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d7c:	e7d9      	b.n	8003d32 <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d11c      	bne.n	8003dbc <HAL_TIM_Encoder_Start+0xb8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d82:	f1bc 0f01 	cmp.w	ip, #1
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d92:	e7ce      	b.n	8003d32 <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d94:	2201      	movs	r2, #1
 8003d96:	2100      	movs	r1, #0
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	f7ff ff36 	bl	8003c0a <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003da8:	2000      	movs	r0, #0
 8003daa:	e006      	b.n	8003dba <HAL_TIM_Encoder_Start+0xb6>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dac:	2201      	movs	r2, #1
 8003dae:	2104      	movs	r1, #4
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	f7ff ff2a 	bl	8003c0a <TIM_CCxChannelCmd>
      break;
 8003db6:	e7f2      	b.n	8003d9e <HAL_TIM_Encoder_Start+0x9a>
      return HAL_ERROR;
 8003db8:	2001      	movs	r0, #1
}
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	e7fc      	b.n	8003dba <HAL_TIM_Encoder_Start+0xb6>
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	e7fa      	b.n	8003dba <HAL_TIM_Encoder_Start+0xb6>
      return HAL_ERROR;
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	e7f8      	b.n	8003dba <HAL_TIM_Encoder_Start+0xb6>
 8003dc8:	4618      	mov	r0, r3
 8003dca:	e7f6      	b.n	8003dba <HAL_TIM_Encoder_Start+0xb6>
 8003dcc:	4610      	mov	r0, r2
 8003dce:	e7f4      	b.n	8003dba <HAL_TIM_Encoder_Start+0xb6>

08003dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dd0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003dd4:	2a01      	cmp	r2, #1
 8003dd6:	d02c      	beq.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8003dd8:	b410      	push	{r4}
 8003dda:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de2:	2202      	movs	r2, #2
 8003de4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de8:	6802      	ldr	r2, [r0, #0]
 8003dea:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dee:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df2:	6808      	ldr	r0, [r1, #0]
 8003df4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	480e      	ldr	r0, [pc, #56]	@ (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003dfe:	4282      	cmp	r2, r0
 8003e00:	d00a      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003e02:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003e06:	d007      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003e08:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003e0c:	4282      	cmp	r2, r0
 8003e0e:	d003      	beq.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003e10:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003e14:	4282      	cmp	r2, r0
 8003e16:	d104      	bne.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e18:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1c:	6849      	ldr	r1, [r1, #4]
 8003e1e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e20:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003e2e:	bc10      	pop	{r4}
 8003e30:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003e32:	2002      	movs	r0, #2
}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e3e:	4770      	bx	lr

08003e40 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e40:	e7fe      	b.n	8003e40 <NMI_Handler>

08003e42 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <HardFault_Handler>

08003e44 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <MemManage_Handler>

08003e46 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e46:	e7fe      	b.n	8003e46 <BusFault_Handler>

08003e48 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <UsageFault_Handler>

08003e4a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e4a:	4770      	bx	lr

08003e4c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e4c:	4770      	bx	lr

08003e4e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4e:	4770      	bx	lr

08003e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e52:	f7fd fd11 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e56:	bd08      	pop	{r3, pc}

08003e58 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003e5a:	4802      	ldr	r0, [pc, #8]	@ (8003e64 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8003e5c:	f7fe fd70 	bl	8002940 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003e60:	bd08      	pop	{r3, pc}
 8003e62:	bf00      	nop
 8003e64:	200010c0 	.word	0x200010c0

08003e68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e6a:	480a      	ldr	r0, [pc, #40]	@ (8003e94 <TIM3_IRQHandler+0x2c>)
 8003e6c:	f7ff fbfa 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  servo_positionLoop(&servo1);
 8003e70:	4809      	ldr	r0, [pc, #36]	@ (8003e98 <TIM3_IRQHandler+0x30>)
 8003e72:	f7fd fc45 	bl	8001700 <servo_positionLoop>
  if(tim3_loop_count == 3) {
 8003e76:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <TIM3_IRQHandler+0x34>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d003      	beq.n	8003e86 <TIM3_IRQHandler+0x1e>
    tim3_loop_count = 0;
    servo_velocityLoop(&servo1);
  }
  else { tim3_loop_count++; }
 8003e7e:	3301      	adds	r3, #1
 8003e80:	4a06      	ldr	r2, [pc, #24]	@ (8003e9c <TIM3_IRQHandler+0x34>)
 8003e82:	7013      	strb	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8003e84:	bd08      	pop	{r3, pc}
    tim3_loop_count = 0;
 8003e86:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <TIM3_IRQHandler+0x34>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
    servo_velocityLoop(&servo1);
 8003e8c:	4802      	ldr	r0, [pc, #8]	@ (8003e98 <TIM3_IRQHandler+0x30>)
 8003e8e:	f7fd fc67 	bl	8001760 <servo_velocityLoop>
 8003e92:	e7f7      	b.n	8003e84 <TIM3_IRQHandler+0x1c>
 8003e94:	200002f4 	.word	0x200002f4
 8003e98:	20000198 	.word	0x20000198
 8003e9c:	200003d0 	.word	0x200003d0

08003ea0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	a801      	add	r0, sp, #4
 8003ea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	b004      	add	sp, #16
 8003eac:	4770      	bx	lr

08003eae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003eae:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003eb6:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
 8003eba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8003ebe:	4770      	bx	lr

08003ec0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ec0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8003ec4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ec8:	045b      	lsls	r3, r3, #17
 8003eca:	0c5b      	lsrs	r3, r3, #17
 8003ecc:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	4770      	bx	lr

08003ed4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	4770      	bx	lr

08003ed8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ed8:	b084      	sub	sp, #16
 8003eda:	4684      	mov	ip, r0
 8003edc:	a801      	add	r0, sp, #4
 8003ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eee:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ef2:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 8003ef6:	b004      	add	sp, #16
 8003ef8:	4770      	bx	lr

08003efa <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003efa:	b510      	push	{r4, lr}
 8003efc:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003efe:	f891 c000 	ldrb.w	ip, [r1]
 8003f02:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8003f06:	b292      	uxth	r2, r2
 8003f08:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 8003f0c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f10:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8003f12:	78c8      	ldrb	r0, [r1, #3]
 8003f14:	2803      	cmp	r0, #3
 8003f16:	d861      	bhi.n	8003fdc <USB_ActivateEndpoint+0xe2>
 8003f18:	e8df f000 	tbb	[pc, r0]
 8003f1c:	58025c55 	.word	0x58025c55
 8003f20:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f22:	f248 0e80 	movw	lr, #32896	@ 0x8080
 8003f26:	ea42 020e 	orr.w	r2, r2, lr
 8003f2a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f2e:	f891 c000 	ldrb.w	ip, [r1]
 8003f32:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8003f36:	b292      	uxth	r2, r2
 8003f38:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003f3c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f40:	ea42 020c 	orr.w	r2, r2, ip
 8003f44:	ea42 020e 	orr.w	r2, r2, lr
 8003f48:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 8003f4c:	7b0a      	ldrb	r2, [r1, #12]
 8003f4e:	2a00      	cmp	r2, #0
 8003f50:	f040 80dc 	bne.w	800410c <USB_ActivateEndpoint+0x212>
  {
    if (ep->is_in != 0U)
 8003f54:	784a      	ldrb	r2, [r1, #1]
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	d051      	beq.n	8003ffe <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f5a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003f5e:	b292      	uxth	r2, r2
 8003f60:	441a      	add	r2, r3
 8003f62:	780c      	ldrb	r4, [r1, #0]
 8003f64:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003f68:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8003f6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003f70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003f74:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f78:	780c      	ldrb	r4, [r1, #0]
 8003f7a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f7e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003f82:	d00c      	beq.n	8003f9e <USB_ActivateEndpoint+0xa4>
 8003f84:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f88:	b292      	uxth	r2, r2
 8003f8a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003f8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f96:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003f9a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003f9e:	78ca      	ldrb	r2, [r1, #3]
 8003fa0:	2a01      	cmp	r2, #1
 8003fa2:	d01d      	beq.n	8003fe0 <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fa4:	7809      	ldrb	r1, [r1, #0]
 8003fa6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003faa:	b292      	uxth	r2, r2
 8003fac:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fb4:	f082 0220 	eor.w	r2, r2, #32
 8003fb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fc0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003fc4:	e117      	b.n	80041f6 <USB_ActivateEndpoint+0x2fc>
      wEpRegVal |= USB_EP_CONTROL;
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 8003fca:	e7aa      	b.n	8003f22 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fcc:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003fd0:	2000      	movs	r0, #0
      break;
 8003fd2:	e7a6      	b.n	8003f22 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003fd8:	2000      	movs	r0, #0
      break;
 8003fda:	e7a2      	b.n	8003f22 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003fdc:	2001      	movs	r0, #1
 8003fde:	e7a0      	b.n	8003f22 <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fe0:	7809      	ldrb	r1, [r1, #0]
 8003fe2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ff4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ff8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003ffc:	e0fb      	b.n	80041f6 <USB_ActivateEndpoint+0x2fc>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ffe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004002:	b292      	uxth	r2, r2
 8004004:	441a      	add	r2, r3
 8004006:	780c      	ldrb	r4, [r1, #0]
 8004008:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800400c:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8004010:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004014:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004018:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800401c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004020:	b292      	uxth	r2, r2
 8004022:	441a      	add	r2, r3
 8004024:	780c      	ldrb	r4, [r1, #0]
 8004026:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800402a:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 800402e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004032:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
 8004036:	690c      	ldr	r4, [r1, #16]
 8004038:	2c3e      	cmp	r4, #62	@ 0x3e
 800403a:	d939      	bls.n	80040b0 <USB_ActivateEndpoint+0x1b6>
 800403c:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 8004040:	f014 0f1f 	tst.w	r4, #31
 8004044:	d101      	bne.n	800404a <USB_ActivateEndpoint+0x150>
 8004046:	f10e 3eff 	add.w	lr, lr, #4294967295
 800404a:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 800404e:	fa1f fc8c 	uxth.w	ip, ip
 8004052:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8004056:	fa1f fe8e 	uxth.w	lr, lr
 800405a:	ea4c 0c0e 	orr.w	ip, ip, lr
 800405e:	f44c 4c00 	orr.w	ip, ip, #32768	@ 0x8000
 8004062:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004066:	780c      	ldrb	r4, [r1, #0]
 8004068:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800406c:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004070:	d00c      	beq.n	800408c <USB_ActivateEndpoint+0x192>
 8004072:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004076:	b292      	uxth	r2, r2
 8004078:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800407c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004080:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004084:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004088:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->num == 0U)
 800408c:	7809      	ldrb	r1, [r1, #0]
 800408e:	bb69      	cbnz	r1, 80040ec <USB_ActivateEndpoint+0x1f2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004090:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004094:	b292      	uxth	r2, r2
 8004096:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800409a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800409e:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80040a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040aa:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80040ae:	e0a2      	b.n	80041f6 <USB_ActivateEndpoint+0x2fc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80040b0:	b94c      	cbnz	r4, 80040c6 <USB_ActivateEndpoint+0x1cc>
 80040b2:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	@ 0x40c
 80040b6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80040ba:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80040be:	b2a4      	uxth	r4, r4
 80040c0:	f8a2 440c 	strh.w	r4, [r2, #1036]	@ 0x40c
 80040c4:	e7cf      	b.n	8004066 <USB_ActivateEndpoint+0x16c>
 80040c6:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80040ca:	f014 0f01 	tst.w	r4, #1
 80040ce:	d001      	beq.n	80040d4 <USB_ActivateEndpoint+0x1da>
 80040d0:	f10c 0c01 	add.w	ip, ip, #1
 80040d4:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	@ 0x40c
 80040d8:	b2a4      	uxth	r4, r4
 80040da:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80040de:	fa1f fc8c 	uxth.w	ip, ip
 80040e2:	ea44 040c 	orr.w	r4, r4, ip
 80040e6:	f8a2 440c 	strh.w	r4, [r2, #1036]	@ 0x40c
 80040ea:	e7bc      	b.n	8004066 <USB_ActivateEndpoint+0x16c>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80040ec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80040f0:	b292      	uxth	r2, r2
 80040f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80040fa:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 80040fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004102:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004106:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800410a:	e074      	b.n	80041f6 <USB_ActivateEndpoint+0x2fc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800410c:	78ca      	ldrb	r2, [r1, #3]
 800410e:	2a02      	cmp	r2, #2
 8004110:	d072      	beq.n	80041f8 <USB_ActivateEndpoint+0x2fe>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004112:	780c      	ldrb	r4, [r1, #0]
 8004114:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004118:	b292      	uxth	r2, r2
 800411a:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800411e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004126:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800412a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800412e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004132:	b292      	uxth	r2, r2
 8004134:	441a      	add	r2, r3
 8004136:	f891 c000 	ldrb.w	ip, [r1]
 800413a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800413e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004142:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004146:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800414a:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
 800414e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004152:	b292      	uxth	r2, r2
 8004154:	441a      	add	r2, r3
 8004156:	f891 c000 	ldrb.w	ip, [r1]
 800415a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800415e:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8004162:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004166:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800416a:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408

    if (ep->is_in == 0U)
 800416e:	784a      	ldrb	r2, [r1, #1]
 8004170:	2a00      	cmp	r2, #0
 8004172:	d150      	bne.n	8004216 <USB_ActivateEndpoint+0x31c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004174:	780c      	ldrb	r4, [r1, #0]
 8004176:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800417a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800417e:	d00c      	beq.n	800419a <USB_ActivateEndpoint+0x2a0>
 8004180:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004184:	b292      	uxth	r2, r2
 8004186:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800418a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800418e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004192:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004196:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800419a:	780c      	ldrb	r4, [r1, #0]
 800419c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041a0:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80041a4:	d00c      	beq.n	80041c0 <USB_ActivateEndpoint+0x2c6>
 80041a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041aa:	b292      	uxth	r2, r2
 80041ac:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80041b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041b8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80041bc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041c0:	f891 c000 	ldrb.w	ip, [r1]
 80041c4:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80041c8:	b292      	uxth	r2, r2
 80041ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041d2:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80041d6:	f248 0480 	movw	r4, #32896	@ 0x8080
 80041da:	4322      	orrs	r2, r4
 80041dc:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041e0:	7809      	ldrb	r1, [r1, #0]
 80041e2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80041e6:	b292      	uxth	r2, r2
 80041e8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80041ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f0:	4322      	orrs	r2, r4
 80041f2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80041f6:	bd10      	pop	{r4, pc}
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80041f8:	780c      	ldrb	r4, [r1, #0]
 80041fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80041fe:	b292      	uxth	r2, r2
 8004200:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004204:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004208:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 800420c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004210:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8004214:	e78b      	b.n	800412e <USB_ActivateEndpoint+0x234>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004216:	780c      	ldrb	r4, [r1, #0]
 8004218:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800421c:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004220:	d00c      	beq.n	800423c <USB_ActivateEndpoint+0x342>
 8004222:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004226:	b292      	uxth	r2, r2
 8004228:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800422c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004230:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004234:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004238:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800423c:	780c      	ldrb	r4, [r1, #0]
 800423e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004242:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004246:	d00c      	beq.n	8004262 <USB_ActivateEndpoint+0x368>
 8004248:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800424c:	b292      	uxth	r2, r2
 800424e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004252:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800425a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800425e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004262:	78ca      	ldrb	r2, [r1, #3]
 8004264:	2a01      	cmp	r2, #1
 8004266:	d01e      	beq.n	80042a6 <USB_ActivateEndpoint+0x3ac>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004268:	780c      	ldrb	r4, [r1, #0]
 800426a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800426e:	b292      	uxth	r2, r2
 8004270:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004278:	f082 0220 	eor.w	r2, r2, #32
 800427c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004280:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004284:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004288:	7809      	ldrb	r1, [r1, #0]
 800428a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800428e:	b292      	uxth	r2, r2
 8004290:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004294:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800429c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042a0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80042a4:	e7a7      	b.n	80041f6 <USB_ActivateEndpoint+0x2fc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042a6:	780c      	ldrb	r4, [r1, #0]
 80042a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80042ac:	b292      	uxth	r2, r2
 80042ae:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80042b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80042c2:	e7e1      	b.n	8004288 <USB_ActivateEndpoint+0x38e>

080042c4 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80042c4:	7b0b      	ldrb	r3, [r1, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d146      	bne.n	8004358 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80042ca:	784b      	ldrb	r3, [r1, #1]
 80042cc:	b313      	cbz	r3, 8004314 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ce:	780a      	ldrb	r2, [r1, #0]
 80042d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042d4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80042d8:	d00c      	beq.n	80042f4 <USB_DeactivateEndpoint+0x30>
 80042da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80042f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042f4:	780a      	ldrb	r2, [r1, #0]
 80042f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800430c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004310:	2000      	movs	r0, #0
 8004312:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004314:	780a      	ldrb	r2, [r1, #0]
 8004316:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800431a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800431e:	d00c      	beq.n	800433a <USB_DeactivateEndpoint+0x76>
 8004320:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004336:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800433a:	780a      	ldrb	r2, [r1, #0]
 800433c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800434e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004352:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004356:	e7db      	b.n	8004310 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8004358:	784b      	ldrb	r3, [r1, #1]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d14e      	bne.n	80043fc <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800435e:	780a      	ldrb	r2, [r1, #0]
 8004360:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004364:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004368:	d00c      	beq.n	8004384 <USB_DeactivateEndpoint+0xc0>
 800436a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004378:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800437c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004380:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004384:	780a      	ldrb	r2, [r1, #0]
 8004386:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800438a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800438e:	d00c      	beq.n	80043aa <USB_DeactivateEndpoint+0xe6>
 8004390:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80043aa:	780a      	ldrb	r2, [r1, #0]
 80043ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043c6:	780a      	ldrb	r2, [r1, #0]
 80043c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	f248 0c80 	movw	ip, #32896	@ 0x8080
 80043da:	ea43 030c 	orr.w	r3, r3, ip
 80043de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e2:	780a      	ldrb	r2, [r1, #0]
 80043e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f2:	ea43 030c 	orr.w	r3, r3, ip
 80043f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80043fa:	e789      	b.n	8004310 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043fc:	780a      	ldrb	r2, [r1, #0]
 80043fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004402:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004406:	d00c      	beq.n	8004422 <USB_DeactivateEndpoint+0x15e>
 8004408:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004416:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800441a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800441e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004422:	780a      	ldrb	r2, [r1, #0]
 8004424:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004428:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800442c:	d00c      	beq.n	8004448 <USB_DeactivateEndpoint+0x184>
 800442e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004440:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004444:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004448:	780a      	ldrb	r2, [r1, #0]
 800444a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800445c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004460:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004464:	780a      	ldrb	r2, [r1, #0]
 8004466:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004474:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8004478:	ea43 030c 	orr.w	r3, r3, ip
 800447c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004480:	780a      	ldrb	r2, [r1, #0]
 8004482:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800448c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004490:	ea43 030c 	orr.w	r3, r3, ip
 8004494:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004498:	e73a      	b.n	8004310 <USB_DeactivateEndpoint+0x4c>

0800449a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800449a:	784b      	ldrb	r3, [r1, #1]
 800449c:	b18b      	cbz	r3, 80044c2 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800449e:	780a      	ldrb	r2, [r1, #0]
 80044a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ae:	f083 0310 	eor.w	r3, r3, #16
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80044be:	2000      	movs	r0, #0
 80044c0:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80044c2:	780a      	ldrb	r2, [r1, #0]
 80044c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80044e2:	e7ec      	b.n	80044be <USB_EPSetStall+0x24>

080044e4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80044e4:	7b0b      	ldrb	r3, [r1, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d14b      	bne.n	8004582 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80044ea:	784b      	ldrb	r3, [r1, #1]
 80044ec:	b333      	cbz	r3, 800453c <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ee:	780a      	ldrb	r2, [r1, #0]
 80044f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80044f8:	d00c      	beq.n	8004514 <USB_EPClearStall+0x30>
 80044fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800450c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004510:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004514:	78cb      	ldrb	r3, [r1, #3]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d033      	beq.n	8004582 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800451a:	780a      	ldrb	r2, [r1, #0]
 800451c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800452a:	f083 0320 	eor.w	r3, r3, #32
 800452e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004536:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800453a:	e022      	b.n	8004582 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800453c:	780a      	ldrb	r2, [r1, #0]
 800453e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004542:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004546:	d00c      	beq.n	8004562 <USB_EPClearStall+0x7e>
 8004548:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800455a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004562:	780a      	ldrb	r2, [r1, #0]
 8004564:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800457e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004582:	2000      	movs	r0, #0
 8004584:	4770      	bx	lr

08004586 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004586:	b911      	cbnz	r1, 800458e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004588:	2380      	movs	r3, #128	@ 0x80
 800458a:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800458e:	2000      	movs	r0, #0
 8004590:	4770      	bx	lr

08004592 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004592:	2000      	movs	r0, #0
 8004594:	4770      	bx	lr

08004596 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004596:	2000      	movs	r0, #0
 8004598:	4770      	bx	lr

0800459a <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800459a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 800459e:	b280      	uxth	r0, r0
 80045a0:	4770      	bx	lr

080045a2 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80045a2:	2000      	movs	r0, #0
 80045a4:	4770      	bx	lr

080045a6 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80045a6:	3301      	adds	r3, #1
 80045a8:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80045aa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80045ae:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 80045b2:	e008      	b.n	80045c6 <USB_WritePMA+0x20>
  {
    WrVal = pBuf[0];
 80045b4:	780a      	ldrb	r2, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80045b6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80045ba:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 80045be:	f820 2b04 	strh.w	r2, [r0], #4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 80045c2:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80045c4:	3b01      	subs	r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f4      	bne.n	80045b4 <USB_WritePMA+0xe>
  }
}
 80045ca:	4770      	bx	lr

080045cc <USB_EPStartXfer>:
{
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80045d2:	784a      	ldrb	r2, [r1, #1]
 80045d4:	2a01      	cmp	r2, #1
 80045d6:	d03b      	beq.n	8004650 <USB_EPStartXfer+0x84>
    if (ep->doublebuffer == 0U)
 80045d8:	7b0b      	ldrb	r3, [r1, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 82a6 	bne.w	8004b2c <USB_EPStartXfer+0x560>
      if (ep->xfer_len > ep->maxpacket)
 80045e0:	698b      	ldr	r3, [r1, #24]
 80045e2:	690a      	ldr	r2, [r1, #16]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	f240 8284 	bls.w	8004af2 <USB_EPStartXfer+0x526>
        ep->xfer_len -= len;
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80045ee:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	442b      	add	r3, r5
 80045f6:	7821      	ldrb	r1, [r4, #0]
 80045f8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80045fc:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 8004600:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004604:	f8a3 140c 	strh.w	r1, [r3, #1036]	@ 0x40c
 8004608:	2a3e      	cmp	r2, #62	@ 0x3e
 800460a:	f240 8276 	bls.w	8004afa <USB_EPStartXfer+0x52e>
 800460e:	0951      	lsrs	r1, r2, #5
 8004610:	f012 0f1f 	tst.w	r2, #31
 8004614:	d100      	bne.n	8004618 <USB_EPStartXfer+0x4c>
 8004616:	3901      	subs	r1, #1
 8004618:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800461c:	b292      	uxth	r2, r2
 800461e:	0289      	lsls	r1, r1, #10
 8004620:	b289      	uxth	r1, r1
 8004622:	430a      	orrs	r2, r1
 8004624:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004628:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800462c:	7822      	ldrb	r2, [r4, #0]
 800462e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004648:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800464c:	2000      	movs	r0, #0
}
 800464e:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8004650:	698e      	ldr	r6, [r1, #24]
 8004652:	6909      	ldr	r1, [r1, #16]
 8004654:	428e      	cmp	r6, r1
 8004656:	d900      	bls.n	800465a <USB_EPStartXfer+0x8e>
      len = ep->maxpacket;
 8004658:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800465a:	7b23      	ldrb	r3, [r4, #12]
 800465c:	b373      	cbz	r3, 80046bc <USB_EPStartXfer+0xf0>
      if (ep->type == EP_TYPE_BULK)
 800465e:	78e3      	ldrb	r3, [r4, #3]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d04d      	beq.n	8004700 <USB_EPStartXfer+0x134>
        ep->xfer_len_db -= len;
 8004664:	6a23      	ldr	r3, [r4, #32]
 8004666:	1b9b      	subs	r3, r3, r6
 8004668:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800466a:	7821      	ldrb	r1, [r4, #0]
 800466c:	f835 3021 	ldrh.w	r3, [r5, r1, lsl #2]
 8004670:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004674:	f000 81f5 	beq.w	8004a62 <USB_EPStartXfer+0x496>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004678:	2a00      	cmp	r2, #0
 800467a:	f040 81e2 	bne.w	8004a42 <USB_EPStartXfer+0x476>
 800467e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004682:	b29b      	uxth	r3, r3
 8004684:	442b      	add	r3, r5
 8004686:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800468a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800468e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004692:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004696:	2e3e      	cmp	r6, #62	@ 0x3e
 8004698:	f240 81ba 	bls.w	8004a10 <USB_EPStartXfer+0x444>
 800469c:	0971      	lsrs	r1, r6, #5
 800469e:	f016 0f1f 	tst.w	r6, #31
 80046a2:	d100      	bne.n	80046a6 <USB_EPStartXfer+0xda>
 80046a4:	3901      	subs	r1, #1
 80046a6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80046aa:	b292      	uxth	r2, r2
 80046ac:	0289      	lsls	r1, r1, #10
 80046ae:	b289      	uxth	r1, r1
 80046b0:	430a      	orrs	r2, r1
 80046b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046b6:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80046ba:	e1cb      	b.n	8004a54 <USB_EPStartXfer+0x488>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046bc:	b2b6      	uxth	r6, r6
 80046be:	4633      	mov	r3, r6
 80046c0:	88e2      	ldrh	r2, [r4, #6]
 80046c2:	6961      	ldr	r1, [r4, #20]
 80046c4:	4628      	mov	r0, r5
 80046c6:	f7ff ff6e 	bl	80045a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046ca:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	442b      	add	r3, r5
 80046d2:	7822      	ldrb	r2, [r4, #0]
 80046d4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80046d8:	f8a3 6404 	strh.w	r6, [r3, #1028]	@ 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80046dc:	7822      	ldrb	r2, [r4, #0]
 80046de:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ec:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80046fc:	2000      	movs	r0, #0
 80046fe:	e7a6      	b.n	800464e <USB_EPStartXfer+0x82>
        if (ep->xfer_len_db > ep->maxpacket)
 8004700:	6a23      	ldr	r3, [r4, #32]
 8004702:	4299      	cmp	r1, r3
 8004704:	f080 8166 	bcs.w	80049d4 <USB_EPStartXfer+0x408>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004708:	7822      	ldrb	r2, [r4, #0]
 800470a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004718:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800471c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004720:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8004724:	6a23      	ldr	r3, [r4, #32]
 8004726:	1b9b      	subs	r3, r3, r6
 8004728:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800472a:	7822      	ldrb	r2, [r4, #0]
 800472c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004730:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004734:	f000 80a7 	beq.w	8004886 <USB_EPStartXfer+0x2ba>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004738:	7863      	ldrb	r3, [r4, #1]
 800473a:	bbb3      	cbnz	r3, 80047aa <USB_EPStartXfer+0x1de>
 800473c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004740:	b29b      	uxth	r3, r3
 8004742:	442b      	add	r3, r5
 8004744:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004748:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800474c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004750:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004754:	2e3e      	cmp	r6, #62	@ 0x3e
 8004756:	d90f      	bls.n	8004778 <USB_EPStartXfer+0x1ac>
 8004758:	0971      	lsrs	r1, r6, #5
 800475a:	f016 0f1f 	tst.w	r6, #31
 800475e:	d100      	bne.n	8004762 <USB_EPStartXfer+0x196>
 8004760:	3901      	subs	r1, #1
 8004762:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004766:	b292      	uxth	r2, r2
 8004768:	0289      	lsls	r1, r1, #10
 800476a:	b289      	uxth	r1, r1
 800476c:	430a      	orrs	r2, r1
 800476e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004772:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004776:	e01a      	b.n	80047ae <USB_EPStartXfer+0x1e2>
 8004778:	b94e      	cbnz	r6, 800478e <USB_EPStartXfer+0x1c2>
 800477a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800477e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004782:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004786:	b292      	uxth	r2, r2
 8004788:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800478c:	e00f      	b.n	80047ae <USB_EPStartXfer+0x1e2>
 800478e:	0872      	lsrs	r2, r6, #1
 8004790:	f016 0f01 	tst.w	r6, #1
 8004794:	d000      	beq.n	8004798 <USB_EPStartXfer+0x1cc>
 8004796:	3201      	adds	r2, #1
 8004798:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 800479c:	b289      	uxth	r1, r1
 800479e:	0292      	lsls	r2, r2, #10
 80047a0:	b292      	uxth	r2, r2
 80047a2:	430a      	orrs	r2, r1
 80047a4:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80047a8:	e001      	b.n	80047ae <USB_EPStartXfer+0x1e2>
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d030      	beq.n	8004810 <USB_EPStartXfer+0x244>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047ae:	b2b3      	uxth	r3, r6
 80047b0:	8962      	ldrh	r2, [r4, #10]
 80047b2:	6961      	ldr	r1, [r4, #20]
 80047b4:	4628      	mov	r0, r5
 80047b6:	f7ff fef6 	bl	80045a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80047ba:	6963      	ldr	r3, [r4, #20]
 80047bc:	4433      	add	r3, r6
 80047be:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80047c0:	6a23      	ldr	r3, [r4, #32]
 80047c2:	6922      	ldr	r2, [r4, #16]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d92d      	bls.n	8004824 <USB_EPStartXfer+0x258>
              ep->xfer_len_db -= len;
 80047c8:	1b9b      	subs	r3, r3, r6
 80047ca:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047cc:	7863      	ldrb	r3, [r4, #1]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d145      	bne.n	800485e <USB_EPStartXfer+0x292>
 80047d2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	442b      	add	r3, r5
 80047da:	7822      	ldrb	r2, [r4, #0]
 80047dc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80047e0:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80047e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80047e8:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80047ec:	2e3e      	cmp	r6, #62	@ 0x3e
 80047ee:	d91d      	bls.n	800482c <USB_EPStartXfer+0x260>
 80047f0:	0971      	lsrs	r1, r6, #5
 80047f2:	f016 0f1f 	tst.w	r6, #31
 80047f6:	d100      	bne.n	80047fa <USB_EPStartXfer+0x22e>
 80047f8:	3901      	subs	r1, #1
 80047fa:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80047fe:	b292      	uxth	r2, r2
 8004800:	0289      	lsls	r1, r1, #10
 8004802:	b289      	uxth	r1, r1
 8004804:	430a      	orrs	r2, r1
 8004806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800480a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800480e:	e028      	b.n	8004862 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004810:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	442b      	add	r3, r5
 8004818:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800481c:	b2b2      	uxth	r2, r6
 800481e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004822:	e7c4      	b.n	80047ae <USB_EPStartXfer+0x1e2>
              ep->xfer_len_db = 0U;
 8004824:	2200      	movs	r2, #0
 8004826:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004828:	461e      	mov	r6, r3
 800482a:	e7cf      	b.n	80047cc <USB_EPStartXfer+0x200>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800482c:	b94e      	cbnz	r6, 8004842 <USB_EPStartXfer+0x276>
 800482e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004832:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004836:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800483a:	b292      	uxth	r2, r2
 800483c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004840:	e00f      	b.n	8004862 <USB_EPStartXfer+0x296>
 8004842:	0872      	lsrs	r2, r6, #1
 8004844:	f016 0f01 	tst.w	r6, #1
 8004848:	d000      	beq.n	800484c <USB_EPStartXfer+0x280>
 800484a:	3201      	adds	r2, #1
 800484c:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 8004850:	b289      	uxth	r1, r1
 8004852:	0292      	lsls	r2, r2, #10
 8004854:	b292      	uxth	r2, r2
 8004856:	430a      	orrs	r2, r1
 8004858:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800485c:	e001      	b.n	8004862 <USB_EPStartXfer+0x296>
 800485e:	2b01      	cmp	r3, #1
 8004860:	d006      	beq.n	8004870 <USB_EPStartXfer+0x2a4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004862:	b2b3      	uxth	r3, r6
 8004864:	8922      	ldrh	r2, [r4, #8]
 8004866:	6961      	ldr	r1, [r4, #20]
 8004868:	4628      	mov	r0, r5
 800486a:	f7ff fe9c 	bl	80045a6 <USB_WritePMA>
 800486e:	e735      	b.n	80046dc <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004870:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004874:	b29b      	uxth	r3, r3
 8004876:	442b      	add	r3, r5
 8004878:	7822      	ldrb	r2, [r4, #0]
 800487a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800487e:	b2b2      	uxth	r2, r6
 8004880:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004884:	e7ed      	b.n	8004862 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004886:	7863      	ldrb	r3, [r4, #1]
 8004888:	bbb3      	cbnz	r3, 80048f8 <USB_EPStartXfer+0x32c>
 800488a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800488e:	b29b      	uxth	r3, r3
 8004890:	442b      	add	r3, r5
 8004892:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004896:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800489a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800489e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80048a2:	2e3e      	cmp	r6, #62	@ 0x3e
 80048a4:	d90f      	bls.n	80048c6 <USB_EPStartXfer+0x2fa>
 80048a6:	0971      	lsrs	r1, r6, #5
 80048a8:	f016 0f1f 	tst.w	r6, #31
 80048ac:	d100      	bne.n	80048b0 <USB_EPStartXfer+0x2e4>
 80048ae:	3901      	subs	r1, #1
 80048b0:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80048b4:	b292      	uxth	r2, r2
 80048b6:	0289      	lsls	r1, r1, #10
 80048b8:	b289      	uxth	r1, r1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048c0:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80048c4:	e01a      	b.n	80048fc <USB_EPStartXfer+0x330>
 80048c6:	b94e      	cbnz	r6, 80048dc <USB_EPStartXfer+0x310>
 80048c8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 80048cc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80048d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80048d4:	b292      	uxth	r2, r2
 80048d6:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80048da:	e00f      	b.n	80048fc <USB_EPStartXfer+0x330>
 80048dc:	0872      	lsrs	r2, r6, #1
 80048de:	f016 0f01 	tst.w	r6, #1
 80048e2:	d000      	beq.n	80048e6 <USB_EPStartXfer+0x31a>
 80048e4:	3201      	adds	r2, #1
 80048e6:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 80048ea:	b289      	uxth	r1, r1
 80048ec:	0292      	lsls	r2, r2, #10
 80048ee:	b292      	uxth	r2, r2
 80048f0:	430a      	orrs	r2, r1
 80048f2:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80048f6:	e001      	b.n	80048fc <USB_EPStartXfer+0x330>
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d030      	beq.n	800495e <USB_EPStartXfer+0x392>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048fc:	b2b3      	uxth	r3, r6
 80048fe:	8922      	ldrh	r2, [r4, #8]
 8004900:	6961      	ldr	r1, [r4, #20]
 8004902:	4628      	mov	r0, r5
 8004904:	f7ff fe4f 	bl	80045a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004908:	6963      	ldr	r3, [r4, #20]
 800490a:	4433      	add	r3, r6
 800490c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800490e:	6a23      	ldr	r3, [r4, #32]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	4293      	cmp	r3, r2
 8004914:	d92d      	bls.n	8004972 <USB_EPStartXfer+0x3a6>
              ep->xfer_len_db -= len;
 8004916:	1b9b      	subs	r3, r3, r6
 8004918:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800491a:	7863      	ldrb	r3, [r4, #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d145      	bne.n	80049ac <USB_EPStartXfer+0x3e0>
 8004920:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004924:	b29b      	uxth	r3, r3
 8004926:	442b      	add	r3, r5
 8004928:	7822      	ldrb	r2, [r4, #0]
 800492a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800492e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004932:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004936:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800493a:	2e3e      	cmp	r6, #62	@ 0x3e
 800493c:	d91d      	bls.n	800497a <USB_EPStartXfer+0x3ae>
 800493e:	0971      	lsrs	r1, r6, #5
 8004940:	f016 0f1f 	tst.w	r6, #31
 8004944:	d100      	bne.n	8004948 <USB_EPStartXfer+0x37c>
 8004946:	3901      	subs	r1, #1
 8004948:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800494c:	b292      	uxth	r2, r2
 800494e:	0289      	lsls	r1, r1, #10
 8004950:	b289      	uxth	r1, r1
 8004952:	430a      	orrs	r2, r1
 8004954:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004958:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800495c:	e028      	b.n	80049b0 <USB_EPStartXfer+0x3e4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800495e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004962:	b29b      	uxth	r3, r3
 8004964:	442b      	add	r3, r5
 8004966:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800496a:	b2b2      	uxth	r2, r6
 800496c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004970:	e7c4      	b.n	80048fc <USB_EPStartXfer+0x330>
              ep->xfer_len_db = 0U;
 8004972:	2200      	movs	r2, #0
 8004974:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004976:	461e      	mov	r6, r3
 8004978:	e7cf      	b.n	800491a <USB_EPStartXfer+0x34e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800497a:	b94e      	cbnz	r6, 8004990 <USB_EPStartXfer+0x3c4>
 800497c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004980:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004984:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004988:	b292      	uxth	r2, r2
 800498a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800498e:	e00f      	b.n	80049b0 <USB_EPStartXfer+0x3e4>
 8004990:	0872      	lsrs	r2, r6, #1
 8004992:	f016 0f01 	tst.w	r6, #1
 8004996:	d000      	beq.n	800499a <USB_EPStartXfer+0x3ce>
 8004998:	3201      	adds	r2, #1
 800499a:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 800499e:	b289      	uxth	r1, r1
 80049a0:	0292      	lsls	r2, r2, #10
 80049a2:	b292      	uxth	r2, r2
 80049a4:	430a      	orrs	r2, r1
 80049a6:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80049aa:	e001      	b.n	80049b0 <USB_EPStartXfer+0x3e4>
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d006      	beq.n	80049be <USB_EPStartXfer+0x3f2>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049b0:	b2b3      	uxth	r3, r6
 80049b2:	8962      	ldrh	r2, [r4, #10]
 80049b4:	6961      	ldr	r1, [r4, #20]
 80049b6:	4628      	mov	r0, r5
 80049b8:	f7ff fdf5 	bl	80045a6 <USB_WritePMA>
 80049bc:	e68e      	b.n	80046dc <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	442b      	add	r3, r5
 80049c6:	7822      	ldrb	r2, [r4, #0]
 80049c8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80049cc:	b2b2      	uxth	r2, r6
 80049ce:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80049d2:	e7ed      	b.n	80049b0 <USB_EPStartXfer+0x3e4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80049d4:	7821      	ldrb	r1, [r4, #0]
 80049d6:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 80049da:	b292      	uxth	r2, r2
 80049dc:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80049e0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80049e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049ec:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049f0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 80049f4:	b292      	uxth	r2, r2
 80049f6:	442a      	add	r2, r5
 80049f8:	7821      	ldrb	r1, [r4, #0]
 80049fa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f8a2 3404 	strh.w	r3, [r2, #1028]	@ 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a04:	8922      	ldrh	r2, [r4, #8]
 8004a06:	6961      	ldr	r1, [r4, #20]
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f7ff fdcc 	bl	80045a6 <USB_WritePMA>
 8004a0e:	e665      	b.n	80046dc <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a10:	b94e      	cbnz	r6, 8004a26 <USB_EPStartXfer+0x45a>
 8004a12:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004a16:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004a1a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004a24:	e016      	b.n	8004a54 <USB_EPStartXfer+0x488>
 8004a26:	0872      	lsrs	r2, r6, #1
 8004a28:	f016 0f01 	tst.w	r6, #1
 8004a2c:	d000      	beq.n	8004a30 <USB_EPStartXfer+0x464>
 8004a2e:	3201      	adds	r2, #1
 8004a30:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 8004a34:	b289      	uxth	r1, r1
 8004a36:	0292      	lsls	r2, r2, #10
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004a40:	e008      	b.n	8004a54 <USB_EPStartXfer+0x488>
 8004a42:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	442b      	add	r3, r5
 8004a4a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004a4e:	b2b2      	uxth	r2, r6
 8004a50:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a54:	b2b3      	uxth	r3, r6
 8004a56:	8962      	ldrh	r2, [r4, #10]
 8004a58:	6961      	ldr	r1, [r4, #20]
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f7ff fda3 	bl	80045a6 <USB_WritePMA>
 8004a60:	e63c      	b.n	80046dc <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a62:	bbb2      	cbnz	r2, 8004ad2 <USB_EPStartXfer+0x506>
 8004a64:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	442b      	add	r3, r5
 8004a6c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004a70:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004a74:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004a78:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004a7c:	2e3e      	cmp	r6, #62	@ 0x3e
 8004a7e:	d90f      	bls.n	8004aa0 <USB_EPStartXfer+0x4d4>
 8004a80:	0971      	lsrs	r1, r6, #5
 8004a82:	f016 0f1f 	tst.w	r6, #31
 8004a86:	d100      	bne.n	8004a8a <USB_EPStartXfer+0x4be>
 8004a88:	3901      	subs	r1, #1
 8004a8a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	0289      	lsls	r1, r1, #10
 8004a92:	b289      	uxth	r1, r1
 8004a94:	430a      	orrs	r2, r1
 8004a96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a9a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004a9e:	e021      	b.n	8004ae4 <USB_EPStartXfer+0x518>
 8004aa0:	b94e      	cbnz	r6, 8004ab6 <USB_EPStartXfer+0x4ea>
 8004aa2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004aa6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004aaa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004ab4:	e016      	b.n	8004ae4 <USB_EPStartXfer+0x518>
 8004ab6:	0872      	lsrs	r2, r6, #1
 8004ab8:	f016 0f01 	tst.w	r6, #1
 8004abc:	d000      	beq.n	8004ac0 <USB_EPStartXfer+0x4f4>
 8004abe:	3201      	adds	r2, #1
 8004ac0:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 8004ac4:	b289      	uxth	r1, r1
 8004ac6:	0292      	lsls	r2, r2, #10
 8004ac8:	b292      	uxth	r2, r2
 8004aca:	430a      	orrs	r2, r1
 8004acc:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004ad0:	e008      	b.n	8004ae4 <USB_EPStartXfer+0x518>
 8004ad2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	442b      	add	r3, r5
 8004ada:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004ade:	b2b2      	uxth	r2, r6
 8004ae0:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ae4:	b2b3      	uxth	r3, r6
 8004ae6:	8922      	ldrh	r2, [r4, #8]
 8004ae8:	6961      	ldr	r1, [r4, #20]
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7ff fd5b 	bl	80045a6 <USB_WritePMA>
 8004af0:	e5f4      	b.n	80046dc <USB_EPStartXfer+0x110>
        ep->xfer_len = 0U;
 8004af2:	2200      	movs	r2, #0
 8004af4:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8004af6:	461a      	mov	r2, r3
 8004af8:	e579      	b.n	80045ee <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004afa:	b94a      	cbnz	r2, 8004b10 <USB_EPStartXfer+0x544>
 8004afc:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004b00:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004b04:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004b0e:	e58d      	b.n	800462c <USB_EPStartXfer+0x60>
 8004b10:	0851      	lsrs	r1, r2, #1
 8004b12:	f012 0f01 	tst.w	r2, #1
 8004b16:	d000      	beq.n	8004b1a <USB_EPStartXfer+0x54e>
 8004b18:	3101      	adds	r1, #1
 8004b1a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	0289      	lsls	r1, r1, #10
 8004b22:	b289      	uxth	r1, r1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004b2a:	e57f      	b.n	800462c <USB_EPStartXfer+0x60>
      if (ep->type == EP_TYPE_BULK)
 8004b2c:	78cb      	ldrb	r3, [r1, #3]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d04d      	beq.n	8004bce <USB_EPStartXfer+0x602>
      else if (ep->type == EP_TYPE_ISOC)
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	f040 812f 	bne.w	8004d96 <USB_EPStartXfer+0x7ca>
        if (ep->xfer_len > ep->maxpacket)
 8004b38:	6989      	ldr	r1, [r1, #24]
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	f240 80e6 	bls.w	8004d0e <USB_EPStartXfer+0x742>
          ep->xfer_len -= len;
 8004b42:	1ac9      	subs	r1, r1, r3
 8004b44:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004b46:	b9f2      	cbnz	r2, 8004b86 <USB_EPStartXfer+0x5ba>
 8004b48:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8004b4c:	b292      	uxth	r2, r2
 8004b4e:	442a      	add	r2, r5
 8004b50:	7821      	ldrb	r1, [r4, #0]
 8004b52:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004b56:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8004b5a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004b5e:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8004b62:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b64:	f240 80d7 	bls.w	8004d16 <USB_EPStartXfer+0x74a>
 8004b68:	0958      	lsrs	r0, r3, #5
 8004b6a:	f013 0f1f 	tst.w	r3, #31
 8004b6e:	d100      	bne.n	8004b72 <USB_EPStartXfer+0x5a6>
 8004b70:	3801      	subs	r0, #1
 8004b72:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8004b76:	b289      	uxth	r1, r1
 8004b78:	0280      	lsls	r0, r0, #10
 8004b7a:	b280      	uxth	r0, r0
 8004b7c:	4301      	orrs	r1, r0
 8004b7e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004b82:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8004b86:	7862      	ldrb	r2, [r4, #1]
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	f040 80f6 	bne.w	8004d7a <USB_EPStartXfer+0x7ae>
 8004b8e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8004b92:	b292      	uxth	r2, r2
 8004b94:	442a      	add	r2, r5
 8004b96:	7821      	ldrb	r1, [r4, #0]
 8004b98:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004b9c:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8004ba0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004ba4:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8004ba8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004baa:	f240 80cd 	bls.w	8004d48 <USB_EPStartXfer+0x77c>
 8004bae:	0959      	lsrs	r1, r3, #5
 8004bb0:	f013 0f1f 	tst.w	r3, #31
 8004bb4:	d100      	bne.n	8004bb8 <USB_EPStartXfer+0x5ec>
 8004bb6:	3901      	subs	r1, #1
 8004bb8:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	0289      	lsls	r1, r1, #10
 8004bc0:	b289      	uxth	r1, r1
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc8:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8004bcc:	e52e      	b.n	800462c <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004bce:	b9f2      	cbnz	r2, 8004c0e <USB_EPStartXfer+0x642>
 8004bd0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4403      	add	r3, r0
 8004bd8:	780a      	ldrb	r2, [r1, #0]
 8004bda:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004bde:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004be2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004be6:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004bea:	690a      	ldr	r2, [r1, #16]
 8004bec:	2a3e      	cmp	r2, #62	@ 0x3e
 8004bee:	d931      	bls.n	8004c54 <USB_EPStartXfer+0x688>
 8004bf0:	0951      	lsrs	r1, r2, #5
 8004bf2:	f012 0f1f 	tst.w	r2, #31
 8004bf6:	d100      	bne.n	8004bfa <USB_EPStartXfer+0x62e>
 8004bf8:	3901      	subs	r1, #1
 8004bfa:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004bfe:	b292      	uxth	r2, r2
 8004c00:	0289      	lsls	r1, r1, #10
 8004c02:	b289      	uxth	r1, r1
 8004c04:	430a      	orrs	r2, r1
 8004c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c0a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004c0e:	7863      	ldrb	r3, [r4, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d151      	bne.n	8004cb8 <USB_EPStartXfer+0x6ec>
 8004c14:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	442b      	add	r3, r5
 8004c1c:	7822      	ldrb	r2, [r4, #0]
 8004c1e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004c22:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004c26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c2a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004c2e:	6922      	ldr	r2, [r4, #16]
 8004c30:	2a3e      	cmp	r2, #62	@ 0x3e
 8004c32:	d928      	bls.n	8004c86 <USB_EPStartXfer+0x6ba>
 8004c34:	0951      	lsrs	r1, r2, #5
 8004c36:	f012 0f1f 	tst.w	r2, #31
 8004c3a:	d100      	bne.n	8004c3e <USB_EPStartXfer+0x672>
 8004c3c:	3901      	subs	r1, #1
 8004c3e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004c42:	b292      	uxth	r2, r2
 8004c44:	0289      	lsls	r1, r1, #10
 8004c46:	b289      	uxth	r1, r1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c4e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004c52:	e033      	b.n	8004cbc <USB_EPStartXfer+0x6f0>
 8004c54:	b94a      	cbnz	r2, 8004c6a <USB_EPStartXfer+0x69e>
 8004c56:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004c5a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004c5e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004c62:	b292      	uxth	r2, r2
 8004c64:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004c68:	e7d1      	b.n	8004c0e <USB_EPStartXfer+0x642>
 8004c6a:	0851      	lsrs	r1, r2, #1
 8004c6c:	f012 0f01 	tst.w	r2, #1
 8004c70:	d000      	beq.n	8004c74 <USB_EPStartXfer+0x6a8>
 8004c72:	3101      	adds	r1, #1
 8004c74:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004c78:	b290      	uxth	r0, r2
 8004c7a:	028a      	lsls	r2, r1, #10
 8004c7c:	b292      	uxth	r2, r2
 8004c7e:	4302      	orrs	r2, r0
 8004c80:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004c84:	e7c3      	b.n	8004c0e <USB_EPStartXfer+0x642>
 8004c86:	b94a      	cbnz	r2, 8004c9c <USB_EPStartXfer+0x6d0>
 8004c88:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004c8c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004c90:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004c94:	b292      	uxth	r2, r2
 8004c96:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004c9a:	e00f      	b.n	8004cbc <USB_EPStartXfer+0x6f0>
 8004c9c:	0851      	lsrs	r1, r2, #1
 8004c9e:	f012 0f01 	tst.w	r2, #1
 8004ca2:	d000      	beq.n	8004ca6 <USB_EPStartXfer+0x6da>
 8004ca4:	3101      	adds	r1, #1
 8004ca6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004caa:	b290      	uxth	r0, r2
 8004cac:	028a      	lsls	r2, r1, #10
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	4302      	orrs	r2, r0
 8004cb2:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004cb6:	e001      	b.n	8004cbc <USB_EPStartXfer+0x6f0>
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d01d      	beq.n	8004cf8 <USB_EPStartXfer+0x72c>
        if (ep->xfer_count != 0U)
 8004cbc:	69e3      	ldr	r3, [r4, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f43f acb4 	beq.w	800462c <USB_EPStartXfer+0x60>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004cc4:	7822      	ldrb	r2, [r4, #0]
 8004cc6:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004cca:	f244 0340 	movw	r3, #16448	@ 0x4040
 8004cce:	ea03 0001 	and.w	r0, r3, r1
 8004cd2:	438b      	bics	r3, r1
 8004cd4:	d002      	beq.n	8004cdc <USB_EPStartXfer+0x710>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f47f aca8 	bne.w	800462c <USB_EPStartXfer+0x60>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004cdc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cf2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8004cf6:	e499      	b.n	800462c <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004cf8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	442b      	add	r3, r5
 8004d00:	7822      	ldrb	r2, [r4, #0]
 8004d02:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004d06:	8a22      	ldrh	r2, [r4, #16]
 8004d08:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004d0c:	e7d6      	b.n	8004cbc <USB_EPStartXfer+0x6f0>
          ep->xfer_len = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 8004d12:	460b      	mov	r3, r1
 8004d14:	e717      	b.n	8004b46 <USB_EPStartXfer+0x57a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d16:	b94b      	cbnz	r3, 8004d2c <USB_EPStartXfer+0x760>
 8004d18:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8004d1c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004d20:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004d24:	b289      	uxth	r1, r1
 8004d26:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8004d2a:	e72c      	b.n	8004b86 <USB_EPStartXfer+0x5ba>
 8004d2c:	0859      	lsrs	r1, r3, #1
 8004d2e:	f013 0f01 	tst.w	r3, #1
 8004d32:	d000      	beq.n	8004d36 <USB_EPStartXfer+0x76a>
 8004d34:	3101      	adds	r1, #1
 8004d36:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	@ 0x404
 8004d3a:	b280      	uxth	r0, r0
 8004d3c:	0289      	lsls	r1, r1, #10
 8004d3e:	b289      	uxth	r1, r1
 8004d40:	4301      	orrs	r1, r0
 8004d42:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8004d46:	e71e      	b.n	8004b86 <USB_EPStartXfer+0x5ba>
 8004d48:	b94b      	cbnz	r3, 8004d5e <USB_EPStartXfer+0x792>
 8004d4a:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8004d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8004d5c:	e466      	b.n	800462c <USB_EPStartXfer+0x60>
 8004d5e:	0859      	lsrs	r1, r3, #1
 8004d60:	f013 0f01 	tst.w	r3, #1
 8004d64:	d000      	beq.n	8004d68 <USB_EPStartXfer+0x79c>
 8004d66:	3101      	adds	r1, #1
 8004d68:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8004d6c:	b298      	uxth	r0, r3
 8004d6e:	028b      	lsls	r3, r1, #10
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	4303      	orrs	r3, r0
 8004d74:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8004d78:	e458      	b.n	800462c <USB_EPStartXfer+0x60>
 8004d7a:	2a01      	cmp	r2, #1
 8004d7c:	f47f ac56 	bne.w	800462c <USB_EPStartXfer+0x60>
 8004d80:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8004d84:	b292      	uxth	r2, r2
 8004d86:	442a      	add	r2, r5
 8004d88:	7821      	ldrb	r1, [r4, #0]
 8004d8a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8004d94:	e44a      	b.n	800462c <USB_EPStartXfer+0x60>
        return HAL_ERROR;
 8004d96:	2001      	movs	r0, #1
 8004d98:	e459      	b.n	800464e <USB_EPStartXfer+0x82>

08004d9a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d9a:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d9c:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d9e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8004da2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 8004da6:	e007      	b.n	8004db8 <USB_ReadPMA+0x1e>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004da8:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004dac:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004dae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004db2:	704a      	strb	r2, [r1, #1]
    pBuf++;
 8004db4:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8004db6:	3c01      	subs	r4, #1
 8004db8:	2c00      	cmp	r4, #0
 8004dba:	d1f5      	bne.n	8004da8 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004dbc:	f013 0f01 	tst.w	r3, #1
 8004dc0:	d001      	beq.n	8004dc6 <USB_ReadPMA+0x2c>
  {
    RdVal = *pdwVal;
 8004dc2:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004dc4:	700b      	strb	r3, [r1, #0]
  }
}
 8004dc6:	bc10      	pop	{r4}
 8004dc8:	4770      	bx	lr

08004dca <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dca:	4770      	bx	lr

08004dcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004dcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	490f      	ldr	r1, [pc, #60]	@ (8004e10 <MX_USB_DEVICE_Init+0x44>)
 8004dd2:	4810      	ldr	r0, [pc, #64]	@ (8004e14 <MX_USB_DEVICE_Init+0x48>)
 8004dd4:	f000 fb0e 	bl	80053f4 <USBD_Init>
 8004dd8:	b970      	cbnz	r0, 8004df8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004dda:	490f      	ldr	r1, [pc, #60]	@ (8004e18 <MX_USB_DEVICE_Init+0x4c>)
 8004ddc:	480d      	ldr	r0, [pc, #52]	@ (8004e14 <MX_USB_DEVICE_Init+0x48>)
 8004dde:	f000 fb20 	bl	8005422 <USBD_RegisterClass>
 8004de2:	b960      	cbnz	r0, 8004dfe <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004de4:	490d      	ldr	r1, [pc, #52]	@ (8004e1c <MX_USB_DEVICE_Init+0x50>)
 8004de6:	480b      	ldr	r0, [pc, #44]	@ (8004e14 <MX_USB_DEVICE_Init+0x48>)
 8004de8:	f000 f965 	bl	80050b6 <USBD_CDC_RegisterInterface>
 8004dec:	b950      	cbnz	r0, 8004e04 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004dee:	4809      	ldr	r0, [pc, #36]	@ (8004e14 <MX_USB_DEVICE_Init+0x48>)
 8004df0:	f000 fb1e 	bl	8005430 <USBD_Start>
 8004df4:	b948      	cbnz	r0, 8004e0a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004df6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004df8:	f7fc f97a 	bl	80010f0 <Error_Handler>
 8004dfc:	e7ed      	b.n	8004dda <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004dfe:	f7fc f977 	bl	80010f0 <Error_Handler>
 8004e02:	e7ef      	b.n	8004de4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004e04:	f7fc f974 	bl	80010f0 <Error_Handler>
 8004e08:	e7f1      	b.n	8004dee <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004e0a:	f7fc f971 	bl	80010f0 <Error_Handler>
}
 8004e0e:	e7f2      	b.n	8004df6 <MX_USB_DEVICE_Init+0x2a>
 8004e10:	20000160 	.word	0x20000160
 8004e14:	200003d4 	.word	0x200003d4
 8004e18:	200000d8 	.word	0x200000d8
 8004e1c:	2000011c 	.word	0x2000011c

08004e20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e20:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e22:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e26:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8004e2a:	b15b      	cbz	r3, 8004e44 <USBD_CDC_EP0_RxReady+0x24>
 8004e2c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8004e30:	28ff      	cmp	r0, #255	@ 0xff
 8004e32:	d007      	beq.n	8004e44 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004e3e:	23ff      	movs	r3, #255	@ 0xff
 8004e40:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8004e44:	2000      	movs	r0, #0
 8004e46:	bd10      	pop	{r4, pc}

08004e48 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004e48:	2343      	movs	r3, #67	@ 0x43
 8004e4a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004e4c:	4800      	ldr	r0, [pc, #0]	@ (8004e50 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004e4e:	4770      	bx	lr
 8004e50:	20000050 	.word	0x20000050

08004e54 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004e54:	2343      	movs	r3, #67	@ 0x43
 8004e56:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004e58:	4800      	ldr	r0, [pc, #0]	@ (8004e5c <USBD_CDC_GetHSCfgDesc+0x8>)
 8004e5a:	4770      	bx	lr
 8004e5c:	20000094 	.word	0x20000094

08004e60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e60:	2343      	movs	r3, #67	@ 0x43
 8004e62:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004e64:	4800      	ldr	r0, [pc, #0]	@ (8004e68 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004e66:	4770      	bx	lr
 8004e68:	2000000c 	.word	0x2000000c

08004e6c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004e6c:	230a      	movs	r3, #10
 8004e6e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004e70:	4800      	ldr	r0, [pc, #0]	@ (8004e74 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004e72:	4770      	bx	lr
 8004e74:	20000110 	.word	0x20000110

08004e78 <USBD_CDC_DataOut>:
{
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e7c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e80:	f000 faac 	bl	80053dc <USBD_LL_GetRxDataSize>
 8004e84:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8004e88:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004e8c:	b14b      	cbz	r3, 8004ea2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e8e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8004e98:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8004e9c:	4798      	blx	r3
    return USBD_OK;
 8004e9e:	2000      	movs	r0, #0
}
 8004ea0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004ea2:	2002      	movs	r0, #2
 8004ea4:	e7fc      	b.n	8004ea0 <USBD_CDC_DataOut+0x28>

08004ea6 <USBD_CDC_DataIn>:
{
 8004ea6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ea8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004eac:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0
  if (pdev->pClassData != NULL)
 8004eb0:	b1f2      	cbz	r2, 8004ef0 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004eb2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004eb6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	b14b      	cbz	r3, 8004ed2 <USBD_CDC_DataIn+0x2c>
 8004ebe:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8004ec2:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8004ec6:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 8004ec8:	fbb3 fcf4 	udiv	ip, r3, r4
 8004ecc:	fb04 331c 	mls	r3, r4, ip, r3
 8004ed0:	b123      	cbz	r3, 8004edc <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    return USBD_OK;
 8004ed8:	2000      	movs	r0, #0
}
 8004eda:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8004edc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004ee0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ee8:	4613      	mov	r3, r2
 8004eea:	f000 fa67 	bl	80053bc <USBD_LL_Transmit>
 8004eee:	e7f3      	b.n	8004ed8 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8004ef0:	2002      	movs	r0, #2
 8004ef2:	e7f2      	b.n	8004eda <USBD_CDC_DataIn+0x34>

08004ef4 <USBD_CDC_Setup>:
{
 8004ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	4606      	mov	r6, r0
 8004efa:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004efc:	f8d0 72b8 	ldr.w	r7, [r0, #696]	@ 0x2b8
  uint8_t ifalt = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8004f06:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f0a:	780b      	ldrb	r3, [r1, #0]
 8004f0c:	f013 0560 	ands.w	r5, r3, #96	@ 0x60
 8004f10:	d027      	beq.n	8004f62 <USBD_CDC_Setup+0x6e>
 8004f12:	2d20      	cmp	r5, #32
 8004f14:	d153      	bne.n	8004fbe <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8004f16:	88ca      	ldrh	r2, [r1, #6]
 8004f18:	b1da      	cbz	r2, 8004f52 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8004f1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f1e:	d00c      	beq.n	8004f3a <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f20:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	4639      	mov	r1, r7
 8004f28:	7860      	ldrb	r0, [r4, #1]
 8004f2a:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f2c:	88e2      	ldrh	r2, [r4, #6]
 8004f2e:	4639      	mov	r1, r7
 8004f30:	4630      	mov	r0, r6
 8004f32:	f000 ff8b 	bl	8005e4c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004f36:	2500      	movs	r5, #0
 8004f38:	e044      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8004f3a:	784b      	ldrb	r3, [r1, #1]
 8004f3c:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f40:	798b      	ldrb	r3, [r1, #6]
 8004f42:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f46:	88ca      	ldrh	r2, [r1, #6]
 8004f48:	4639      	mov	r1, r7
 8004f4a:	f000 ff94 	bl	8005e76 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004f4e:	2500      	movs	r5, #0
 8004f50:	e038      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f52:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	7848      	ldrb	r0, [r1, #1]
 8004f5c:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8004f5e:	2500      	movs	r5, #0
 8004f60:	e030      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8004f62:	784f      	ldrb	r7, [r1, #1]
 8004f64:	2f0a      	cmp	r7, #10
 8004f66:	d010      	beq.n	8004f8a <USBD_CDC_Setup+0x96>
 8004f68:	2f0b      	cmp	r7, #11
 8004f6a:	d01c      	beq.n	8004fa6 <USBD_CDC_Setup+0xb2>
 8004f6c:	bb1f      	cbnz	r7, 8004fb6 <USBD_CDC_Setup+0xc2>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f6e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d003      	beq.n	8004f7e <USBD_CDC_Setup+0x8a>
            USBD_CtlError(pdev, req);
 8004f76:	f000 fbc3 	bl	8005700 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f7a:	2502      	movs	r5, #2
 8004f7c:	e022      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004f7e:	2202      	movs	r2, #2
 8004f80:	a901      	add	r1, sp, #4
 8004f82:	f000 ff63 	bl	8005e4c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004f86:	463d      	mov	r5, r7
 8004f88:	e01c      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f8a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d003      	beq.n	8004f9a <USBD_CDC_Setup+0xa6>
            USBD_CtlError(pdev, req);
 8004f92:	f000 fbb5 	bl	8005700 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f96:	2502      	movs	r5, #2
 8004f98:	e014      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f10d 0107 	add.w	r1, sp, #7
 8004fa0:	f000 ff54 	bl	8005e4c <USBD_CtlSendData>
 8004fa4:	e00e      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fa6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d00a      	beq.n	8004fc4 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8004fae:	f000 fba7 	bl	8005700 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fb2:	2502      	movs	r5, #2
 8004fb4:	e006      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
          USBD_CtlError(pdev, req);
 8004fb6:	f000 fba3 	bl	8005700 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fba:	2502      	movs	r5, #2
          break;
 8004fbc:	e002      	b.n	8004fc4 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8004fbe:	f000 fb9f 	bl	8005700 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fc2:	2502      	movs	r5, #2
}
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	b003      	add	sp, #12
 8004fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fca <USBD_CDC_DeInit>:
{
 8004fca:	b538      	push	{r3, r4, r5, lr}
 8004fcc:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fce:	2181      	movs	r1, #129	@ 0x81
 8004fd0:	f000 f9bd 	bl	800534e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fd4:	2500      	movs	r5, #0
 8004fd6:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004fd8:	2101      	movs	r1, #1
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 f9b7 	bl	800534e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004fe0:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004fe4:	2182      	movs	r1, #130	@ 0x82
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f9b1 	bl	800534e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004fec:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8004fee:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004ff2:	b14b      	cbz	r3, 8005008 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ff4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ffc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8005000:	f000 f9f6 	bl	80053f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005004:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8005008:	2000      	movs	r0, #0
 800500a:	bd38      	pop	{r3, r4, r5, pc}

0800500c <USBD_CDC_Init>:
{
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005010:	7c03      	ldrb	r3, [r0, #16]
 8005012:	bbab      	cbnz	r3, 8005080 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005018:	2202      	movs	r2, #2
 800501a:	2181      	movs	r1, #129	@ 0x81
 800501c:	f000 f98c 	bl	8005338 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005020:	2501      	movs	r5, #1
 8005022:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005028:	2202      	movs	r2, #2
 800502a:	4629      	mov	r1, r5
 800502c:	4620      	mov	r0, r4
 800502e:	f000 f983 	bl	8005338 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005032:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005036:	2308      	movs	r3, #8
 8005038:	2203      	movs	r2, #3
 800503a:	2182      	movs	r1, #130	@ 0x82
 800503c:	4620      	mov	r0, r4
 800503e:	f000 f97b 	bl	8005338 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005042:	2301      	movs	r3, #1
 8005044:	6423      	str	r3, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005046:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800504a:	f000 f9cd 	bl	80053e8 <USBD_static_malloc>
 800504e:	4605      	mov	r5, r0
 8005050:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8005054:	b368      	cbz	r0, 80050b2 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005056:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4798      	blx	r3
    hcdc->TxState = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005064:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005068:	7c26      	ldrb	r6, [r4, #16]
 800506a:	b9ce      	cbnz	r6, 80050a0 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800506c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005070:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8005074:	2101      	movs	r1, #1
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f9a8 	bl	80053cc <USBD_LL_PrepareReceive>
}
 800507c:	4630      	mov	r0, r6
 800507e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005080:	2340      	movs	r3, #64	@ 0x40
 8005082:	2202      	movs	r2, #2
 8005084:	2181      	movs	r1, #129	@ 0x81
 8005086:	f000 f957 	bl	8005338 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800508a:	2501      	movs	r5, #1
 800508c:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800508e:	2340      	movs	r3, #64	@ 0x40
 8005090:	2202      	movs	r2, #2
 8005092:	4629      	mov	r1, r5
 8005094:	4620      	mov	r0, r4
 8005096:	f000 f94f 	bl	8005338 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800509a:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
 800509e:	e7ca      	b.n	8005036 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050a0:	2340      	movs	r3, #64	@ 0x40
 80050a2:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80050a6:	2101      	movs	r1, #1
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 f98f 	bl	80053cc <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80050ae:	2600      	movs	r6, #0
 80050b0:	e7e4      	b.n	800507c <USBD_CDC_Init+0x70>
    ret = 1U;
 80050b2:	2601      	movs	r6, #1
 80050b4:	e7e2      	b.n	800507c <USBD_CDC_Init+0x70>

080050b6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80050b6:	b119      	cbz	r1, 80050c0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80050b8:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 80050bc:	2000      	movs	r0, #0
 80050be:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80050c0:	2002      	movs	r0, #2
  }

  return ret;
}
 80050c2:	4770      	bx	lr

080050c4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
 80050c8:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80050cc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
}
 80050d0:	2000      	movs	r0, #0
 80050d2:	4770      	bx	lr

080050d4 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->RxBuffer = pbuff;
 80050d8:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return USBD_OK;
}
 80050dc:	2000      	movs	r0, #0
 80050de:	4770      	bx	lr

080050e0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050e0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80050e4:	b192      	cbz	r2, 800510c <USBD_CDC_ReceivePacket+0x2c>
{
 80050e6:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050e8:	7c03      	ldrb	r3, [r0, #16]
 80050ea:	b943      	cbnz	r3, 80050fe <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80050ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050f0:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80050f4:	2101      	movs	r1, #1
 80050f6:	f000 f969 	bl	80053cc <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80050fa:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80050fc:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80050fe:	2340      	movs	r3, #64	@ 0x40
 8005100:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8005104:	2101      	movs	r1, #1
 8005106:	f000 f961 	bl	80053cc <USBD_LL_PrepareReceive>
 800510a:	e7f6      	b.n	80050fa <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800510c:	2002      	movs	r0, #2
}
 800510e:	4770      	bx	lr

08005110 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005110:	2000      	movs	r0, #0
 8005112:	4770      	bx	lr

08005114 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005114:	2820      	cmp	r0, #32
 8005116:	d011      	beq.n	800513c <CDC_Control_FS+0x28>
 8005118:	2821      	cmp	r0, #33	@ 0x21
 800511a:	d11e      	bne.n	800515a <CDC_Control_FS+0x46>
        buf[5] = pbuf[5];
        buf[6] = pbuf[6];
    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = buf[0];
 800511c:	4b10      	ldr	r3, [pc, #64]	@ (8005160 <CDC_Control_FS+0x4c>)
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	700a      	strb	r2, [r1, #0]
        pbuf[1] = buf[1];
 8005122:	785a      	ldrb	r2, [r3, #1]
 8005124:	704a      	strb	r2, [r1, #1]
        pbuf[2] = buf[2];
 8005126:	789a      	ldrb	r2, [r3, #2]
 8005128:	708a      	strb	r2, [r1, #2]
        pbuf[3] = buf[3];
 800512a:	78da      	ldrb	r2, [r3, #3]
 800512c:	70ca      	strb	r2, [r1, #3]
        pbuf[4] = buf[4];
 800512e:	791a      	ldrb	r2, [r3, #4]
 8005130:	710a      	strb	r2, [r1, #4]
        pbuf[5] = buf[5];
 8005132:	795a      	ldrb	r2, [r3, #5]
 8005134:	714a      	strb	r2, [r1, #5]
        pbuf[6] = buf[6];
 8005136:	799b      	ldrb	r3, [r3, #6]
 8005138:	718b      	strb	r3, [r1, #6]
    break;
 800513a:	e00e      	b.n	800515a <CDC_Control_FS+0x46>
        buf[0] = pbuf[0];
 800513c:	780a      	ldrb	r2, [r1, #0]
 800513e:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <CDC_Control_FS+0x4c>)
 8005140:	701a      	strb	r2, [r3, #0]
        buf[1] = pbuf[1];
 8005142:	784a      	ldrb	r2, [r1, #1]
 8005144:	705a      	strb	r2, [r3, #1]
        buf[2] = pbuf[2];
 8005146:	788a      	ldrb	r2, [r1, #2]
 8005148:	709a      	strb	r2, [r3, #2]
        buf[3] = pbuf[3];
 800514a:	78ca      	ldrb	r2, [r1, #3]
 800514c:	70da      	strb	r2, [r3, #3]
        buf[4] = pbuf[4];
 800514e:	790a      	ldrb	r2, [r1, #4]
 8005150:	711a      	strb	r2, [r3, #4]
        buf[5] = pbuf[5];
 8005152:	794a      	ldrb	r2, [r1, #5]
 8005154:	715a      	strb	r2, [r3, #5]
        buf[6] = pbuf[6];
 8005156:	798a      	ldrb	r2, [r1, #6]
 8005158:	719a      	strb	r2, [r3, #6]
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800515a:	2000      	movs	r0, #0
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000698 	.word	0x20000698

08005164 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	460c      	mov	r4, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005168:	4d06      	ldr	r5, [pc, #24]	@ (8005184 <CDC_Receive_FS+0x20>)
 800516a:	4601      	mov	r1, r0
 800516c:	4628      	mov	r0, r5
 800516e:	f7ff ffb1 	bl	80050d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005172:	4628      	mov	r0, r5
 8005174:	f7ff ffb4 	bl	80050e0 <USBD_CDC_ReceivePacket>
  USBRxHandler(UserRxBufferFS, *Len);
 8005178:	8821      	ldrh	r1, [r4, #0]
 800517a:	4803      	ldr	r0, [pc, #12]	@ (8005188 <CDC_Receive_FS+0x24>)
 800517c:	f7fb ff90 	bl	80010a0 <USBRxHandler>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005180:	2000      	movs	r0, #0
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	200003d4 	.word	0x200003d4
 8005188:	20000aa0 	.word	0x20000aa0

0800518c <CDC_Init_FS>:
{
 800518c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800518e:	4c06      	ldr	r4, [pc, #24]	@ (80051a8 <CDC_Init_FS+0x1c>)
 8005190:	2200      	movs	r2, #0
 8005192:	4906      	ldr	r1, [pc, #24]	@ (80051ac <CDC_Init_FS+0x20>)
 8005194:	4620      	mov	r0, r4
 8005196:	f7ff ff95 	bl	80050c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800519a:	4905      	ldr	r1, [pc, #20]	@ (80051b0 <CDC_Init_FS+0x24>)
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff ff99 	bl	80050d4 <USBD_CDC_SetRxBuffer>
}
 80051a2:	2000      	movs	r0, #0
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	bf00      	nop
 80051a8:	200003d4 	.word	0x200003d4
 80051ac:	200006a0 	.word	0x200006a0
 80051b0:	20000aa0 	.word	0x20000aa0

080051b4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80051b4:	2802      	cmp	r0, #2
 80051b6:	d805      	bhi.n	80051c4 <USBD_Get_USB_Status+0x10>
 80051b8:	e8df f000 	tbb	[pc, r0]
 80051bc:	0405      	.short	0x0405
 80051be:	02          	.byte	0x02
 80051bf:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80051c0:	2001      	movs	r0, #1
    break;
 80051c2:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80051c4:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80051c6:	4770      	bx	lr

080051c8 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 80051c8:	6802      	ldr	r2, [r0, #0]
 80051ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005204 <HAL_PCD_MspInit+0x3c>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d000      	beq.n	80051d2 <HAL_PCD_MspInit+0xa>
 80051d0:	4770      	bx	lr
{
 80051d2:	b500      	push	{lr}
 80051d4:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80051d6:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80051e0:	61da      	str	r2, [r3, #28]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80051ec:	2200      	movs	r2, #0
 80051ee:	4611      	mov	r1, r2
 80051f0:	2014      	movs	r0, #20
 80051f2:	f7fc fb99 	bl	8001928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80051f6:	2014      	movs	r0, #20
 80051f8:	f7fc fba6 	bl	8001948 <HAL_NVIC_EnableIRQ>
}
 80051fc:	b003      	add	sp, #12
 80051fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005202:	bf00      	nop
 8005204:	40005c00 	.word	0x40005c00

08005208 <HAL_PCD_SetupStageCallback>:
{
 8005208:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800520a:	f500 712c 	add.w	r1, r0, #688	@ 0x2b0
 800520e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8005212:	f000 f925 	bl	8005460 <USBD_LL_SetupStage>
}
 8005216:	bd08      	pop	{r3, pc}

08005218 <HAL_PCD_DataOutStageCallback>:
{
 8005218:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800521a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800521e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005222:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8005226:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800522a:	f000 f946 	bl	80054ba <USBD_LL_DataOutStage>
}
 800522e:	bd08      	pop	{r3, pc}

08005230 <HAL_PCD_DataInStageCallback>:
{
 8005230:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005232:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005236:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800523a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800523c:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8005240:	f000 f981 	bl	8005546 <USBD_LL_DataInStage>
}
 8005244:	bd08      	pop	{r3, pc}

08005246 <HAL_PCD_SOFCallback>:
{
 8005246:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005248:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800524c:	f000 fa22 	bl	8005694 <USBD_LL_SOF>
}
 8005250:	bd08      	pop	{r3, pc}

08005252 <HAL_PCD_ResetCallback>:
{
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005256:	6883      	ldr	r3, [r0, #8]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d109      	bne.n	8005270 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800525c:	2101      	movs	r1, #1
 800525e:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 8005262:	f000 fa00 	bl	8005666 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005266:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 800526a:	f000 f9d4 	bl	8005616 <USBD_LL_Reset>
}
 800526e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005270:	f7fb ff3e 	bl	80010f0 <Error_Handler>
 8005274:	e7f2      	b.n	800525c <HAL_PCD_ResetCallback+0xa>
	...

08005278 <HAL_PCD_SuspendCallback>:
{
 8005278:	b510      	push	{r4, lr}
 800527a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800527c:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8005280:	f000 f9f4 	bl	800566c <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8005284:	69a3      	ldr	r3, [r4, #24]
 8005286:	b123      	cbz	r3, 8005292 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005288:	4a02      	ldr	r2, [pc, #8]	@ (8005294 <HAL_PCD_SuspendCallback+0x1c>)
 800528a:	6913      	ldr	r3, [r2, #16]
 800528c:	f043 0306 	orr.w	r3, r3, #6
 8005290:	6113      	str	r3, [r2, #16]
}
 8005292:	bd10      	pop	{r4, pc}
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <HAL_PCD_ResumeCallback>:
{
 8005298:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800529a:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800529e:	f000 f9ee 	bl	800567e <USBD_LL_Resume>
}
 80052a2:	bd08      	pop	{r3, pc}

080052a4 <USBD_LL_Init>:
{
 80052a4:	b510      	push	{r4, lr}
 80052a6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80052a8:	481d      	ldr	r0, [pc, #116]	@ (8005320 <USBD_LL_Init+0x7c>)
 80052aa:	f8c0 42ec 	str.w	r4, [r0, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80052ae:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Instance = USB;
 80052b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005324 <USBD_LL_Init+0x80>)
 80052b4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80052b6:	2308      	movs	r3, #8
 80052b8:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80052ba:	2302      	movs	r3, #2
 80052bc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80052be:	2300      	movs	r3, #0
 80052c0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80052c2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80052c4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80052c6:	f7fc fdd5 	bl	8001e74 <HAL_PCD_Init>
 80052ca:	bb30      	cbnz	r0, 800531a <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80052cc:	2318      	movs	r3, #24
 80052ce:	2200      	movs	r2, #0
 80052d0:	4611      	mov	r1, r2
 80052d2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80052d6:	f7fd fd3a 	bl	8002d4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80052da:	2358      	movs	r3, #88	@ 0x58
 80052dc:	2200      	movs	r2, #0
 80052de:	2180      	movs	r1, #128	@ 0x80
 80052e0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80052e4:	f7fd fd33 	bl	8002d4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80052e8:	23c0      	movs	r3, #192	@ 0xc0
 80052ea:	2200      	movs	r2, #0
 80052ec:	2181      	movs	r1, #129	@ 0x81
 80052ee:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80052f2:	f7fd fd2c 	bl	8002d4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80052f6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80052fa:	2200      	movs	r2, #0
 80052fc:	2101      	movs	r1, #1
 80052fe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8005302:	f7fd fd24 	bl	8002d4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800530a:	2200      	movs	r2, #0
 800530c:	2182      	movs	r1, #130	@ 0x82
 800530e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8005312:	f7fd fd1c 	bl	8002d4e <HAL_PCDEx_PMAConfig>
}
 8005316:	2000      	movs	r0, #0
 8005318:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800531a:	f7fb fee9 	bl	80010f0 <Error_Handler>
 800531e:	e7d5      	b.n	80052cc <USBD_LL_Init+0x28>
 8005320:	200010c0 	.word	0x200010c0
 8005324:	40005c00 	.word	0x40005c00

08005328 <USBD_LL_Start>:
{
 8005328:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800532a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800532e:	f7fc fe29 	bl	8001f84 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005332:	f7ff ff3f 	bl	80051b4 <USBD_Get_USB_Status>
}
 8005336:	bd08      	pop	{r3, pc}

08005338 <USBD_LL_OpenEP>:
{
 8005338:	b508      	push	{r3, lr}
 800533a:	4694      	mov	ip, r2
 800533c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800533e:	4663      	mov	r3, ip
 8005340:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005344:	f7fd fbd4 	bl	8002af0 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005348:	f7ff ff34 	bl	80051b4 <USBD_Get_USB_Status>
}
 800534c:	bd08      	pop	{r3, pc}

0800534e <USBD_LL_CloseEP>:
{
 800534e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005350:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005354:	f7fd fc0a 	bl	8002b6c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005358:	f7ff ff2c 	bl	80051b4 <USBD_Get_USB_Status>
}
 800535c:	bd08      	pop	{r3, pc}

0800535e <USBD_LL_StallEP>:
{
 800535e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005360:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005364:	f7fd fc7c 	bl	8002c60 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005368:	f7ff ff24 	bl	80051b4 <USBD_Get_USB_Status>
}
 800536c:	bd08      	pop	{r3, pc}

0800536e <USBD_LL_ClearStallEP>:
{
 800536e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005370:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005374:	f7fd fcb0 	bl	8002cd8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005378:	f7ff ff1c 	bl	80051b4 <USBD_Get_USB_Status>
}
 800537c:	bd08      	pop	{r3, pc}

0800537e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800537e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8005382:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005386:	d108      	bne.n	800539a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005388:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800538c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005390:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005394:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
}
 8005398:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800539a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800539e:	3101      	adds	r1, #1
 80053a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80053a4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80053a8:	7898      	ldrb	r0, [r3, #2]
 80053aa:	4770      	bx	lr

080053ac <USBD_LL_SetUSBAddress>:
{
 80053ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80053ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80053b2:	f7fd fab1 	bl	8002918 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053b6:	f7ff fefd 	bl	80051b4 <USBD_Get_USB_Status>
}
 80053ba:	bd08      	pop	{r3, pc}

080053bc <USBD_LL_Transmit>:
{
 80053bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80053be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80053c2:	f7fd fc2b 	bl	8002c1c <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053c6:	f7ff fef5 	bl	80051b4 <USBD_Get_USB_Status>
}
 80053ca:	bd08      	pop	{r3, pc}

080053cc <USBD_LL_PrepareReceive>:
{
 80053cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80053ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80053d2:	f7fd fbfd 	bl	8002bd0 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053d6:	f7ff feed 	bl	80051b4 <USBD_Get_USB_Status>
}
 80053da:	bd08      	pop	{r3, pc}

080053dc <USBD_LL_GetRxDataSize>:
{
 80053dc:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80053de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80053e2:	f7fd fc12 	bl	8002c0a <HAL_PCD_EP_GetRxCount>
}
 80053e6:	bd08      	pop	{r3, pc}

080053e8 <USBD_static_malloc>:
}
 80053e8:	4800      	ldr	r0, [pc, #0]	@ (80053ec <USBD_static_malloc+0x4>)
 80053ea:	4770      	bx	lr
 80053ec:	20000ea0 	.word	0x20000ea0

080053f0 <USBD_static_free>:
}
 80053f0:	4770      	bx	lr

080053f2 <HAL_PCDEx_SetConnectionState>:
}
 80053f2:	4770      	bx	lr

080053f4 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053f4:	b198      	cbz	r0, 800541e <USBD_Init+0x2a>
{
 80053f6:	b508      	push	{r3, lr}
 80053f8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80053fa:	f8d0 02b4 	ldr.w	r0, [r0, #692]	@ 0x2b4
 80053fe:	b110      	cbz	r0, 8005406 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005400:	2000      	movs	r0, #0
 8005402:	f8c3 02b4 	str.w	r0, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005406:	b109      	cbz	r1, 800540c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8005408:	f8c3 12b0 	str.w	r1, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800540c:	2101      	movs	r1, #1
 800540e:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005412:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff45 	bl	80052a4 <USBD_LL_Init>

  return USBD_OK;
 800541a:	2000      	movs	r0, #0
}
 800541c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800541e:	2002      	movs	r0, #2
}
 8005420:	4770      	bx	lr

08005422 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005422:	b119      	cbz	r1, 800542c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005424:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8005428:	2000      	movs	r0, #0
 800542a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800542c:	2002      	movs	r0, #2
  }

  return status;
}
 800542e:	4770      	bx	lr

08005430 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005430:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005432:	f7ff ff79 	bl	8005328 <USBD_LL_Start>

  return USBD_OK;
}
 8005436:	2000      	movs	r0, #0
 8005438:	bd08      	pop	{r3, pc}

0800543a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800543a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800543c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005440:	b12b      	cbz	r3, 800544e <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4798      	blx	r3
 8005446:	b900      	cbnz	r0, 800544a <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005448:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800544a:	2002      	movs	r0, #2
 800544c:	e7fc      	b.n	8005448 <USBD_SetClassConfig+0xe>
 800544e:	2002      	movs	r0, #2
 8005450:	e7fa      	b.n	8005448 <USBD_SetClassConfig+0xe>

08005452 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005452:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005454:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4798      	blx	r3

  return USBD_OK;
}
 800545c:	2000      	movs	r0, #0
 800545e:	bd08      	pop	{r3, pc}

08005460 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005464:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 8005468:	4628      	mov	r0, r5
 800546a:	f000 f935 	bl	80056d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800546e:	2301      	movs	r3, #1
 8005470:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005474:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8005478:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800547c:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 8005480:	f001 031f 	and.w	r3, r1, #31
 8005484:	2b01      	cmp	r3, #1
 8005486:	d008      	beq.n	800549a <USBD_LL_SetupStage+0x3a>
 8005488:	2b02      	cmp	r3, #2
 800548a:	d00b      	beq.n	80054a4 <USBD_LL_SetupStage+0x44>
 800548c:	b97b      	cbnz	r3, 80054ae <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800548e:	4629      	mov	r1, r5
 8005490:	4620      	mov	r0, r4
 8005492:	f000 facf 	bl	8005a34 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8005496:	2000      	movs	r0, #0
 8005498:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800549a:	4629      	mov	r1, r5
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fafd 	bl	8005a9c <USBD_StdItfReq>
      break;
 80054a2:	e7f8      	b.n	8005496 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80054a4:	4629      	mov	r1, r5
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 fb28 	bl	8005afc <USBD_StdEPReq>
      break;
 80054ac:	e7f3      	b.n	8005496 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054ae:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80054b2:	4620      	mov	r0, r4
 80054b4:	f7ff ff53 	bl	800535e <USBD_LL_StallEP>
      break;
 80054b8:	e7ed      	b.n	8005496 <USBD_LL_SetupStage+0x36>

080054ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054ba:	b538      	push	{r3, r4, r5, lr}
 80054bc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054be:	460d      	mov	r5, r1
 80054c0:	bb91      	cbnz	r1, 8005528 <USBD_LL_DataOutStage+0x6e>
 80054c2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054c4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80054c8:	2a03      	cmp	r2, #3
 80054ca:	d003      	beq.n	80054d4 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80054cc:	2a05      	cmp	r2, #5
 80054ce:	d024      	beq.n	800551a <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80054d0:	4608      	mov	r0, r1
 80054d2:	e033      	b.n	800553c <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 80054d4:	f8d0 1160 	ldr.w	r1, [r0, #352]	@ 0x160
 80054d8:	f8d0 2164 	ldr.w	r2, [r0, #356]	@ 0x164
 80054dc:	4291      	cmp	r1, r2
 80054de:	d90d      	bls.n	80054fc <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 80054e0:	1a89      	subs	r1, r1, r2
 80054e2:	f8c0 1160 	str.w	r1, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80054e6:	428a      	cmp	r2, r1
 80054e8:	d906      	bls.n	80054f8 <USBD_LL_DataOutStage+0x3e>
 80054ea:	b28a      	uxth	r2, r1
 80054ec:	4619      	mov	r1, r3
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 fcd0 	bl	8005e94 <USBD_CtlContinueRx>
  return USBD_OK;
 80054f4:	4628      	mov	r0, r5
 80054f6:	e021      	b.n	800553c <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 80054f8:	b292      	uxth	r2, r2
 80054fa:	e7f7      	b.n	80054ec <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	b11b      	cbz	r3, 800550c <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005504:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005508:	2a03      	cmp	r2, #3
 800550a:	d004      	beq.n	8005516 <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 800550c:	4620      	mov	r0, r4
 800550e:	f000 fcc9 	bl	8005ea4 <USBD_CtlSendStatus>
  return USBD_OK;
 8005512:	4628      	mov	r0, r5
 8005514:	e012      	b.n	800553c <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 8005516:	4798      	blx	r3
 8005518:	e7f8      	b.n	800550c <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 800551a:	2100      	movs	r1, #0
 800551c:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005520:	f7ff ff1d 	bl	800535e <USBD_LL_StallEP>
  return USBD_OK;
 8005524:	4628      	mov	r0, r5
 8005526:	e009      	b.n	800553c <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005528:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	b133      	cbz	r3, 800553e <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005530:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005534:	2a03      	cmp	r2, #3
 8005536:	d104      	bne.n	8005542 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8005538:	4798      	blx	r3
  return USBD_OK;
 800553a:	2000      	movs	r0, #0
}
 800553c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800553e:	2002      	movs	r0, #2
 8005540:	e7fc      	b.n	800553c <USBD_LL_DataOutStage+0x82>
 8005542:	2002      	movs	r0, #2
 8005544:	e7fa      	b.n	800553c <USBD_LL_DataOutStage+0x82>

08005546 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005546:	b538      	push	{r3, r4, r5, lr}
 8005548:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800554a:	460d      	mov	r5, r1
 800554c:	2900      	cmp	r1, #0
 800554e:	d153      	bne.n	80055f8 <USBD_LL_DataInStage+0xb2>
 8005550:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005552:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005556:	2a02      	cmp	r2, #2
 8005558:	d00c      	beq.n	8005574 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800555a:	2a04      	cmp	r2, #4
 800555c:	d000      	beq.n	8005560 <USBD_LL_DataInStage+0x1a>
 800555e:	b91a      	cbnz	r2, 8005568 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005560:	2180      	movs	r1, #128	@ 0x80
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff fefb 	bl	800535e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005568:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d03e      	beq.n	80055ee <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005570:	4628      	mov	r0, r5
}
 8005572:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005574:	6a02      	ldr	r2, [r0, #32]
 8005576:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8005578:	428a      	cmp	r2, r1
 800557a:	d81b      	bhi.n	80055b4 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800557c:	69c2      	ldr	r2, [r0, #28]
 800557e:	fbb2 f3f1 	udiv	r3, r2, r1
 8005582:	fb01 2313 	mls	r3, r1, r3, r2
 8005586:	b92b      	cbnz	r3, 8005594 <USBD_LL_DataInStage+0x4e>
 8005588:	4291      	cmp	r1, r2
 800558a:	d803      	bhi.n	8005594 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 800558c:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005590:	429a      	cmp	r2, r3
 8005592:	d31c      	bcc.n	80055ce <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005594:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	b11b      	cbz	r3, 80055a4 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800559c:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055a0:	2a03      	cmp	r2, #3
 80055a2:	d021      	beq.n	80055e8 <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 80055a4:	2180      	movs	r1, #128	@ 0x80
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7ff fed9 	bl	800535e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 fc84 	bl	8005eba <USBD_CtlReceiveStatus>
 80055b2:	e7d9      	b.n	8005568 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 80055b4:	1a52      	subs	r2, r2, r1
 80055b6:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055b8:	b292      	uxth	r2, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	f000 fc53 	bl	8005e66 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055c0:	2300      	movs	r3, #0
 80055c2:	461a      	mov	r2, r3
 80055c4:	4619      	mov	r1, r3
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff ff00 	bl	80053cc <USBD_LL_PrepareReceive>
 80055cc:	e7cc      	b.n	8005568 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055ce:	2200      	movs	r2, #0
 80055d0:	4611      	mov	r1, r2
 80055d2:	f000 fc48 	bl	8005e66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055d6:	2100      	movs	r1, #0
 80055d8:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055dc:	460b      	mov	r3, r1
 80055de:	460a      	mov	r2, r1
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7ff fef3 	bl	80053cc <USBD_LL_PrepareReceive>
 80055e6:	e7bf      	b.n	8005568 <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 80055e8:	4620      	mov	r0, r4
 80055ea:	4798      	blx	r3
 80055ec:	e7da      	b.n	80055a4 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 80055f4:	4628      	mov	r0, r5
 80055f6:	e7bc      	b.n	8005572 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 80055f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	b133      	cbz	r3, 800560e <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005600:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005604:	2a03      	cmp	r2, #3
 8005606:	d104      	bne.n	8005612 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8005608:	4798      	blx	r3
  return USBD_OK;
 800560a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800560c:	e7b1      	b.n	8005572 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 800560e:	2002      	movs	r0, #2
 8005610:	e7af      	b.n	8005572 <USBD_LL_DataInStage+0x2c>
 8005612:	2002      	movs	r0, #2
 8005614:	e7ad      	b.n	8005572 <USBD_LL_DataInStage+0x2c>

08005616 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005616:	b570      	push	{r4, r5, r6, lr}
 8005618:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800561a:	2340      	movs	r3, #64	@ 0x40
 800561c:	2200      	movs	r2, #0
 800561e:	4611      	mov	r1, r2
 8005620:	f7ff fe8a 	bl	8005338 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005624:	2501      	movs	r5, #1
 8005626:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800562a:	2640      	movs	r6, #64	@ 0x40
 800562c:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005630:	4633      	mov	r3, r6
 8005632:	2200      	movs	r2, #0
 8005634:	2180      	movs	r1, #128	@ 0x80
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff fe7e 	bl	8005338 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800563c:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800563e:	6266      	str	r6, [r4, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005640:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005644:	2300      	movs	r3, #0
 8005646:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800564a:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800564c:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4

  if (pdev->pClassData)
 8005650:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005654:	b12b      	cbz	r3, 8005662 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005656:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2100      	movs	r1, #0
 800565e:	4620      	mov	r0, r4
 8005660:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005662:	2000      	movs	r0, #0
 8005664:	bd70      	pop	{r4, r5, r6, pc}

08005666 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005666:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005668:	2000      	movs	r0, #0
 800566a:	4770      	bx	lr

0800566c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800566c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005670:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005674:	2304      	movs	r3, #4
 8005676:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800567a:	2000      	movs	r0, #0
 800567c:	4770      	bx	lr

0800567e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800567e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005682:	2b04      	cmp	r3, #4
 8005684:	d001      	beq.n	800568a <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8005686:	2000      	movs	r0, #0
 8005688:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800568a:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800568e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8005692:	e7f8      	b.n	8005686 <USBD_LL_Resume+0x8>

08005694 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005694:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005696:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800569a:	2b03      	cmp	r3, #3
 800569c:	d001      	beq.n	80056a2 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800569e:	2000      	movs	r0, #0
 80056a0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80056a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f8      	beq.n	800569e <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80056ac:	4798      	blx	r3
 80056ae:	e7f6      	b.n	800569e <USBD_LL_SOF+0xa>

080056b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80056b0:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80056b2:	2000      	movs	r0, #0

  while (*buf != '\0')
 80056b4:	e002      	b.n	80056bc <USBD_GetLen+0xc>
  {
    len++;
 80056b6:	3001      	adds	r0, #1
 80056b8:	b2c0      	uxtb	r0, r0
    buf++;
 80056ba:	3301      	adds	r3, #1
  while (*buf != '\0')
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	2a00      	cmp	r2, #0
 80056c0:	d1f9      	bne.n	80056b6 <USBD_GetLen+0x6>
  }

  return len;
}
 80056c2:	4770      	bx	lr

080056c4 <USBD_SetFeature>:
{
 80056c4:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056c6:	884b      	ldrh	r3, [r1, #2]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d000      	beq.n	80056ce <USBD_SetFeature+0xa>
}
 80056cc:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80056ce:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80056d2:	f000 fbe7 	bl	8005ea4 <USBD_CtlSendStatus>
}
 80056d6:	e7f9      	b.n	80056cc <USBD_SetFeature+0x8>

080056d8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80056d8:	780b      	ldrb	r3, [r1, #0]
 80056da:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80056dc:	784b      	ldrb	r3, [r1, #1]
 80056de:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80056e0:	788b      	ldrb	r3, [r1, #2]
 80056e2:	78ca      	ldrb	r2, [r1, #3]
 80056e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056e8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80056ea:	790b      	ldrb	r3, [r1, #4]
 80056ec:	794a      	ldrb	r2, [r1, #5]
 80056ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056f2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80056f4:	798b      	ldrb	r3, [r1, #6]
 80056f6:	79ca      	ldrb	r2, [r1, #7]
 80056f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056fc:	80c3      	strh	r3, [r0, #6]
}
 80056fe:	4770      	bx	lr

08005700 <USBD_CtlError>:
{
 8005700:	b510      	push	{r4, lr}
 8005702:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005704:	2180      	movs	r1, #128	@ 0x80
 8005706:	f7ff fe2a 	bl	800535e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800570a:	2100      	movs	r1, #0
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff fe26 	bl	800535e <USBD_LL_StallEP>
}
 8005712:	bd10      	pop	{r4, pc}

08005714 <USBD_GetDescriptor>:
{
 8005714:	b530      	push	{r4, r5, lr}
 8005716:	b083      	sub	sp, #12
 8005718:	4605      	mov	r5, r0
 800571a:	460c      	mov	r4, r1
  uint16_t len = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005722:	884a      	ldrh	r2, [r1, #2]
 8005724:	0a13      	lsrs	r3, r2, #8
 8005726:	3b01      	subs	r3, #1
 8005728:	2b06      	cmp	r3, #6
 800572a:	f200 80a4 	bhi.w	8005876 <USBD_GetDescriptor+0x162>
 800572e:	e8df f003 	tbb	[pc, r3]
 8005732:	1804      	.short	0x1804
 8005734:	86a2a22c 	.word	0x86a2a22c
 8005738:	93          	.byte	0x93
 8005739:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800573a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f10d 0106 	add.w	r1, sp, #6
 8005744:	7c00      	ldrb	r0, [r0, #16]
 8005746:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005748:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800574c:	b11a      	cbz	r2, 8005756 <USBD_GetDescriptor+0x42>
 800574e:	88e3      	ldrh	r3, [r4, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 8094 	bne.w	800587e <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8005756:	88e3      	ldrh	r3, [r4, #6]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 809a 	beq.w	8005892 <USBD_GetDescriptor+0x17e>
}
 800575e:	b003      	add	sp, #12
 8005760:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005762:	7c03      	ldrb	r3, [r0, #16]
 8005764:	b943      	cbnz	r3, 8005778 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005766:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	f10d 0006 	add.w	r0, sp, #6
 8005770:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005772:	2302      	movs	r3, #2
 8005774:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005776:	e7e7      	b.n	8005748 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005778:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	f10d 0006 	add.w	r0, sp, #6
 8005782:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005784:	2302      	movs	r3, #2
 8005786:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005788:	e7de      	b.n	8005748 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	2a05      	cmp	r2, #5
 800578e:	d852      	bhi.n	8005836 <USBD_GetDescriptor+0x122>
 8005790:	e8df f002 	tbb	[pc, r2]
 8005794:	2a1d1003 	.word	0x2a1d1003
 8005798:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800579a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	b123      	cbz	r3, 80057ac <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80057a2:	f10d 0106 	add.w	r1, sp, #6
 80057a6:	7c00      	ldrb	r0, [r0, #16]
 80057a8:	4798      	blx	r3
  if (err != 0U)
 80057aa:	e7cd      	b.n	8005748 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80057ac:	4621      	mov	r1, r4
 80057ae:	f7ff ffa7 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 80057b2:	e7d4      	b.n	800575e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057b4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	b123      	cbz	r3, 80057c6 <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057bc:	f10d 0106 	add.w	r1, sp, #6
 80057c0:	7c00      	ldrb	r0, [r0, #16]
 80057c2:	4798      	blx	r3
  if (err != 0U)
 80057c4:	e7c0      	b.n	8005748 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80057c6:	4621      	mov	r1, r4
 80057c8:	f7ff ff9a 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 80057cc:	e7c7      	b.n	800575e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057ce:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	b123      	cbz	r3, 80057e0 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057d6:	f10d 0106 	add.w	r1, sp, #6
 80057da:	7c00      	ldrb	r0, [r0, #16]
 80057dc:	4798      	blx	r3
  if (err != 0U)
 80057de:	e7b3      	b.n	8005748 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80057e0:	4621      	mov	r1, r4
 80057e2:	f7ff ff8d 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 80057e6:	e7ba      	b.n	800575e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	b123      	cbz	r3, 80057fa <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057f0:	f10d 0106 	add.w	r1, sp, #6
 80057f4:	7c00      	ldrb	r0, [r0, #16]
 80057f6:	4798      	blx	r3
  if (err != 0U)
 80057f8:	e7a6      	b.n	8005748 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80057fa:	4621      	mov	r1, r4
 80057fc:	f7ff ff80 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 8005800:	e7ad      	b.n	800575e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005802:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	b123      	cbz	r3, 8005814 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800580a:	f10d 0106 	add.w	r1, sp, #6
 800580e:	7c00      	ldrb	r0, [r0, #16]
 8005810:	4798      	blx	r3
  if (err != 0U)
 8005812:	e799      	b.n	8005748 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005814:	4621      	mov	r1, r4
 8005816:	f7ff ff73 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 800581a:	e7a0      	b.n	800575e <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800581c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	b123      	cbz	r3, 800582e <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005824:	f10d 0106 	add.w	r1, sp, #6
 8005828:	7c00      	ldrb	r0, [r0, #16]
 800582a:	4798      	blx	r3
  if (err != 0U)
 800582c:	e78c      	b.n	8005748 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800582e:	4621      	mov	r1, r4
 8005830:	f7ff ff66 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 8005834:	e793      	b.n	800575e <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 8005836:	4621      	mov	r1, r4
 8005838:	f7ff ff62 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 800583c:	e78f      	b.n	800575e <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800583e:	7c03      	ldrb	r3, [r0, #16]
 8005840:	b933      	cbnz	r3, 8005850 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005842:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005848:	f10d 0006 	add.w	r0, sp, #6
 800584c:	4798      	blx	r3
  if (err != 0U)
 800584e:	e77b      	b.n	8005748 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005850:	4621      	mov	r1, r4
 8005852:	f7ff ff55 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 8005856:	e782      	b.n	800575e <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005858:	7c03      	ldrb	r3, [r0, #16]
 800585a:	b943      	cbnz	r3, 800586e <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800585c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	f10d 0006 	add.w	r0, sp, #6
 8005866:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005868:	2307      	movs	r3, #7
 800586a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800586c:	e76c      	b.n	8005748 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800586e:	4621      	mov	r1, r4
 8005870:	f7ff ff46 	bl	8005700 <USBD_CtlError>
  if (err != 0U)
 8005874:	e773      	b.n	800575e <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8005876:	4621      	mov	r1, r4
 8005878:	f7ff ff42 	bl	8005700 <USBD_CtlError>
    return;
 800587c:	e76f      	b.n	800575e <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 800587e:	429a      	cmp	r2, r3
 8005880:	bf28      	it	cs
 8005882:	461a      	movcs	r2, r3
 8005884:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005888:	4601      	mov	r1, r0
 800588a:	4628      	mov	r0, r5
 800588c:	f000 fade 	bl	8005e4c <USBD_CtlSendData>
 8005890:	e761      	b.n	8005756 <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8005892:	4628      	mov	r0, r5
 8005894:	f000 fb06 	bl	8005ea4 <USBD_CtlSendStatus>
 8005898:	e761      	b.n	800575e <USBD_GetDescriptor+0x4a>

0800589a <USBD_SetAddress>:
{
 800589a:	b538      	push	{r3, r4, r5, lr}
 800589c:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800589e:	888b      	ldrh	r3, [r1, #4]
 80058a0:	b9f3      	cbnz	r3, 80058e0 <USBD_SetAddress+0x46>
 80058a2:	88cb      	ldrh	r3, [r1, #6]
 80058a4:	b9e3      	cbnz	r3, 80058e0 <USBD_SetAddress+0x46>
 80058a6:	884b      	ldrh	r3, [r1, #2]
 80058a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80058aa:	d819      	bhi.n	80058e0 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058ac:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d00c      	beq.n	80058d2 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80058b8:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80058bc:	4629      	mov	r1, r5
 80058be:	f7ff fd75 	bl	80053ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80058c2:	4620      	mov	r0, r4
 80058c4:	f000 faee 	bl	8005ea4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80058c8:	b135      	cbz	r5, 80058d8 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058ca:	2302      	movs	r3, #2
 80058cc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80058d0:	e009      	b.n	80058e6 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80058d2:	f7ff ff15 	bl	8005700 <USBD_CtlError>
 80058d6:	e006      	b.n	80058e6 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80058d8:	2301      	movs	r3, #1
 80058da:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80058de:	e002      	b.n	80058e6 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ff0d 	bl	8005700 <USBD_CtlError>
}
 80058e6:	bd38      	pop	{r3, r4, r5, pc}

080058e8 <USBD_SetConfig>:
{
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4604      	mov	r4, r0
 80058ec:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80058ee:	7889      	ldrb	r1, [r1, #2]
 80058f0:	4b28      	ldr	r3, [pc, #160]	@ (8005994 <USBD_SetConfig+0xac>)
 80058f2:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058f4:	2901      	cmp	r1, #1
 80058f6:	d80e      	bhi.n	8005916 <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 80058f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d00e      	beq.n	800591e <USBD_SetConfig+0x36>
 8005900:	2b03      	cmp	r3, #3
 8005902:	d021      	beq.n	8005948 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005904:	4629      	mov	r1, r5
 8005906:	f7ff fefb 	bl	8005700 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800590a:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <USBD_SetConfig+0xac>)
 800590c:	7819      	ldrb	r1, [r3, #0]
 800590e:	4620      	mov	r0, r4
 8005910:	f7ff fd9f 	bl	8005452 <USBD_ClrClassConfig>
        break;
 8005914:	e002      	b.n	800591c <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 8005916:	4629      	mov	r1, r5
 8005918:	f7ff fef2 	bl	8005700 <USBD_CtlError>
}
 800591c:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 800591e:	b181      	cbz	r1, 8005942 <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 8005920:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005922:	2303      	movs	r3, #3
 8005924:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005928:	f7ff fd87 	bl	800543a <USBD_SetClassConfig>
 800592c:	2802      	cmp	r0, #2
 800592e:	d003      	beq.n	8005938 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fab7 	bl	8005ea4 <USBD_CtlSendStatus>
 8005936:	e7f1      	b.n	800591c <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8005938:	4629      	mov	r1, r5
 800593a:	4620      	mov	r0, r4
 800593c:	f7ff fee0 	bl	8005700 <USBD_CtlError>
            return;
 8005940:	e7ec      	b.n	800591c <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8005942:	f000 faaf 	bl	8005ea4 <USBD_CtlSendStatus>
 8005946:	e7e9      	b.n	800591c <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 8005948:	b189      	cbz	r1, 800596e <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 800594a:	6843      	ldr	r3, [r0, #4]
 800594c:	4299      	cmp	r1, r3
 800594e:	d01d      	beq.n	800598c <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005950:	b2d9      	uxtb	r1, r3
 8005952:	f7ff fd7e 	bl	8005452 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005956:	4b0f      	ldr	r3, [pc, #60]	@ (8005994 <USBD_SetConfig+0xac>)
 8005958:	7819      	ldrb	r1, [r3, #0]
 800595a:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800595c:	4620      	mov	r0, r4
 800595e:	f7ff fd6c 	bl	800543a <USBD_SetClassConfig>
 8005962:	2802      	cmp	r0, #2
 8005964:	d00d      	beq.n	8005982 <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 8005966:	4620      	mov	r0, r4
 8005968:	f000 fa9c 	bl	8005ea4 <USBD_CtlSendStatus>
 800596c:	e7d6      	b.n	800591c <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800596e:	2302      	movs	r3, #2
 8005970:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8005974:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005976:	f7ff fd6c 	bl	8005452 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800597a:	4620      	mov	r0, r4
 800597c:	f000 fa92 	bl	8005ea4 <USBD_CtlSendStatus>
 8005980:	e7cc      	b.n	800591c <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8005982:	4629      	mov	r1, r5
 8005984:	4620      	mov	r0, r4
 8005986:	f7ff febb 	bl	8005700 <USBD_CtlError>
            return;
 800598a:	e7c7      	b.n	800591c <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 800598c:	f000 fa8a 	bl	8005ea4 <USBD_CtlSendStatus>
 8005990:	e7c4      	b.n	800591c <USBD_SetConfig+0x34>
 8005992:	bf00      	nop
 8005994:	200013b0 	.word	0x200013b0

08005998 <USBD_GetConfig>:
{
 8005998:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800599a:	88cb      	ldrh	r3, [r1, #6]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d10a      	bne.n	80059b6 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80059a0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d909      	bls.n	80059bc <USBD_GetConfig+0x24>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d111      	bne.n	80059d0 <USBD_GetConfig+0x38>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80059ac:	2201      	movs	r2, #1
 80059ae:	1d01      	adds	r1, r0, #4
 80059b0:	f000 fa4c 	bl	8005e4c <USBD_CtlSendData>
        break;
 80059b4:	e001      	b.n	80059ba <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80059b6:	f7ff fea3 	bl	8005700 <USBD_CtlError>
}
 80059ba:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	b13b      	cbz	r3, 80059d0 <USBD_GetConfig+0x38>
        pdev->dev_default_config = 0U;
 80059c0:	4601      	mov	r1, r0
 80059c2:	2300      	movs	r3, #0
 80059c4:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80059c8:	2201      	movs	r2, #1
 80059ca:	f000 fa3f 	bl	8005e4c <USBD_CtlSendData>
        break;
 80059ce:	e7f4      	b.n	80059ba <USBD_GetConfig+0x22>
        USBD_CtlError(pdev, req);
 80059d0:	f7ff fe96 	bl	8005700 <USBD_CtlError>
}
 80059d4:	e7f1      	b.n	80059ba <USBD_GetConfig+0x22>

080059d6 <USBD_GetStatus>:
{
 80059d6:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80059d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059dc:	3b01      	subs	r3, #1
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d812      	bhi.n	8005a08 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80059e2:	88cb      	ldrh	r3, [r1, #6]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d10c      	bne.n	8005a02 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059e8:	2301      	movs	r3, #1
 80059ea:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80059ec:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80059f0:	b10b      	cbz	r3, 80059f6 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059f2:	2303      	movs	r3, #3
 80059f4:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80059f6:	2202      	movs	r2, #2
 80059f8:	f100 010c 	add.w	r1, r0, #12
 80059fc:	f000 fa26 	bl	8005e4c <USBD_CtlSendData>
}
 8005a00:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8005a02:	f7ff fe7d 	bl	8005700 <USBD_CtlError>
        break;
 8005a06:	e7fb      	b.n	8005a00 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8005a08:	f7ff fe7a 	bl	8005700 <USBD_CtlError>
}
 8005a0c:	e7f8      	b.n	8005a00 <USBD_GetStatus+0x2a>

08005a0e <USBD_ClrFeature>:
{
 8005a0e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005a10:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a14:	3b01      	subs	r3, #1
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d809      	bhi.n	8005a2e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a1a:	884b      	ldrh	r3, [r1, #2]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d000      	beq.n	8005a22 <USBD_ClrFeature+0x14>
}
 8005a20:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005a28:	f000 fa3c 	bl	8005ea4 <USBD_CtlSendStatus>
 8005a2c:	e7f8      	b.n	8005a20 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8005a2e:	f7ff fe67 	bl	8005700 <USBD_CtlError>
}
 8005a32:	e7f5      	b.n	8005a20 <USBD_ClrFeature+0x12>

08005a34 <USBD_StdDevReq>:
{
 8005a34:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a36:	780b      	ldrb	r3, [r1, #0]
 8005a38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d005      	beq.n	8005a4c <USBD_StdDevReq+0x18>
 8005a40:	2b40      	cmp	r3, #64	@ 0x40
 8005a42:	d003      	beq.n	8005a4c <USBD_StdDevReq+0x18>
 8005a44:	b143      	cbz	r3, 8005a58 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8005a46:	f7ff fe5b 	bl	8005700 <USBD_CtlError>
      break;
 8005a4a:	e003      	b.n	8005a54 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8005a4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4798      	blx	r3
}
 8005a54:	2000      	movs	r0, #0
 8005a56:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8005a58:	784b      	ldrb	r3, [r1, #1]
 8005a5a:	2b09      	cmp	r3, #9
 8005a5c:	d81b      	bhi.n	8005a96 <USBD_StdDevReq+0x62>
 8005a5e:	e8df f003 	tbb	[pc, r3]
 8005a62:	1711      	.short	0x1711
 8005a64:	081a141a 	.word	0x081a141a
 8005a68:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 8005a6c:	f7ff fe52 	bl	8005714 <USBD_GetDescriptor>
          break;
 8005a70:	e7f0      	b.n	8005a54 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8005a72:	f7ff ff12 	bl	800589a <USBD_SetAddress>
          break;
 8005a76:	e7ed      	b.n	8005a54 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8005a78:	f7ff ff36 	bl	80058e8 <USBD_SetConfig>
          break;
 8005a7c:	e7ea      	b.n	8005a54 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8005a7e:	f7ff ff8b 	bl	8005998 <USBD_GetConfig>
          break;
 8005a82:	e7e7      	b.n	8005a54 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8005a84:	f7ff ffa7 	bl	80059d6 <USBD_GetStatus>
          break;
 8005a88:	e7e4      	b.n	8005a54 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8005a8a:	f7ff fe1b 	bl	80056c4 <USBD_SetFeature>
          break;
 8005a8e:	e7e1      	b.n	8005a54 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8005a90:	f7ff ffbd 	bl	8005a0e <USBD_ClrFeature>
          break;
 8005a94:	e7de      	b.n	8005a54 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8005a96:	f7ff fe33 	bl	8005700 <USBD_CtlError>
          break;
 8005a9a:	e7db      	b.n	8005a54 <USBD_StdDevReq+0x20>

08005a9c <USBD_StdItfReq>:
{
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa2:	780b      	ldrb	r3, [r1, #0]
 8005aa4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d006      	beq.n	8005aba <USBD_StdItfReq+0x1e>
 8005aac:	2b40      	cmp	r3, #64	@ 0x40
 8005aae:	d004      	beq.n	8005aba <USBD_StdItfReq+0x1e>
 8005ab0:	b11b      	cbz	r3, 8005aba <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8005ab2:	f7ff fe25 	bl	8005700 <USBD_CtlError>
}
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005aba:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d816      	bhi.n	8005af2 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ac4:	7923      	ldrb	r3, [r4, #4]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d80e      	bhi.n	8005ae8 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005aca:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ad6:	88e3      	ldrh	r3, [r4, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ec      	bne.n	8005ab6 <USBD_StdItfReq+0x1a>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d1ea      	bne.n	8005ab6 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f000 f9df 	bl	8005ea4 <USBD_CtlSendStatus>
 8005ae6:	e7e6      	b.n	8005ab6 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f7ff fe08 	bl	8005700 <USBD_CtlError>
 8005af0:	e7e1      	b.n	8005ab6 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8005af2:	4621      	mov	r1, r4
 8005af4:	4628      	mov	r0, r5
 8005af6:	f7ff fe03 	bl	8005700 <USBD_CtlError>
          break;
 8005afa:	e7dc      	b.n	8005ab6 <USBD_StdItfReq+0x1a>

08005afc <USBD_StdEPReq>:
{
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005b00:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b02:	780c      	ldrb	r4, [r1, #0]
 8005b04:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8005b08:	2c20      	cmp	r4, #32
 8005b0a:	d007      	beq.n	8005b1c <USBD_StdEPReq+0x20>
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	2c40      	cmp	r4, #64	@ 0x40
 8005b10:	d004      	beq.n	8005b1c <USBD_StdEPReq+0x20>
 8005b12:	b15c      	cbz	r4, 8005b2c <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8005b14:	f7ff fdf4 	bl	8005700 <USBD_CtlError>
  return ret;
 8005b18:	2400      	movs	r4, #0
      break;
 8005b1a:	e005      	b.n	8005b28 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8005b1c:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4628      	mov	r0, r5
 8005b24:	4798      	blx	r3
  return ret;
 8005b26:	2400      	movs	r4, #0
}
 8005b28:	4620      	mov	r0, r4
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005b2c:	2c20      	cmp	r4, #32
 8005b2e:	d009      	beq.n	8005b44 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 8005b30:	784e      	ldrb	r6, [r1, #1]
 8005b32:	2e01      	cmp	r6, #1
 8005b34:	d033      	beq.n	8005b9e <USBD_StdEPReq+0xa2>
 8005b36:	2e03      	cmp	r6, #3
 8005b38:	d00a      	beq.n	8005b50 <USBD_StdEPReq+0x54>
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	d055      	beq.n	8005bea <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 8005b3e:	f7ff fddf 	bl	8005700 <USBD_CtlError>
          break;
 8005b42:	e7f1      	b.n	8005b28 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4798      	blx	r3
 8005b4c:	4604      	mov	r4, r0
        return ret;
 8005b4e:	e7eb      	b.n	8005b28 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8005b50:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d004      	beq.n	8005b62 <USBD_StdEPReq+0x66>
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d011      	beq.n	8005b80 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8005b5c:	f7ff fdd0 	bl	8005700 <USBD_CtlError>
              break;
 8005b60:	e7e2      	b.n	8005b28 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b62:	b10a      	cbz	r2, 8005b68 <USBD_StdEPReq+0x6c>
 8005b64:	2a80      	cmp	r2, #128	@ 0x80
 8005b66:	d103      	bne.n	8005b70 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff fdc9 	bl	8005700 <USBD_CtlError>
 8005b6e:	e7db      	b.n	8005b28 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8005b70:	4611      	mov	r1, r2
 8005b72:	f7ff fbf4 	bl	800535e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b76:	2180      	movs	r1, #128	@ 0x80
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7ff fbf0 	bl	800535e <USBD_LL_StallEP>
 8005b7e:	e7d3      	b.n	8005b28 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b80:	884b      	ldrh	r3, [r1, #2]
 8005b82:	b923      	cbnz	r3, 8005b8e <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 8005b84:	b11a      	cbz	r2, 8005b8e <USBD_StdEPReq+0x92>
 8005b86:	2a80      	cmp	r2, #128	@ 0x80
 8005b88:	d001      	beq.n	8005b8e <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b8a:	88cb      	ldrh	r3, [r1, #6]
 8005b8c:	b11b      	cbz	r3, 8005b96 <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 f988 	bl	8005ea4 <USBD_CtlSendStatus>
              break;
 8005b94:	e7c8      	b.n	8005b28 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005b96:	4611      	mov	r1, r2
 8005b98:	f7ff fbe1 	bl	800535e <USBD_LL_StallEP>
 8005b9c:	e7f7      	b.n	8005b8e <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 8005b9e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d004      	beq.n	8005bb0 <USBD_StdEPReq+0xb4>
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d011      	beq.n	8005bce <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 8005baa:	f7ff fda9 	bl	8005700 <USBD_CtlError>
              break;
 8005bae:	e7bb      	b.n	8005b28 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bb0:	b10a      	cbz	r2, 8005bb6 <USBD_StdEPReq+0xba>
 8005bb2:	2a80      	cmp	r2, #128	@ 0x80
 8005bb4:	d103      	bne.n	8005bbe <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7ff fda2 	bl	8005700 <USBD_CtlError>
 8005bbc:	e7b4      	b.n	8005b28 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	f7ff fbcd 	bl	800535e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bc4:	2180      	movs	r1, #128	@ 0x80
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f7ff fbc9 	bl	800535e <USBD_LL_StallEP>
 8005bcc:	e7ac      	b.n	8005b28 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bce:	884b      	ldrh	r3, [r1, #2]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1a9      	bne.n	8005b28 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005bd4:	f012 0f7f 	tst.w	r2, #127	@ 0x7f
 8005bd8:	d103      	bne.n	8005be2 <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 f962 	bl	8005ea4 <USBD_CtlSendStatus>
 8005be0:	e7a2      	b.n	8005b28 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005be2:	4611      	mov	r1, r2
 8005be4:	f7ff fbc3 	bl	800536e <USBD_LL_ClearStallEP>
 8005be8:	e7f7      	b.n	8005bda <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 8005bea:	f890 029c 	ldrb.w	r0, [r0, #668]	@ 0x29c
 8005bee:	2802      	cmp	r0, #2
 8005bf0:	d006      	beq.n	8005c00 <USBD_StdEPReq+0x104>
 8005bf2:	2803      	cmp	r0, #3
 8005bf4:	d029      	beq.n	8005c4a <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f7ff fd82 	bl	8005700 <USBD_CtlError>
  return ret;
 8005bfc:	4634      	mov	r4, r6
              break;
 8005bfe:	e793      	b.n	8005b28 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c00:	b10a      	cbz	r2, 8005c06 <USBD_StdEPReq+0x10a>
 8005c02:	2a80      	cmp	r2, #128	@ 0x80
 8005c04:	d113      	bne.n	8005c2e <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c0a:	d115      	bne.n	8005c38 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c14:	0091      	lsls	r1, r2, #2
 8005c16:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8005c1a:	4429      	add	r1, r5
 8005c1c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c22:	2202      	movs	r2, #2
 8005c24:	4628      	mov	r0, r5
 8005c26:	f000 f911 	bl	8005e4c <USBD_CtlSendData>
  return ret;
 8005c2a:	4634      	mov	r4, r6
              break;
 8005c2c:	e77c      	b.n	8005b28 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7ff fd66 	bl	8005700 <USBD_CtlError>
  return ret;
 8005c34:	4634      	mov	r4, r6
                break;
 8005c36:	e777      	b.n	8005b28 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c40:	0091      	lsls	r1, r2, #2
 8005c42:	3110      	adds	r1, #16
 8005c44:	4429      	add	r1, r5
 8005c46:	3104      	adds	r1, #4
 8005c48:	e7e9      	b.n	8005c1e <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	db1f      	blt.n	8005c90 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c50:	f002 000f 	and.w	r0, r2, #15
 8005c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c58:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005c5c:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8005c60:	b320      	cbz	r0, 8005cac <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	db27      	blt.n	8005cb6 <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c66:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c6e:	009c      	lsls	r4, r3, #2
 8005c70:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8005c74:	442c      	add	r4, r5
 8005c76:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c78:	b10a      	cbz	r2, 8005c7e <USBD_StdEPReq+0x182>
 8005c7a:	2a80      	cmp	r2, #128	@ 0x80
 8005c7c:	d124      	bne.n	8005cc8 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c82:	2202      	movs	r2, #2
 8005c84:	4621      	mov	r1, r4
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f8e0 	bl	8005e4c <USBD_CtlSendData>
  return ret;
 8005c8c:	4634      	mov	r4, r6
              break;
 8005c8e:	e74b      	b.n	8005b28 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c90:	f002 000f 	and.w	r0, r2, #15
 8005c94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c98:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005c9c:	6980      	ldr	r0, [r0, #24]
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1df      	bne.n	8005c62 <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f7ff fd2c 	bl	8005700 <USBD_CtlError>
  return ret;
 8005ca8:	4634      	mov	r4, r6
                  break;
 8005caa:	e73d      	b.n	8005b28 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 8005cac:	4628      	mov	r0, r5
 8005cae:	f7ff fd27 	bl	8005700 <USBD_CtlError>
  return ret;
 8005cb2:	4634      	mov	r4, r6
                  break;
 8005cb4:	e738      	b.n	8005b28 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cb6:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8005cba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005cbe:	009c      	lsls	r4, r3, #2
 8005cc0:	3410      	adds	r4, #16
 8005cc2:	442c      	add	r4, r5
 8005cc4:	3404      	adds	r4, #4
 8005cc6:	e7d7      	b.n	8005c78 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f7ff fb57 	bl	800537e <USBD_LL_IsStallEP>
 8005cd0:	b110      	cbz	r0, 8005cd8 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	e7d4      	b.n	8005c82 <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	e7d1      	b.n	8005c82 <USBD_StdEPReq+0x186>

08005cde <USBD_GetString>:
  if (desc != NULL)
 8005cde:	b1d0      	cbz	r0, 8005d16 <USBD_GetString+0x38>
{
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005ce8:	f7ff fce2 	bl	80056b0 <USBD_GetLen>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005cf4:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	706b      	strb	r3, [r5, #1]
 8005cfa:	2302      	movs	r3, #2
    while (*desc != '\0')
 8005cfc:	e007      	b.n	8005d0e <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8005cfe:	3401      	adds	r4, #1
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8005d06:	3302      	adds	r3, #2
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8005d0e:	7820      	ldrb	r0, [r4, #0]
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d1f4      	bne.n	8005cfe <USBD_GetString+0x20>
}
 8005d14:	bd70      	pop	{r4, r5, r6, pc}
 8005d16:	4770      	bx	lr

08005d18 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d18:	2312      	movs	r3, #18
 8005d1a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005d1c:	4800      	ldr	r0, [pc, #0]	@ (8005d20 <USBD_FS_DeviceDescriptor+0x8>)
 8005d1e:	4770      	bx	lr
 8005d20:	2000014c 	.word	0x2000014c

08005d24 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d24:	2304      	movs	r3, #4
 8005d26:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005d28:	4800      	ldr	r0, [pc, #0]	@ (8005d2c <USBD_FS_LangIDStrDescriptor+0x8>)
 8005d2a:	4770      	bx	lr
 8005d2c:	20000148 	.word	0x20000148

08005d30 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d21e      	bcs.n	8005d74 <IntToUnicode+0x44>
{
 8005d36:	b500      	push	{lr}
 8005d38:	e010      	b.n	8005d5c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005d3a:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8005d3e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8005d42:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005d44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005d48:	f10c 0c01 	add.w	ip, ip, #1
 8005d4c:	f04f 0e00 	mov.w	lr, #0
 8005d50:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8005d54:	3301      	adds	r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d209      	bcs.n	8005d70 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8005d5c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8005d60:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8005d64:	d2e9      	bcs.n	8005d3a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d66:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8005d6a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8005d6e:	e7e8      	b.n	8005d42 <IntToUnicode+0x12>
  }
}
 8005d70:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <Get_SerialNum>:
{
 8005d78:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <Get_SerialNum+0x30>)
 8005d7c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d80:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d84:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8005d88:	18c0      	adds	r0, r0, r3
 8005d8a:	d100      	bne.n	8005d8e <Get_SerialNum+0x16>
}
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d8e:	4d07      	ldr	r5, [pc, #28]	@ (8005dac <Get_SerialNum+0x34>)
 8005d90:	2208      	movs	r2, #8
 8005d92:	4629      	mov	r1, r5
 8005d94:	f7ff ffcc 	bl	8005d30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d98:	2204      	movs	r2, #4
 8005d9a:	f105 0110 	add.w	r1, r5, #16
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7ff ffc6 	bl	8005d30 <IntToUnicode>
}
 8005da4:	e7f2      	b.n	8005d8c <Get_SerialNum+0x14>
 8005da6:	bf00      	nop
 8005da8:	1ffff000 	.word	0x1ffff000
 8005dac:	2000012e 	.word	0x2000012e

08005db0 <USBD_FS_SerialStrDescriptor>:
{
 8005db0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005db2:	231a      	movs	r3, #26
 8005db4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005db6:	f7ff ffdf 	bl	8005d78 <Get_SerialNum>
}
 8005dba:	4801      	ldr	r0, [pc, #4]	@ (8005dc0 <USBD_FS_SerialStrDescriptor+0x10>)
 8005dbc:	bd08      	pop	{r3, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000012c 	.word	0x2000012c

08005dc4 <USBD_FS_ProductStrDescriptor>:
{
 8005dc4:	b508      	push	{r3, lr}
 8005dc6:	460a      	mov	r2, r1
  if(speed == 0)
 8005dc8:	b928      	cbnz	r0, 8005dd6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dca:	4905      	ldr	r1, [pc, #20]	@ (8005de0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005dcc:	4805      	ldr	r0, [pc, #20]	@ (8005de4 <USBD_FS_ProductStrDescriptor+0x20>)
 8005dce:	f7ff ff86 	bl	8005cde <USBD_GetString>
}
 8005dd2:	4803      	ldr	r0, [pc, #12]	@ (8005de0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005dd4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005dd6:	4902      	ldr	r1, [pc, #8]	@ (8005de0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005dd8:	4802      	ldr	r0, [pc, #8]	@ (8005de4 <USBD_FS_ProductStrDescriptor+0x20>)
 8005dda:	f7ff ff80 	bl	8005cde <USBD_GetString>
 8005dde:	e7f8      	b.n	8005dd2 <USBD_FS_ProductStrDescriptor+0xe>
 8005de0:	200013b4 	.word	0x200013b4
 8005de4:	08005fbc 	.word	0x08005fbc

08005de8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005de8:	b510      	push	{r4, lr}
 8005dea:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dec:	4c03      	ldr	r4, [pc, #12]	@ (8005dfc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005dee:	4621      	mov	r1, r4
 8005df0:	4803      	ldr	r0, [pc, #12]	@ (8005e00 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005df2:	f7ff ff74 	bl	8005cde <USBD_GetString>
}
 8005df6:	4620      	mov	r0, r4
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200013b4 	.word	0x200013b4
 8005e00:	08005fd4 	.word	0x08005fd4

08005e04 <USBD_FS_ConfigStrDescriptor>:
{
 8005e04:	b508      	push	{r3, lr}
 8005e06:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005e08:	b928      	cbnz	r0, 8005e16 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e0a:	4905      	ldr	r1, [pc, #20]	@ (8005e20 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005e0c:	4805      	ldr	r0, [pc, #20]	@ (8005e24 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005e0e:	f7ff ff66 	bl	8005cde <USBD_GetString>
}
 8005e12:	4803      	ldr	r0, [pc, #12]	@ (8005e20 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005e14:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e16:	4902      	ldr	r1, [pc, #8]	@ (8005e20 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005e18:	4802      	ldr	r0, [pc, #8]	@ (8005e24 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005e1a:	f7ff ff60 	bl	8005cde <USBD_GetString>
 8005e1e:	e7f8      	b.n	8005e12 <USBD_FS_ConfigStrDescriptor+0xe>
 8005e20:	200013b4 	.word	0x200013b4
 8005e24:	08005fe8 	.word	0x08005fe8

08005e28 <USBD_FS_InterfaceStrDescriptor>:
{
 8005e28:	b508      	push	{r3, lr}
 8005e2a:	460a      	mov	r2, r1
  if(speed == 0)
 8005e2c:	b928      	cbnz	r0, 8005e3a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e2e:	4905      	ldr	r1, [pc, #20]	@ (8005e44 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005e30:	4805      	ldr	r0, [pc, #20]	@ (8005e48 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005e32:	f7ff ff54 	bl	8005cde <USBD_GetString>
}
 8005e36:	4803      	ldr	r0, [pc, #12]	@ (8005e44 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005e38:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e3a:	4902      	ldr	r1, [pc, #8]	@ (8005e44 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005e3c:	4802      	ldr	r0, [pc, #8]	@ (8005e48 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005e3e:	f7ff ff4e 	bl	8005cde <USBD_GetString>
 8005e42:	e7f8      	b.n	8005e36 <USBD_FS_InterfaceStrDescriptor+0xe>
 8005e44:	200013b4 	.word	0x200013b4
 8005e48:	08005ff4 	.word	0x08005ff4

08005e4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005e4c:	b508      	push	{r3, lr}
 8005e4e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e50:	2202      	movs	r2, #2
 8005e52:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005e56:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005e58:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	f7ff faad 	bl	80053bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8005e62:	2000      	movs	r0, #0
 8005e64:	bd08      	pop	{r3, pc}

08005e66 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005e66:	b508      	push	{r3, lr}
 8005e68:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f7ff faa5 	bl	80053bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8005e72:	2000      	movs	r0, #0
 8005e74:	bd08      	pop	{r3, pc}

08005e76 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005e76:	b508      	push	{r3, lr}
 8005e78:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005e80:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005e84:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e88:	460a      	mov	r2, r1
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	f7ff fa9e 	bl	80053cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005e90:	2000      	movs	r0, #0
 8005e92:	bd08      	pop	{r3, pc}

08005e94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005e94:	b508      	push	{r3, lr}
 8005e96:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e98:	460a      	mov	r2, r1
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	f7ff fa96 	bl	80053cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	bd08      	pop	{r3, pc}

08005ea4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ea4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005eac:	2300      	movs	r3, #0
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f7ff fa83 	bl	80053bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	bd08      	pop	{r3, pc}

08005eba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005eba:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ebc:	2305      	movs	r3, #5
 8005ebe:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f7ff fa80 	bl	80053cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ecc:	2000      	movs	r0, #0
 8005ece:	bd08      	pop	{r3, pc}

08005ed0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ed0:	f7fe ff7b 	bl	8004dca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ed4:	480b      	ldr	r0, [pc, #44]	@ (8005f04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005ed6:	490c      	ldr	r1, [pc, #48]	@ (8005f08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8005f0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8005eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005edc:	e002      	b.n	8005ee4 <LoopCopyDataInit>

08005ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ee2:	3304      	adds	r3, #4

08005ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ee8:	d3f9      	bcc.n	8005ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005eea:	4a09      	ldr	r2, [pc, #36]	@ (8005f10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005eec:	4c09      	ldr	r4, [pc, #36]	@ (8005f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ef0:	e001      	b.n	8005ef6 <LoopFillZerobss>

08005ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ef4:	3204      	adds	r2, #4

08005ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ef8:	d3fb      	bcc.n	8005ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005efa:	f000 f829 	bl	8005f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005efe:	f7fb fa47 	bl	8001390 <main>
  bx lr
 8005f02:	4770      	bx	lr
  ldr r0, =_sdata
 8005f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f08:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8005f0c:	08006030 	.word	0x08006030
  ldr r2, =_sbss
 8005f10:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8005f14:	200015b4 	.word	0x200015b4

08005f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f18:	e7fe      	b.n	8005f18 <ADC1_2_IRQHandler>

08005f1a <memset>:
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4402      	add	r2, r0
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d100      	bne.n	8005f24 <memset+0xa>
 8005f22:	4770      	bx	lr
 8005f24:	f803 1b01 	strb.w	r1, [r3], #1
 8005f28:	e7f9      	b.n	8005f1e <memset+0x4>

08005f2a <strncmp>:
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	b16a      	cbz	r2, 8005f4a <strncmp+0x20>
 8005f2e:	3901      	subs	r1, #1
 8005f30:	1884      	adds	r4, r0, r2
 8005f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d103      	bne.n	8005f46 <strncmp+0x1c>
 8005f3e:	42a0      	cmp	r0, r4
 8005f40:	d001      	beq.n	8005f46 <strncmp+0x1c>
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	d1f5      	bne.n	8005f32 <strncmp+0x8>
 8005f46:	1ad0      	subs	r0, r2, r3
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	e7fc      	b.n	8005f48 <strncmp+0x1e>
	...

08005f50 <__libc_init_array>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	2600      	movs	r6, #0
 8005f54:	4d0c      	ldr	r5, [pc, #48]	@ (8005f88 <__libc_init_array+0x38>)
 8005f56:	4c0d      	ldr	r4, [pc, #52]	@ (8005f8c <__libc_init_array+0x3c>)
 8005f58:	1b64      	subs	r4, r4, r5
 8005f5a:	10a4      	asrs	r4, r4, #2
 8005f5c:	42a6      	cmp	r6, r4
 8005f5e:	d109      	bne.n	8005f74 <__libc_init_array+0x24>
 8005f60:	f000 f81a 	bl	8005f98 <_init>
 8005f64:	2600      	movs	r6, #0
 8005f66:	4d0a      	ldr	r5, [pc, #40]	@ (8005f90 <__libc_init_array+0x40>)
 8005f68:	4c0a      	ldr	r4, [pc, #40]	@ (8005f94 <__libc_init_array+0x44>)
 8005f6a:	1b64      	subs	r4, r4, r5
 8005f6c:	10a4      	asrs	r4, r4, #2
 8005f6e:	42a6      	cmp	r6, r4
 8005f70:	d105      	bne.n	8005f7e <__libc_init_array+0x2e>
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f78:	4798      	blx	r3
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7ee      	b.n	8005f5c <__libc_init_array+0xc>
 8005f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f82:	4798      	blx	r3
 8005f84:	3601      	adds	r6, #1
 8005f86:	e7f2      	b.n	8005f6e <__libc_init_array+0x1e>
 8005f88:	08006028 	.word	0x08006028
 8005f8c:	08006028 	.word	0x08006028
 8005f90:	08006028 	.word	0x08006028
 8005f94:	0800602c 	.word	0x0800602c

08005f98 <_init>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr

08005fa4 <_fini>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr
